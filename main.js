/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/helper-validator-identifier/lib/identifier.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/helper-validator-identifier/lib/identifier.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isIdentifierStart = isIdentifierStart;
exports.isIdentifierChar = isIdentifierChar;
exports.isIdentifierName = isIdentifierName;
let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

function isInAstralSet(code, set) {
  let pos = 0x10000;

  for (let i = 0, length = set.length; i < length; i += 2) {
    pos += set[i];
    if (pos > code) return false;
    pos += set[i + 1];
    if (pos >= code) return true;
  }

  return false;
}

function isIdentifierStart(code) {
  if (code < 65) return code === 36;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;

  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }

  return isInAstralSet(code, astralIdentifierStartCodes);
}

function isIdentifierChar(code) {
  if (code < 48) return code === 36;
  if (code < 58) return true;
  if (code < 65) return false;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;

  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
  }

  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}

function isIdentifierName(name) {
  let isFirst = true;

  for (let i = 0; i < name.length; i++) {
    let cp = name.charCodeAt(i);

    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {
      const trail = name.charCodeAt(++i);

      if ((trail & 0xfc00) === 0xdc00) {
        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
      }
    }

    if (isFirst) {
      isFirst = false;

      if (!isIdentifierStart(cp)) {
        return false;
      }
    } else if (!isIdentifierChar(cp)) {
      return false;
    }
  }

  return !isFirst;
}

/***/ }),

/***/ "./node_modules/@babel/helper-validator-identifier/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/helper-validator-identifier/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "isIdentifierName", ({
  enumerable: true,
  get: function () {
    return _identifier.isIdentifierName;
  }
}));
Object.defineProperty(exports, "isIdentifierChar", ({
  enumerable: true,
  get: function () {
    return _identifier.isIdentifierChar;
  }
}));
Object.defineProperty(exports, "isIdentifierStart", ({
  enumerable: true,
  get: function () {
    return _identifier.isIdentifierStart;
  }
}));
Object.defineProperty(exports, "isReservedWord", ({
  enumerable: true,
  get: function () {
    return _keyword.isReservedWord;
  }
}));
Object.defineProperty(exports, "isStrictBindOnlyReservedWord", ({
  enumerable: true,
  get: function () {
    return _keyword.isStrictBindOnlyReservedWord;
  }
}));
Object.defineProperty(exports, "isStrictBindReservedWord", ({
  enumerable: true,
  get: function () {
    return _keyword.isStrictBindReservedWord;
  }
}));
Object.defineProperty(exports, "isStrictReservedWord", ({
  enumerable: true,
  get: function () {
    return _keyword.isStrictReservedWord;
  }
}));
Object.defineProperty(exports, "isKeyword", ({
  enumerable: true,
  get: function () {
    return _keyword.isKeyword;
  }
}));

var _identifier = __webpack_require__(/*! ./identifier */ "./node_modules/@babel/helper-validator-identifier/lib/identifier.js");

var _keyword = __webpack_require__(/*! ./keyword */ "./node_modules/@babel/helper-validator-identifier/lib/keyword.js");

/***/ }),

/***/ "./node_modules/@babel/helper-validator-identifier/lib/keyword.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/helper-validator-identifier/lib/keyword.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isReservedWord = isReservedWord;
exports.isStrictReservedWord = isStrictReservedWord;
exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
exports.isStrictBindReservedWord = isStrictBindReservedWord;
exports.isKeyword = isKeyword;
const reservedWords = {
  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
  strictBind: ["eval", "arguments"]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);

function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}

function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}

function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}

function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}

function isKeyword(word) {
  return keywords.has(word);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/asserts/assertNode.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/types/lib/asserts/assertNode.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = assertNode;

var _isNode = __webpack_require__(/*! ../validators/isNode */ "./node_modules/@babel/types/lib/validators/isNode.js");

function assertNode(node) {
  if (!(0, _isNode.default)(node)) {
    var _node$type;

    const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
    throw new TypeError(`Not a valid node of type "${type}"`);
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/asserts/generated/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/asserts/generated/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.assertArrayExpression = assertArrayExpression;
exports.assertAssignmentExpression = assertAssignmentExpression;
exports.assertBinaryExpression = assertBinaryExpression;
exports.assertInterpreterDirective = assertInterpreterDirective;
exports.assertDirective = assertDirective;
exports.assertDirectiveLiteral = assertDirectiveLiteral;
exports.assertBlockStatement = assertBlockStatement;
exports.assertBreakStatement = assertBreakStatement;
exports.assertCallExpression = assertCallExpression;
exports.assertCatchClause = assertCatchClause;
exports.assertConditionalExpression = assertConditionalExpression;
exports.assertContinueStatement = assertContinueStatement;
exports.assertDebuggerStatement = assertDebuggerStatement;
exports.assertDoWhileStatement = assertDoWhileStatement;
exports.assertEmptyStatement = assertEmptyStatement;
exports.assertExpressionStatement = assertExpressionStatement;
exports.assertFile = assertFile;
exports.assertForInStatement = assertForInStatement;
exports.assertForStatement = assertForStatement;
exports.assertFunctionDeclaration = assertFunctionDeclaration;
exports.assertFunctionExpression = assertFunctionExpression;
exports.assertIdentifier = assertIdentifier;
exports.assertIfStatement = assertIfStatement;
exports.assertLabeledStatement = assertLabeledStatement;
exports.assertStringLiteral = assertStringLiteral;
exports.assertNumericLiteral = assertNumericLiteral;
exports.assertNullLiteral = assertNullLiteral;
exports.assertBooleanLiteral = assertBooleanLiteral;
exports.assertRegExpLiteral = assertRegExpLiteral;
exports.assertLogicalExpression = assertLogicalExpression;
exports.assertMemberExpression = assertMemberExpression;
exports.assertNewExpression = assertNewExpression;
exports.assertProgram = assertProgram;
exports.assertObjectExpression = assertObjectExpression;
exports.assertObjectMethod = assertObjectMethod;
exports.assertObjectProperty = assertObjectProperty;
exports.assertRestElement = assertRestElement;
exports.assertReturnStatement = assertReturnStatement;
exports.assertSequenceExpression = assertSequenceExpression;
exports.assertParenthesizedExpression = assertParenthesizedExpression;
exports.assertSwitchCase = assertSwitchCase;
exports.assertSwitchStatement = assertSwitchStatement;
exports.assertThisExpression = assertThisExpression;
exports.assertThrowStatement = assertThrowStatement;
exports.assertTryStatement = assertTryStatement;
exports.assertUnaryExpression = assertUnaryExpression;
exports.assertUpdateExpression = assertUpdateExpression;
exports.assertVariableDeclaration = assertVariableDeclaration;
exports.assertVariableDeclarator = assertVariableDeclarator;
exports.assertWhileStatement = assertWhileStatement;
exports.assertWithStatement = assertWithStatement;
exports.assertAssignmentPattern = assertAssignmentPattern;
exports.assertArrayPattern = assertArrayPattern;
exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
exports.assertClassBody = assertClassBody;
exports.assertClassExpression = assertClassExpression;
exports.assertClassDeclaration = assertClassDeclaration;
exports.assertExportAllDeclaration = assertExportAllDeclaration;
exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
exports.assertExportSpecifier = assertExportSpecifier;
exports.assertForOfStatement = assertForOfStatement;
exports.assertImportDeclaration = assertImportDeclaration;
exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
exports.assertImportSpecifier = assertImportSpecifier;
exports.assertMetaProperty = assertMetaProperty;
exports.assertClassMethod = assertClassMethod;
exports.assertObjectPattern = assertObjectPattern;
exports.assertSpreadElement = assertSpreadElement;
exports.assertSuper = assertSuper;
exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
exports.assertTemplateElement = assertTemplateElement;
exports.assertTemplateLiteral = assertTemplateLiteral;
exports.assertYieldExpression = assertYieldExpression;
exports.assertAwaitExpression = assertAwaitExpression;
exports.assertImport = assertImport;
exports.assertBigIntLiteral = assertBigIntLiteral;
exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
exports.assertOptionalCallExpression = assertOptionalCallExpression;
exports.assertClassProperty = assertClassProperty;
exports.assertClassPrivateProperty = assertClassPrivateProperty;
exports.assertClassPrivateMethod = assertClassPrivateMethod;
exports.assertPrivateName = assertPrivateName;
exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
exports.assertClassImplements = assertClassImplements;
exports.assertDeclareClass = assertDeclareClass;
exports.assertDeclareFunction = assertDeclareFunction;
exports.assertDeclareInterface = assertDeclareInterface;
exports.assertDeclareModule = assertDeclareModule;
exports.assertDeclareModuleExports = assertDeclareModuleExports;
exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
exports.assertDeclareVariable = assertDeclareVariable;
exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
exports.assertDeclaredPredicate = assertDeclaredPredicate;
exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
exports.assertFunctionTypeParam = assertFunctionTypeParam;
exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
exports.assertInferredPredicate = assertInferredPredicate;
exports.assertInterfaceExtends = assertInterfaceExtends;
exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
exports.assertObjectTypeProperty = assertObjectTypeProperty;
exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
exports.assertOpaqueType = assertOpaqueType;
exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
exports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
exports.assertTypeAlias = assertTypeAlias;
exports.assertTypeAnnotation = assertTypeAnnotation;
exports.assertTypeCastExpression = assertTypeCastExpression;
exports.assertTypeParameter = assertTypeParameter;
exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
exports.assertVariance = assertVariance;
exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
exports.assertEnumDeclaration = assertEnumDeclaration;
exports.assertEnumBooleanBody = assertEnumBooleanBody;
exports.assertEnumNumberBody = assertEnumNumberBody;
exports.assertEnumStringBody = assertEnumStringBody;
exports.assertEnumSymbolBody = assertEnumSymbolBody;
exports.assertEnumBooleanMember = assertEnumBooleanMember;
exports.assertEnumNumberMember = assertEnumNumberMember;
exports.assertEnumStringMember = assertEnumStringMember;
exports.assertEnumDefaultedMember = assertEnumDefaultedMember;
exports.assertIndexedAccessType = assertIndexedAccessType;
exports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
exports.assertJSXAttribute = assertJSXAttribute;
exports.assertJSXClosingElement = assertJSXClosingElement;
exports.assertJSXElement = assertJSXElement;
exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
exports.assertJSXSpreadChild = assertJSXSpreadChild;
exports.assertJSXIdentifier = assertJSXIdentifier;
exports.assertJSXMemberExpression = assertJSXMemberExpression;
exports.assertJSXNamespacedName = assertJSXNamespacedName;
exports.assertJSXOpeningElement = assertJSXOpeningElement;
exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
exports.assertJSXText = assertJSXText;
exports.assertJSXFragment = assertJSXFragment;
exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
exports.assertJSXClosingFragment = assertJSXClosingFragment;
exports.assertNoop = assertNoop;
exports.assertPlaceholder = assertPlaceholder;
exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
exports.assertArgumentPlaceholder = assertArgumentPlaceholder;
exports.assertBindExpression = assertBindExpression;
exports.assertImportAttribute = assertImportAttribute;
exports.assertDecorator = assertDecorator;
exports.assertDoExpression = assertDoExpression;
exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
exports.assertRecordExpression = assertRecordExpression;
exports.assertTupleExpression = assertTupleExpression;
exports.assertDecimalLiteral = assertDecimalLiteral;
exports.assertStaticBlock = assertStaticBlock;
exports.assertModuleExpression = assertModuleExpression;
exports.assertTopicReference = assertTopicReference;
exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
exports.assertPipelineBareFunction = assertPipelineBareFunction;
exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
exports.assertTSParameterProperty = assertTSParameterProperty;
exports.assertTSDeclareFunction = assertTSDeclareFunction;
exports.assertTSDeclareMethod = assertTSDeclareMethod;
exports.assertTSQualifiedName = assertTSQualifiedName;
exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
exports.assertTSPropertySignature = assertTSPropertySignature;
exports.assertTSMethodSignature = assertTSMethodSignature;
exports.assertTSIndexSignature = assertTSIndexSignature;
exports.assertTSAnyKeyword = assertTSAnyKeyword;
exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
exports.assertTSBigIntKeyword = assertTSBigIntKeyword;
exports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
exports.assertTSNeverKeyword = assertTSNeverKeyword;
exports.assertTSNullKeyword = assertTSNullKeyword;
exports.assertTSNumberKeyword = assertTSNumberKeyword;
exports.assertTSObjectKeyword = assertTSObjectKeyword;
exports.assertTSStringKeyword = assertTSStringKeyword;
exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
exports.assertTSVoidKeyword = assertTSVoidKeyword;
exports.assertTSThisType = assertTSThisType;
exports.assertTSFunctionType = assertTSFunctionType;
exports.assertTSConstructorType = assertTSConstructorType;
exports.assertTSTypeReference = assertTSTypeReference;
exports.assertTSTypePredicate = assertTSTypePredicate;
exports.assertTSTypeQuery = assertTSTypeQuery;
exports.assertTSTypeLiteral = assertTSTypeLiteral;
exports.assertTSArrayType = assertTSArrayType;
exports.assertTSTupleType = assertTSTupleType;
exports.assertTSOptionalType = assertTSOptionalType;
exports.assertTSRestType = assertTSRestType;
exports.assertTSNamedTupleMember = assertTSNamedTupleMember;
exports.assertTSUnionType = assertTSUnionType;
exports.assertTSIntersectionType = assertTSIntersectionType;
exports.assertTSConditionalType = assertTSConditionalType;
exports.assertTSInferType = assertTSInferType;
exports.assertTSParenthesizedType = assertTSParenthesizedType;
exports.assertTSTypeOperator = assertTSTypeOperator;
exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
exports.assertTSMappedType = assertTSMappedType;
exports.assertTSLiteralType = assertTSLiteralType;
exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
exports.assertTSInterfaceBody = assertTSInterfaceBody;
exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
exports.assertTSAsExpression = assertTSAsExpression;
exports.assertTSTypeAssertion = assertTSTypeAssertion;
exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
exports.assertTSEnumMember = assertTSEnumMember;
exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
exports.assertTSModuleBlock = assertTSModuleBlock;
exports.assertTSImportType = assertTSImportType;
exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
exports.assertTSNonNullExpression = assertTSNonNullExpression;
exports.assertTSExportAssignment = assertTSExportAssignment;
exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
exports.assertTSTypeParameter = assertTSTypeParameter;
exports.assertExpression = assertExpression;
exports.assertBinary = assertBinary;
exports.assertScopable = assertScopable;
exports.assertBlockParent = assertBlockParent;
exports.assertBlock = assertBlock;
exports.assertStatement = assertStatement;
exports.assertTerminatorless = assertTerminatorless;
exports.assertCompletionStatement = assertCompletionStatement;
exports.assertConditional = assertConditional;
exports.assertLoop = assertLoop;
exports.assertWhile = assertWhile;
exports.assertExpressionWrapper = assertExpressionWrapper;
exports.assertFor = assertFor;
exports.assertForXStatement = assertForXStatement;
exports.assertFunction = assertFunction;
exports.assertFunctionParent = assertFunctionParent;
exports.assertPureish = assertPureish;
exports.assertDeclaration = assertDeclaration;
exports.assertPatternLike = assertPatternLike;
exports.assertLVal = assertLVal;
exports.assertTSEntityName = assertTSEntityName;
exports.assertLiteral = assertLiteral;
exports.assertImmutable = assertImmutable;
exports.assertUserWhitespacable = assertUserWhitespacable;
exports.assertMethod = assertMethod;
exports.assertObjectMember = assertObjectMember;
exports.assertProperty = assertProperty;
exports.assertUnaryLike = assertUnaryLike;
exports.assertPattern = assertPattern;
exports.assertClass = assertClass;
exports.assertModuleDeclaration = assertModuleDeclaration;
exports.assertExportDeclaration = assertExportDeclaration;
exports.assertModuleSpecifier = assertModuleSpecifier;
exports.assertPrivate = assertPrivate;
exports.assertFlow = assertFlow;
exports.assertFlowType = assertFlowType;
exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
exports.assertFlowDeclaration = assertFlowDeclaration;
exports.assertFlowPredicate = assertFlowPredicate;
exports.assertEnumBody = assertEnumBody;
exports.assertEnumMember = assertEnumMember;
exports.assertJSX = assertJSX;
exports.assertTSTypeElement = assertTSTypeElement;
exports.assertTSType = assertTSType;
exports.assertTSBaseType = assertTSBaseType;
exports.assertNumberLiteral = assertNumberLiteral;
exports.assertRegexLiteral = assertRegexLiteral;
exports.assertRestProperty = assertRestProperty;
exports.assertSpreadProperty = assertSpreadProperty;

var _is = __webpack_require__(/*! ../../validators/is */ "./node_modules/@babel/types/lib/validators/is.js");

function assert(type, node, opts) {
  if (!(0, _is.default)(type, node, opts)) {
    throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, ` + `but instead got "${node.type}".`);
  }
}

function assertArrayExpression(node, opts) {
  assert("ArrayExpression", node, opts);
}

function assertAssignmentExpression(node, opts) {
  assert("AssignmentExpression", node, opts);
}

function assertBinaryExpression(node, opts) {
  assert("BinaryExpression", node, opts);
}

function assertInterpreterDirective(node, opts) {
  assert("InterpreterDirective", node, opts);
}

function assertDirective(node, opts) {
  assert("Directive", node, opts);
}

function assertDirectiveLiteral(node, opts) {
  assert("DirectiveLiteral", node, opts);
}

function assertBlockStatement(node, opts) {
  assert("BlockStatement", node, opts);
}

function assertBreakStatement(node, opts) {
  assert("BreakStatement", node, opts);
}

function assertCallExpression(node, opts) {
  assert("CallExpression", node, opts);
}

function assertCatchClause(node, opts) {
  assert("CatchClause", node, opts);
}

function assertConditionalExpression(node, opts) {
  assert("ConditionalExpression", node, opts);
}

function assertContinueStatement(node, opts) {
  assert("ContinueStatement", node, opts);
}

function assertDebuggerStatement(node, opts) {
  assert("DebuggerStatement", node, opts);
}

function assertDoWhileStatement(node, opts) {
  assert("DoWhileStatement", node, opts);
}

function assertEmptyStatement(node, opts) {
  assert("EmptyStatement", node, opts);
}

function assertExpressionStatement(node, opts) {
  assert("ExpressionStatement", node, opts);
}

function assertFile(node, opts) {
  assert("File", node, opts);
}

function assertForInStatement(node, opts) {
  assert("ForInStatement", node, opts);
}

function assertForStatement(node, opts) {
  assert("ForStatement", node, opts);
}

function assertFunctionDeclaration(node, opts) {
  assert("FunctionDeclaration", node, opts);
}

function assertFunctionExpression(node, opts) {
  assert("FunctionExpression", node, opts);
}

function assertIdentifier(node, opts) {
  assert("Identifier", node, opts);
}

function assertIfStatement(node, opts) {
  assert("IfStatement", node, opts);
}

function assertLabeledStatement(node, opts) {
  assert("LabeledStatement", node, opts);
}

function assertStringLiteral(node, opts) {
  assert("StringLiteral", node, opts);
}

function assertNumericLiteral(node, opts) {
  assert("NumericLiteral", node, opts);
}

function assertNullLiteral(node, opts) {
  assert("NullLiteral", node, opts);
}

function assertBooleanLiteral(node, opts) {
  assert("BooleanLiteral", node, opts);
}

function assertRegExpLiteral(node, opts) {
  assert("RegExpLiteral", node, opts);
}

function assertLogicalExpression(node, opts) {
  assert("LogicalExpression", node, opts);
}

function assertMemberExpression(node, opts) {
  assert("MemberExpression", node, opts);
}

function assertNewExpression(node, opts) {
  assert("NewExpression", node, opts);
}

function assertProgram(node, opts) {
  assert("Program", node, opts);
}

function assertObjectExpression(node, opts) {
  assert("ObjectExpression", node, opts);
}

function assertObjectMethod(node, opts) {
  assert("ObjectMethod", node, opts);
}

function assertObjectProperty(node, opts) {
  assert("ObjectProperty", node, opts);
}

function assertRestElement(node, opts) {
  assert("RestElement", node, opts);
}

function assertReturnStatement(node, opts) {
  assert("ReturnStatement", node, opts);
}

function assertSequenceExpression(node, opts) {
  assert("SequenceExpression", node, opts);
}

function assertParenthesizedExpression(node, opts) {
  assert("ParenthesizedExpression", node, opts);
}

function assertSwitchCase(node, opts) {
  assert("SwitchCase", node, opts);
}

function assertSwitchStatement(node, opts) {
  assert("SwitchStatement", node, opts);
}

function assertThisExpression(node, opts) {
  assert("ThisExpression", node, opts);
}

function assertThrowStatement(node, opts) {
  assert("ThrowStatement", node, opts);
}

function assertTryStatement(node, opts) {
  assert("TryStatement", node, opts);
}

function assertUnaryExpression(node, opts) {
  assert("UnaryExpression", node, opts);
}

function assertUpdateExpression(node, opts) {
  assert("UpdateExpression", node, opts);
}

function assertVariableDeclaration(node, opts) {
  assert("VariableDeclaration", node, opts);
}

function assertVariableDeclarator(node, opts) {
  assert("VariableDeclarator", node, opts);
}

function assertWhileStatement(node, opts) {
  assert("WhileStatement", node, opts);
}

function assertWithStatement(node, opts) {
  assert("WithStatement", node, opts);
}

function assertAssignmentPattern(node, opts) {
  assert("AssignmentPattern", node, opts);
}

function assertArrayPattern(node, opts) {
  assert("ArrayPattern", node, opts);
}

function assertArrowFunctionExpression(node, opts) {
  assert("ArrowFunctionExpression", node, opts);
}

function assertClassBody(node, opts) {
  assert("ClassBody", node, opts);
}

function assertClassExpression(node, opts) {
  assert("ClassExpression", node, opts);
}

function assertClassDeclaration(node, opts) {
  assert("ClassDeclaration", node, opts);
}

function assertExportAllDeclaration(node, opts) {
  assert("ExportAllDeclaration", node, opts);
}

function assertExportDefaultDeclaration(node, opts) {
  assert("ExportDefaultDeclaration", node, opts);
}

function assertExportNamedDeclaration(node, opts) {
  assert("ExportNamedDeclaration", node, opts);
}

function assertExportSpecifier(node, opts) {
  assert("ExportSpecifier", node, opts);
}

function assertForOfStatement(node, opts) {
  assert("ForOfStatement", node, opts);
}

function assertImportDeclaration(node, opts) {
  assert("ImportDeclaration", node, opts);
}

function assertImportDefaultSpecifier(node, opts) {
  assert("ImportDefaultSpecifier", node, opts);
}

function assertImportNamespaceSpecifier(node, opts) {
  assert("ImportNamespaceSpecifier", node, opts);
}

function assertImportSpecifier(node, opts) {
  assert("ImportSpecifier", node, opts);
}

function assertMetaProperty(node, opts) {
  assert("MetaProperty", node, opts);
}

function assertClassMethod(node, opts) {
  assert("ClassMethod", node, opts);
}

function assertObjectPattern(node, opts) {
  assert("ObjectPattern", node, opts);
}

function assertSpreadElement(node, opts) {
  assert("SpreadElement", node, opts);
}

function assertSuper(node, opts) {
  assert("Super", node, opts);
}

function assertTaggedTemplateExpression(node, opts) {
  assert("TaggedTemplateExpression", node, opts);
}

function assertTemplateElement(node, opts) {
  assert("TemplateElement", node, opts);
}

function assertTemplateLiteral(node, opts) {
  assert("TemplateLiteral", node, opts);
}

function assertYieldExpression(node, opts) {
  assert("YieldExpression", node, opts);
}

function assertAwaitExpression(node, opts) {
  assert("AwaitExpression", node, opts);
}

function assertImport(node, opts) {
  assert("Import", node, opts);
}

function assertBigIntLiteral(node, opts) {
  assert("BigIntLiteral", node, opts);
}

function assertExportNamespaceSpecifier(node, opts) {
  assert("ExportNamespaceSpecifier", node, opts);
}

function assertOptionalMemberExpression(node, opts) {
  assert("OptionalMemberExpression", node, opts);
}

function assertOptionalCallExpression(node, opts) {
  assert("OptionalCallExpression", node, opts);
}

function assertClassProperty(node, opts) {
  assert("ClassProperty", node, opts);
}

function assertClassPrivateProperty(node, opts) {
  assert("ClassPrivateProperty", node, opts);
}

function assertClassPrivateMethod(node, opts) {
  assert("ClassPrivateMethod", node, opts);
}

function assertPrivateName(node, opts) {
  assert("PrivateName", node, opts);
}

function assertAnyTypeAnnotation(node, opts) {
  assert("AnyTypeAnnotation", node, opts);
}

function assertArrayTypeAnnotation(node, opts) {
  assert("ArrayTypeAnnotation", node, opts);
}

function assertBooleanTypeAnnotation(node, opts) {
  assert("BooleanTypeAnnotation", node, opts);
}

function assertBooleanLiteralTypeAnnotation(node, opts) {
  assert("BooleanLiteralTypeAnnotation", node, opts);
}

function assertNullLiteralTypeAnnotation(node, opts) {
  assert("NullLiteralTypeAnnotation", node, opts);
}

function assertClassImplements(node, opts) {
  assert("ClassImplements", node, opts);
}

function assertDeclareClass(node, opts) {
  assert("DeclareClass", node, opts);
}

function assertDeclareFunction(node, opts) {
  assert("DeclareFunction", node, opts);
}

function assertDeclareInterface(node, opts) {
  assert("DeclareInterface", node, opts);
}

function assertDeclareModule(node, opts) {
  assert("DeclareModule", node, opts);
}

function assertDeclareModuleExports(node, opts) {
  assert("DeclareModuleExports", node, opts);
}

function assertDeclareTypeAlias(node, opts) {
  assert("DeclareTypeAlias", node, opts);
}

function assertDeclareOpaqueType(node, opts) {
  assert("DeclareOpaqueType", node, opts);
}

function assertDeclareVariable(node, opts) {
  assert("DeclareVariable", node, opts);
}

function assertDeclareExportDeclaration(node, opts) {
  assert("DeclareExportDeclaration", node, opts);
}

function assertDeclareExportAllDeclaration(node, opts) {
  assert("DeclareExportAllDeclaration", node, opts);
}

function assertDeclaredPredicate(node, opts) {
  assert("DeclaredPredicate", node, opts);
}

function assertExistsTypeAnnotation(node, opts) {
  assert("ExistsTypeAnnotation", node, opts);
}

function assertFunctionTypeAnnotation(node, opts) {
  assert("FunctionTypeAnnotation", node, opts);
}

function assertFunctionTypeParam(node, opts) {
  assert("FunctionTypeParam", node, opts);
}

function assertGenericTypeAnnotation(node, opts) {
  assert("GenericTypeAnnotation", node, opts);
}

function assertInferredPredicate(node, opts) {
  assert("InferredPredicate", node, opts);
}

function assertInterfaceExtends(node, opts) {
  assert("InterfaceExtends", node, opts);
}

function assertInterfaceDeclaration(node, opts) {
  assert("InterfaceDeclaration", node, opts);
}

function assertInterfaceTypeAnnotation(node, opts) {
  assert("InterfaceTypeAnnotation", node, opts);
}

function assertIntersectionTypeAnnotation(node, opts) {
  assert("IntersectionTypeAnnotation", node, opts);
}

function assertMixedTypeAnnotation(node, opts) {
  assert("MixedTypeAnnotation", node, opts);
}

function assertEmptyTypeAnnotation(node, opts) {
  assert("EmptyTypeAnnotation", node, opts);
}

function assertNullableTypeAnnotation(node, opts) {
  assert("NullableTypeAnnotation", node, opts);
}

function assertNumberLiteralTypeAnnotation(node, opts) {
  assert("NumberLiteralTypeAnnotation", node, opts);
}

function assertNumberTypeAnnotation(node, opts) {
  assert("NumberTypeAnnotation", node, opts);
}

function assertObjectTypeAnnotation(node, opts) {
  assert("ObjectTypeAnnotation", node, opts);
}

function assertObjectTypeInternalSlot(node, opts) {
  assert("ObjectTypeInternalSlot", node, opts);
}

function assertObjectTypeCallProperty(node, opts) {
  assert("ObjectTypeCallProperty", node, opts);
}

function assertObjectTypeIndexer(node, opts) {
  assert("ObjectTypeIndexer", node, opts);
}

function assertObjectTypeProperty(node, opts) {
  assert("ObjectTypeProperty", node, opts);
}

function assertObjectTypeSpreadProperty(node, opts) {
  assert("ObjectTypeSpreadProperty", node, opts);
}

function assertOpaqueType(node, opts) {
  assert("OpaqueType", node, opts);
}

function assertQualifiedTypeIdentifier(node, opts) {
  assert("QualifiedTypeIdentifier", node, opts);
}

function assertStringLiteralTypeAnnotation(node, opts) {
  assert("StringLiteralTypeAnnotation", node, opts);
}

function assertStringTypeAnnotation(node, opts) {
  assert("StringTypeAnnotation", node, opts);
}

function assertSymbolTypeAnnotation(node, opts) {
  assert("SymbolTypeAnnotation", node, opts);
}

function assertThisTypeAnnotation(node, opts) {
  assert("ThisTypeAnnotation", node, opts);
}

function assertTupleTypeAnnotation(node, opts) {
  assert("TupleTypeAnnotation", node, opts);
}

function assertTypeofTypeAnnotation(node, opts) {
  assert("TypeofTypeAnnotation", node, opts);
}

function assertTypeAlias(node, opts) {
  assert("TypeAlias", node, opts);
}

function assertTypeAnnotation(node, opts) {
  assert("TypeAnnotation", node, opts);
}

function assertTypeCastExpression(node, opts) {
  assert("TypeCastExpression", node, opts);
}

function assertTypeParameter(node, opts) {
  assert("TypeParameter", node, opts);
}

function assertTypeParameterDeclaration(node, opts) {
  assert("TypeParameterDeclaration", node, opts);
}

function assertTypeParameterInstantiation(node, opts) {
  assert("TypeParameterInstantiation", node, opts);
}

function assertUnionTypeAnnotation(node, opts) {
  assert("UnionTypeAnnotation", node, opts);
}

function assertVariance(node, opts) {
  assert("Variance", node, opts);
}

function assertVoidTypeAnnotation(node, opts) {
  assert("VoidTypeAnnotation", node, opts);
}

function assertEnumDeclaration(node, opts) {
  assert("EnumDeclaration", node, opts);
}

function assertEnumBooleanBody(node, opts) {
  assert("EnumBooleanBody", node, opts);
}

function assertEnumNumberBody(node, opts) {
  assert("EnumNumberBody", node, opts);
}

function assertEnumStringBody(node, opts) {
  assert("EnumStringBody", node, opts);
}

function assertEnumSymbolBody(node, opts) {
  assert("EnumSymbolBody", node, opts);
}

function assertEnumBooleanMember(node, opts) {
  assert("EnumBooleanMember", node, opts);
}

function assertEnumNumberMember(node, opts) {
  assert("EnumNumberMember", node, opts);
}

function assertEnumStringMember(node, opts) {
  assert("EnumStringMember", node, opts);
}

function assertEnumDefaultedMember(node, opts) {
  assert("EnumDefaultedMember", node, opts);
}

function assertIndexedAccessType(node, opts) {
  assert("IndexedAccessType", node, opts);
}

function assertOptionalIndexedAccessType(node, opts) {
  assert("OptionalIndexedAccessType", node, opts);
}

function assertJSXAttribute(node, opts) {
  assert("JSXAttribute", node, opts);
}

function assertJSXClosingElement(node, opts) {
  assert("JSXClosingElement", node, opts);
}

function assertJSXElement(node, opts) {
  assert("JSXElement", node, opts);
}

function assertJSXEmptyExpression(node, opts) {
  assert("JSXEmptyExpression", node, opts);
}

function assertJSXExpressionContainer(node, opts) {
  assert("JSXExpressionContainer", node, opts);
}

function assertJSXSpreadChild(node, opts) {
  assert("JSXSpreadChild", node, opts);
}

function assertJSXIdentifier(node, opts) {
  assert("JSXIdentifier", node, opts);
}

function assertJSXMemberExpression(node, opts) {
  assert("JSXMemberExpression", node, opts);
}

function assertJSXNamespacedName(node, opts) {
  assert("JSXNamespacedName", node, opts);
}

function assertJSXOpeningElement(node, opts) {
  assert("JSXOpeningElement", node, opts);
}

function assertJSXSpreadAttribute(node, opts) {
  assert("JSXSpreadAttribute", node, opts);
}

function assertJSXText(node, opts) {
  assert("JSXText", node, opts);
}

function assertJSXFragment(node, opts) {
  assert("JSXFragment", node, opts);
}

function assertJSXOpeningFragment(node, opts) {
  assert("JSXOpeningFragment", node, opts);
}

function assertJSXClosingFragment(node, opts) {
  assert("JSXClosingFragment", node, opts);
}

function assertNoop(node, opts) {
  assert("Noop", node, opts);
}

function assertPlaceholder(node, opts) {
  assert("Placeholder", node, opts);
}

function assertV8IntrinsicIdentifier(node, opts) {
  assert("V8IntrinsicIdentifier", node, opts);
}

function assertArgumentPlaceholder(node, opts) {
  assert("ArgumentPlaceholder", node, opts);
}

function assertBindExpression(node, opts) {
  assert("BindExpression", node, opts);
}

function assertImportAttribute(node, opts) {
  assert("ImportAttribute", node, opts);
}

function assertDecorator(node, opts) {
  assert("Decorator", node, opts);
}

function assertDoExpression(node, opts) {
  assert("DoExpression", node, opts);
}

function assertExportDefaultSpecifier(node, opts) {
  assert("ExportDefaultSpecifier", node, opts);
}

function assertRecordExpression(node, opts) {
  assert("RecordExpression", node, opts);
}

function assertTupleExpression(node, opts) {
  assert("TupleExpression", node, opts);
}

function assertDecimalLiteral(node, opts) {
  assert("DecimalLiteral", node, opts);
}

function assertStaticBlock(node, opts) {
  assert("StaticBlock", node, opts);
}

function assertModuleExpression(node, opts) {
  assert("ModuleExpression", node, opts);
}

function assertTopicReference(node, opts) {
  assert("TopicReference", node, opts);
}

function assertPipelineTopicExpression(node, opts) {
  assert("PipelineTopicExpression", node, opts);
}

function assertPipelineBareFunction(node, opts) {
  assert("PipelineBareFunction", node, opts);
}

function assertPipelinePrimaryTopicReference(node, opts) {
  assert("PipelinePrimaryTopicReference", node, opts);
}

function assertTSParameterProperty(node, opts) {
  assert("TSParameterProperty", node, opts);
}

function assertTSDeclareFunction(node, opts) {
  assert("TSDeclareFunction", node, opts);
}

function assertTSDeclareMethod(node, opts) {
  assert("TSDeclareMethod", node, opts);
}

function assertTSQualifiedName(node, opts) {
  assert("TSQualifiedName", node, opts);
}

function assertTSCallSignatureDeclaration(node, opts) {
  assert("TSCallSignatureDeclaration", node, opts);
}

function assertTSConstructSignatureDeclaration(node, opts) {
  assert("TSConstructSignatureDeclaration", node, opts);
}

function assertTSPropertySignature(node, opts) {
  assert("TSPropertySignature", node, opts);
}

function assertTSMethodSignature(node, opts) {
  assert("TSMethodSignature", node, opts);
}

function assertTSIndexSignature(node, opts) {
  assert("TSIndexSignature", node, opts);
}

function assertTSAnyKeyword(node, opts) {
  assert("TSAnyKeyword", node, opts);
}

function assertTSBooleanKeyword(node, opts) {
  assert("TSBooleanKeyword", node, opts);
}

function assertTSBigIntKeyword(node, opts) {
  assert("TSBigIntKeyword", node, opts);
}

function assertTSIntrinsicKeyword(node, opts) {
  assert("TSIntrinsicKeyword", node, opts);
}

function assertTSNeverKeyword(node, opts) {
  assert("TSNeverKeyword", node, opts);
}

function assertTSNullKeyword(node, opts) {
  assert("TSNullKeyword", node, opts);
}

function assertTSNumberKeyword(node, opts) {
  assert("TSNumberKeyword", node, opts);
}

function assertTSObjectKeyword(node, opts) {
  assert("TSObjectKeyword", node, opts);
}

function assertTSStringKeyword(node, opts) {
  assert("TSStringKeyword", node, opts);
}

function assertTSSymbolKeyword(node, opts) {
  assert("TSSymbolKeyword", node, opts);
}

function assertTSUndefinedKeyword(node, opts) {
  assert("TSUndefinedKeyword", node, opts);
}

function assertTSUnknownKeyword(node, opts) {
  assert("TSUnknownKeyword", node, opts);
}

function assertTSVoidKeyword(node, opts) {
  assert("TSVoidKeyword", node, opts);
}

function assertTSThisType(node, opts) {
  assert("TSThisType", node, opts);
}

function assertTSFunctionType(node, opts) {
  assert("TSFunctionType", node, opts);
}

function assertTSConstructorType(node, opts) {
  assert("TSConstructorType", node, opts);
}

function assertTSTypeReference(node, opts) {
  assert("TSTypeReference", node, opts);
}

function assertTSTypePredicate(node, opts) {
  assert("TSTypePredicate", node, opts);
}

function assertTSTypeQuery(node, opts) {
  assert("TSTypeQuery", node, opts);
}

function assertTSTypeLiteral(node, opts) {
  assert("TSTypeLiteral", node, opts);
}

function assertTSArrayType(node, opts) {
  assert("TSArrayType", node, opts);
}

function assertTSTupleType(node, opts) {
  assert("TSTupleType", node, opts);
}

function assertTSOptionalType(node, opts) {
  assert("TSOptionalType", node, opts);
}

function assertTSRestType(node, opts) {
  assert("TSRestType", node, opts);
}

function assertTSNamedTupleMember(node, opts) {
  assert("TSNamedTupleMember", node, opts);
}

function assertTSUnionType(node, opts) {
  assert("TSUnionType", node, opts);
}

function assertTSIntersectionType(node, opts) {
  assert("TSIntersectionType", node, opts);
}

function assertTSConditionalType(node, opts) {
  assert("TSConditionalType", node, opts);
}

function assertTSInferType(node, opts) {
  assert("TSInferType", node, opts);
}

function assertTSParenthesizedType(node, opts) {
  assert("TSParenthesizedType", node, opts);
}

function assertTSTypeOperator(node, opts) {
  assert("TSTypeOperator", node, opts);
}

function assertTSIndexedAccessType(node, opts) {
  assert("TSIndexedAccessType", node, opts);
}

function assertTSMappedType(node, opts) {
  assert("TSMappedType", node, opts);
}

function assertTSLiteralType(node, opts) {
  assert("TSLiteralType", node, opts);
}

function assertTSExpressionWithTypeArguments(node, opts) {
  assert("TSExpressionWithTypeArguments", node, opts);
}

function assertTSInterfaceDeclaration(node, opts) {
  assert("TSInterfaceDeclaration", node, opts);
}

function assertTSInterfaceBody(node, opts) {
  assert("TSInterfaceBody", node, opts);
}

function assertTSTypeAliasDeclaration(node, opts) {
  assert("TSTypeAliasDeclaration", node, opts);
}

function assertTSAsExpression(node, opts) {
  assert("TSAsExpression", node, opts);
}

function assertTSTypeAssertion(node, opts) {
  assert("TSTypeAssertion", node, opts);
}

function assertTSEnumDeclaration(node, opts) {
  assert("TSEnumDeclaration", node, opts);
}

function assertTSEnumMember(node, opts) {
  assert("TSEnumMember", node, opts);
}

function assertTSModuleDeclaration(node, opts) {
  assert("TSModuleDeclaration", node, opts);
}

function assertTSModuleBlock(node, opts) {
  assert("TSModuleBlock", node, opts);
}

function assertTSImportType(node, opts) {
  assert("TSImportType", node, opts);
}

function assertTSImportEqualsDeclaration(node, opts) {
  assert("TSImportEqualsDeclaration", node, opts);
}

function assertTSExternalModuleReference(node, opts) {
  assert("TSExternalModuleReference", node, opts);
}

function assertTSNonNullExpression(node, opts) {
  assert("TSNonNullExpression", node, opts);
}

function assertTSExportAssignment(node, opts) {
  assert("TSExportAssignment", node, opts);
}

function assertTSNamespaceExportDeclaration(node, opts) {
  assert("TSNamespaceExportDeclaration", node, opts);
}

function assertTSTypeAnnotation(node, opts) {
  assert("TSTypeAnnotation", node, opts);
}

function assertTSTypeParameterInstantiation(node, opts) {
  assert("TSTypeParameterInstantiation", node, opts);
}

function assertTSTypeParameterDeclaration(node, opts) {
  assert("TSTypeParameterDeclaration", node, opts);
}

function assertTSTypeParameter(node, opts) {
  assert("TSTypeParameter", node, opts);
}

function assertExpression(node, opts) {
  assert("Expression", node, opts);
}

function assertBinary(node, opts) {
  assert("Binary", node, opts);
}

function assertScopable(node, opts) {
  assert("Scopable", node, opts);
}

function assertBlockParent(node, opts) {
  assert("BlockParent", node, opts);
}

function assertBlock(node, opts) {
  assert("Block", node, opts);
}

function assertStatement(node, opts) {
  assert("Statement", node, opts);
}

function assertTerminatorless(node, opts) {
  assert("Terminatorless", node, opts);
}

function assertCompletionStatement(node, opts) {
  assert("CompletionStatement", node, opts);
}

function assertConditional(node, opts) {
  assert("Conditional", node, opts);
}

function assertLoop(node, opts) {
  assert("Loop", node, opts);
}

function assertWhile(node, opts) {
  assert("While", node, opts);
}

function assertExpressionWrapper(node, opts) {
  assert("ExpressionWrapper", node, opts);
}

function assertFor(node, opts) {
  assert("For", node, opts);
}

function assertForXStatement(node, opts) {
  assert("ForXStatement", node, opts);
}

function assertFunction(node, opts) {
  assert("Function", node, opts);
}

function assertFunctionParent(node, opts) {
  assert("FunctionParent", node, opts);
}

function assertPureish(node, opts) {
  assert("Pureish", node, opts);
}

function assertDeclaration(node, opts) {
  assert("Declaration", node, opts);
}

function assertPatternLike(node, opts) {
  assert("PatternLike", node, opts);
}

function assertLVal(node, opts) {
  assert("LVal", node, opts);
}

function assertTSEntityName(node, opts) {
  assert("TSEntityName", node, opts);
}

function assertLiteral(node, opts) {
  assert("Literal", node, opts);
}

function assertImmutable(node, opts) {
  assert("Immutable", node, opts);
}

function assertUserWhitespacable(node, opts) {
  assert("UserWhitespacable", node, opts);
}

function assertMethod(node, opts) {
  assert("Method", node, opts);
}

function assertObjectMember(node, opts) {
  assert("ObjectMember", node, opts);
}

function assertProperty(node, opts) {
  assert("Property", node, opts);
}

function assertUnaryLike(node, opts) {
  assert("UnaryLike", node, opts);
}

function assertPattern(node, opts) {
  assert("Pattern", node, opts);
}

function assertClass(node, opts) {
  assert("Class", node, opts);
}

function assertModuleDeclaration(node, opts) {
  assert("ModuleDeclaration", node, opts);
}

function assertExportDeclaration(node, opts) {
  assert("ExportDeclaration", node, opts);
}

function assertModuleSpecifier(node, opts) {
  assert("ModuleSpecifier", node, opts);
}

function assertPrivate(node, opts) {
  assert("Private", node, opts);
}

function assertFlow(node, opts) {
  assert("Flow", node, opts);
}

function assertFlowType(node, opts) {
  assert("FlowType", node, opts);
}

function assertFlowBaseAnnotation(node, opts) {
  assert("FlowBaseAnnotation", node, opts);
}

function assertFlowDeclaration(node, opts) {
  assert("FlowDeclaration", node, opts);
}

function assertFlowPredicate(node, opts) {
  assert("FlowPredicate", node, opts);
}

function assertEnumBody(node, opts) {
  assert("EnumBody", node, opts);
}

function assertEnumMember(node, opts) {
  assert("EnumMember", node, opts);
}

function assertJSX(node, opts) {
  assert("JSX", node, opts);
}

function assertTSTypeElement(node, opts) {
  assert("TSTypeElement", node, opts);
}

function assertTSType(node, opts) {
  assert("TSType", node, opts);
}

function assertTSBaseType(node, opts) {
  assert("TSBaseType", node, opts);
}

function assertNumberLiteral(node, opts) {
  console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
  assert("NumberLiteral", node, opts);
}

function assertRegexLiteral(node, opts) {
  console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
  assert("RegexLiteral", node, opts);
}

function assertRestProperty(node, opts) {
  console.trace("The node type RestProperty has been renamed to RestElement");
  assert("RestProperty", node, opts);
}

function assertSpreadProperty(node, opts) {
  console.trace("The node type SpreadProperty has been renamed to SpreadElement");
  assert("SpreadProperty", node, opts);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/ast-types/generated/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/ast-types/generated/index.js ***!
  \********************************************************************/
/***/ (() => {



/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/builder.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/builder.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = builder;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

var _validate = __webpack_require__(/*! ../validators/validate */ "./node_modules/@babel/types/lib/validators/validate.js");

function builder(type, ...args) {
  const keys = _definitions.BUILDER_KEYS[type];
  const countArgs = args.length;

  if (countArgs > keys.length) {
    throw new Error(`${type}: Too many arguments passed. Received ${countArgs} but can receive no more than ${keys.length}`);
  }

  const node = {
    type
  };
  let i = 0;
  keys.forEach(key => {
    const field = _definitions.NODE_FIELDS[type][key];
    let arg;
    if (i < countArgs) arg = args[i];

    if (arg === undefined) {
      arg = Array.isArray(field.default) ? [] : field.default;
    }

    node[key] = arg;
    i++;
  });

  for (const key of Object.keys(node)) {
    (0, _validate.default)(node, key, node[key]);
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = createFlowUnionType;

var _generated = __webpack_require__(/*! ../generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

var _removeTypeDuplicates = __webpack_require__(/*! ../../modifications/flow/removeTypeDuplicates */ "./node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");

function createFlowUnionType(types) {
  const flattened = (0, _removeTypeDuplicates.default)(types);

  if (flattened.length === 1) {
    return flattened[0];
  } else {
    return (0, _generated.unionTypeAnnotation)(flattened);
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = createTypeAnnotationBasedOnTypeof;

var _generated = __webpack_require__(/*! ../generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

function createTypeAnnotationBasedOnTypeof(type) {
  if (type === "string") {
    return (0, _generated.stringTypeAnnotation)();
  } else if (type === "number") {
    return (0, _generated.numberTypeAnnotation)();
  } else if (type === "undefined") {
    return (0, _generated.voidTypeAnnotation)();
  } else if (type === "boolean") {
    return (0, _generated.booleanTypeAnnotation)();
  } else if (type === "function") {
    return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Function"));
  } else if (type === "object") {
    return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Object"));
  } else if (type === "symbol") {
    return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Symbol"));
  } else if (type === "bigint") {
    return (0, _generated.anyTypeAnnotation)();
  } else {
    throw new Error("Invalid typeof value: " + type);
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/generated/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/generated/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.arrayExpression = arrayExpression;
exports.assignmentExpression = assignmentExpression;
exports.binaryExpression = binaryExpression;
exports.interpreterDirective = interpreterDirective;
exports.directive = directive;
exports.directiveLiteral = directiveLiteral;
exports.blockStatement = blockStatement;
exports.breakStatement = breakStatement;
exports.callExpression = callExpression;
exports.catchClause = catchClause;
exports.conditionalExpression = conditionalExpression;
exports.continueStatement = continueStatement;
exports.debuggerStatement = debuggerStatement;
exports.doWhileStatement = doWhileStatement;
exports.emptyStatement = emptyStatement;
exports.expressionStatement = expressionStatement;
exports.file = file;
exports.forInStatement = forInStatement;
exports.forStatement = forStatement;
exports.functionDeclaration = functionDeclaration;
exports.functionExpression = functionExpression;
exports.identifier = identifier;
exports.ifStatement = ifStatement;
exports.labeledStatement = labeledStatement;
exports.stringLiteral = stringLiteral;
exports.numericLiteral = numericLiteral;
exports.nullLiteral = nullLiteral;
exports.booleanLiteral = booleanLiteral;
exports.regExpLiteral = regExpLiteral;
exports.logicalExpression = logicalExpression;
exports.memberExpression = memberExpression;
exports.newExpression = newExpression;
exports.program = program;
exports.objectExpression = objectExpression;
exports.objectMethod = objectMethod;
exports.objectProperty = objectProperty;
exports.restElement = restElement;
exports.returnStatement = returnStatement;
exports.sequenceExpression = sequenceExpression;
exports.parenthesizedExpression = parenthesizedExpression;
exports.switchCase = switchCase;
exports.switchStatement = switchStatement;
exports.thisExpression = thisExpression;
exports.throwStatement = throwStatement;
exports.tryStatement = tryStatement;
exports.unaryExpression = unaryExpression;
exports.updateExpression = updateExpression;
exports.variableDeclaration = variableDeclaration;
exports.variableDeclarator = variableDeclarator;
exports.whileStatement = whileStatement;
exports.withStatement = withStatement;
exports.assignmentPattern = assignmentPattern;
exports.arrayPattern = arrayPattern;
exports.arrowFunctionExpression = arrowFunctionExpression;
exports.classBody = classBody;
exports.classExpression = classExpression;
exports.classDeclaration = classDeclaration;
exports.exportAllDeclaration = exportAllDeclaration;
exports.exportDefaultDeclaration = exportDefaultDeclaration;
exports.exportNamedDeclaration = exportNamedDeclaration;
exports.exportSpecifier = exportSpecifier;
exports.forOfStatement = forOfStatement;
exports.importDeclaration = importDeclaration;
exports.importDefaultSpecifier = importDefaultSpecifier;
exports.importNamespaceSpecifier = importNamespaceSpecifier;
exports.importSpecifier = importSpecifier;
exports.metaProperty = metaProperty;
exports.classMethod = classMethod;
exports.objectPattern = objectPattern;
exports.spreadElement = spreadElement;
exports.super = _super;
exports.taggedTemplateExpression = taggedTemplateExpression;
exports.templateElement = templateElement;
exports.templateLiteral = templateLiteral;
exports.yieldExpression = yieldExpression;
exports.awaitExpression = awaitExpression;
exports.import = _import;
exports.bigIntLiteral = bigIntLiteral;
exports.exportNamespaceSpecifier = exportNamespaceSpecifier;
exports.optionalMemberExpression = optionalMemberExpression;
exports.optionalCallExpression = optionalCallExpression;
exports.classProperty = classProperty;
exports.classPrivateProperty = classPrivateProperty;
exports.classPrivateMethod = classPrivateMethod;
exports.privateName = privateName;
exports.anyTypeAnnotation = anyTypeAnnotation;
exports.arrayTypeAnnotation = arrayTypeAnnotation;
exports.booleanTypeAnnotation = booleanTypeAnnotation;
exports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
exports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
exports.classImplements = classImplements;
exports.declareClass = declareClass;
exports.declareFunction = declareFunction;
exports.declareInterface = declareInterface;
exports.declareModule = declareModule;
exports.declareModuleExports = declareModuleExports;
exports.declareTypeAlias = declareTypeAlias;
exports.declareOpaqueType = declareOpaqueType;
exports.declareVariable = declareVariable;
exports.declareExportDeclaration = declareExportDeclaration;
exports.declareExportAllDeclaration = declareExportAllDeclaration;
exports.declaredPredicate = declaredPredicate;
exports.existsTypeAnnotation = existsTypeAnnotation;
exports.functionTypeAnnotation = functionTypeAnnotation;
exports.functionTypeParam = functionTypeParam;
exports.genericTypeAnnotation = genericTypeAnnotation;
exports.inferredPredicate = inferredPredicate;
exports.interfaceExtends = interfaceExtends;
exports.interfaceDeclaration = interfaceDeclaration;
exports.interfaceTypeAnnotation = interfaceTypeAnnotation;
exports.intersectionTypeAnnotation = intersectionTypeAnnotation;
exports.mixedTypeAnnotation = mixedTypeAnnotation;
exports.emptyTypeAnnotation = emptyTypeAnnotation;
exports.nullableTypeAnnotation = nullableTypeAnnotation;
exports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
exports.numberTypeAnnotation = numberTypeAnnotation;
exports.objectTypeAnnotation = objectTypeAnnotation;
exports.objectTypeInternalSlot = objectTypeInternalSlot;
exports.objectTypeCallProperty = objectTypeCallProperty;
exports.objectTypeIndexer = objectTypeIndexer;
exports.objectTypeProperty = objectTypeProperty;
exports.objectTypeSpreadProperty = objectTypeSpreadProperty;
exports.opaqueType = opaqueType;
exports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
exports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
exports.stringTypeAnnotation = stringTypeAnnotation;
exports.symbolTypeAnnotation = symbolTypeAnnotation;
exports.thisTypeAnnotation = thisTypeAnnotation;
exports.tupleTypeAnnotation = tupleTypeAnnotation;
exports.typeofTypeAnnotation = typeofTypeAnnotation;
exports.typeAlias = typeAlias;
exports.typeAnnotation = typeAnnotation;
exports.typeCastExpression = typeCastExpression;
exports.typeParameter = typeParameter;
exports.typeParameterDeclaration = typeParameterDeclaration;
exports.typeParameterInstantiation = typeParameterInstantiation;
exports.unionTypeAnnotation = unionTypeAnnotation;
exports.variance = variance;
exports.voidTypeAnnotation = voidTypeAnnotation;
exports.enumDeclaration = enumDeclaration;
exports.enumBooleanBody = enumBooleanBody;
exports.enumNumberBody = enumNumberBody;
exports.enumStringBody = enumStringBody;
exports.enumSymbolBody = enumSymbolBody;
exports.enumBooleanMember = enumBooleanMember;
exports.enumNumberMember = enumNumberMember;
exports.enumStringMember = enumStringMember;
exports.enumDefaultedMember = enumDefaultedMember;
exports.indexedAccessType = indexedAccessType;
exports.optionalIndexedAccessType = optionalIndexedAccessType;
exports.jSXAttribute = exports.jsxAttribute = jsxAttribute;
exports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;
exports.jSXElement = exports.jsxElement = jsxElement;
exports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;
exports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer;
exports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;
exports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;
exports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;
exports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;
exports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;
exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;
exports.jSXText = exports.jsxText = jsxText;
exports.jSXFragment = exports.jsxFragment = jsxFragment;
exports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;
exports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;
exports.noop = noop;
exports.placeholder = placeholder;
exports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
exports.argumentPlaceholder = argumentPlaceholder;
exports.bindExpression = bindExpression;
exports.importAttribute = importAttribute;
exports.decorator = decorator;
exports.doExpression = doExpression;
exports.exportDefaultSpecifier = exportDefaultSpecifier;
exports.recordExpression = recordExpression;
exports.tupleExpression = tupleExpression;
exports.decimalLiteral = decimalLiteral;
exports.staticBlock = staticBlock;
exports.moduleExpression = moduleExpression;
exports.topicReference = topicReference;
exports.pipelineTopicExpression = pipelineTopicExpression;
exports.pipelineBareFunction = pipelineBareFunction;
exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
exports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;
exports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;
exports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;
exports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;
exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
exports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;
exports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;
exports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;
exports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;
exports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;
exports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;
exports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;
exports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;
exports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;
exports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;
exports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;
exports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;
exports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;
exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;
exports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;
exports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;
exports.tSThisType = exports.tsThisType = tsThisType;
exports.tSFunctionType = exports.tsFunctionType = tsFunctionType;
exports.tSConstructorType = exports.tsConstructorType = tsConstructorType;
exports.tSTypeReference = exports.tsTypeReference = tsTypeReference;
exports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;
exports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;
exports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;
exports.tSArrayType = exports.tsArrayType = tsArrayType;
exports.tSTupleType = exports.tsTupleType = tsTupleType;
exports.tSOptionalType = exports.tsOptionalType = tsOptionalType;
exports.tSRestType = exports.tsRestType = tsRestType;
exports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;
exports.tSUnionType = exports.tsUnionType = tsUnionType;
exports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;
exports.tSConditionalType = exports.tsConditionalType = tsConditionalType;
exports.tSInferType = exports.tsInferType = tsInferType;
exports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;
exports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;
exports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;
exports.tSMappedType = exports.tsMappedType = tsMappedType;
exports.tSLiteralType = exports.tsLiteralType = tsLiteralType;
exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;
exports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;
exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
exports.tSAsExpression = exports.tsAsExpression = tsAsExpression;
exports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;
exports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;
exports.tSEnumMember = exports.tsEnumMember = tsEnumMember;
exports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;
exports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;
exports.tSImportType = exports.tsImportType = tsImportType;
exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
exports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;
exports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;
exports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;
exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
exports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;
exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
exports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;
exports.numberLiteral = NumberLiteral;
exports.regexLiteral = RegexLiteral;
exports.restProperty = RestProperty;
exports.spreadProperty = SpreadProperty;

var _builder = __webpack_require__(/*! ../builder */ "./node_modules/@babel/types/lib/builders/builder.js");

function arrayExpression(elements) {
  return (0, _builder.default)("ArrayExpression", ...arguments);
}

function assignmentExpression(operator, left, right) {
  return (0, _builder.default)("AssignmentExpression", ...arguments);
}

function binaryExpression(operator, left, right) {
  return (0, _builder.default)("BinaryExpression", ...arguments);
}

function interpreterDirective(value) {
  return (0, _builder.default)("InterpreterDirective", ...arguments);
}

function directive(value) {
  return (0, _builder.default)("Directive", ...arguments);
}

function directiveLiteral(value) {
  return (0, _builder.default)("DirectiveLiteral", ...arguments);
}

function blockStatement(body, directives) {
  return (0, _builder.default)("BlockStatement", ...arguments);
}

function breakStatement(label) {
  return (0, _builder.default)("BreakStatement", ...arguments);
}

function callExpression(callee, _arguments) {
  return (0, _builder.default)("CallExpression", ...arguments);
}

function catchClause(param, body) {
  return (0, _builder.default)("CatchClause", ...arguments);
}

function conditionalExpression(test, consequent, alternate) {
  return (0, _builder.default)("ConditionalExpression", ...arguments);
}

function continueStatement(label) {
  return (0, _builder.default)("ContinueStatement", ...arguments);
}

function debuggerStatement() {
  return (0, _builder.default)("DebuggerStatement", ...arguments);
}

function doWhileStatement(test, body) {
  return (0, _builder.default)("DoWhileStatement", ...arguments);
}

function emptyStatement() {
  return (0, _builder.default)("EmptyStatement", ...arguments);
}

function expressionStatement(expression) {
  return (0, _builder.default)("ExpressionStatement", ...arguments);
}

function file(program, comments, tokens) {
  return (0, _builder.default)("File", ...arguments);
}

function forInStatement(left, right, body) {
  return (0, _builder.default)("ForInStatement", ...arguments);
}

function forStatement(init, test, update, body) {
  return (0, _builder.default)("ForStatement", ...arguments);
}

function functionDeclaration(id, params, body, generator, async) {
  return (0, _builder.default)("FunctionDeclaration", ...arguments);
}

function functionExpression(id, params, body, generator, async) {
  return (0, _builder.default)("FunctionExpression", ...arguments);
}

function identifier(name) {
  return (0, _builder.default)("Identifier", ...arguments);
}

function ifStatement(test, consequent, alternate) {
  return (0, _builder.default)("IfStatement", ...arguments);
}

function labeledStatement(label, body) {
  return (0, _builder.default)("LabeledStatement", ...arguments);
}

function stringLiteral(value) {
  return (0, _builder.default)("StringLiteral", ...arguments);
}

function numericLiteral(value) {
  return (0, _builder.default)("NumericLiteral", ...arguments);
}

function nullLiteral() {
  return (0, _builder.default)("NullLiteral", ...arguments);
}

function booleanLiteral(value) {
  return (0, _builder.default)("BooleanLiteral", ...arguments);
}

function regExpLiteral(pattern, flags) {
  return (0, _builder.default)("RegExpLiteral", ...arguments);
}

function logicalExpression(operator, left, right) {
  return (0, _builder.default)("LogicalExpression", ...arguments);
}

function memberExpression(object, property, computed, optional) {
  return (0, _builder.default)("MemberExpression", ...arguments);
}

function newExpression(callee, _arguments) {
  return (0, _builder.default)("NewExpression", ...arguments);
}

function program(body, directives, sourceType, interpreter) {
  return (0, _builder.default)("Program", ...arguments);
}

function objectExpression(properties) {
  return (0, _builder.default)("ObjectExpression", ...arguments);
}

function objectMethod(kind, key, params, body, computed, generator, async) {
  return (0, _builder.default)("ObjectMethod", ...arguments);
}

function objectProperty(key, value, computed, shorthand, decorators) {
  return (0, _builder.default)("ObjectProperty", ...arguments);
}

function restElement(argument) {
  return (0, _builder.default)("RestElement", ...arguments);
}

function returnStatement(argument) {
  return (0, _builder.default)("ReturnStatement", ...arguments);
}

function sequenceExpression(expressions) {
  return (0, _builder.default)("SequenceExpression", ...arguments);
}

function parenthesizedExpression(expression) {
  return (0, _builder.default)("ParenthesizedExpression", ...arguments);
}

function switchCase(test, consequent) {
  return (0, _builder.default)("SwitchCase", ...arguments);
}

function switchStatement(discriminant, cases) {
  return (0, _builder.default)("SwitchStatement", ...arguments);
}

function thisExpression() {
  return (0, _builder.default)("ThisExpression", ...arguments);
}

function throwStatement(argument) {
  return (0, _builder.default)("ThrowStatement", ...arguments);
}

function tryStatement(block, handler, finalizer) {
  return (0, _builder.default)("TryStatement", ...arguments);
}

function unaryExpression(operator, argument, prefix) {
  return (0, _builder.default)("UnaryExpression", ...arguments);
}

function updateExpression(operator, argument, prefix) {
  return (0, _builder.default)("UpdateExpression", ...arguments);
}

function variableDeclaration(kind, declarations) {
  return (0, _builder.default)("VariableDeclaration", ...arguments);
}

function variableDeclarator(id, init) {
  return (0, _builder.default)("VariableDeclarator", ...arguments);
}

function whileStatement(test, body) {
  return (0, _builder.default)("WhileStatement", ...arguments);
}

function withStatement(object, body) {
  return (0, _builder.default)("WithStatement", ...arguments);
}

function assignmentPattern(left, right) {
  return (0, _builder.default)("AssignmentPattern", ...arguments);
}

function arrayPattern(elements) {
  return (0, _builder.default)("ArrayPattern", ...arguments);
}

function arrowFunctionExpression(params, body, async) {
  return (0, _builder.default)("ArrowFunctionExpression", ...arguments);
}

function classBody(body) {
  return (0, _builder.default)("ClassBody", ...arguments);
}

function classExpression(id, superClass, body, decorators) {
  return (0, _builder.default)("ClassExpression", ...arguments);
}

function classDeclaration(id, superClass, body, decorators) {
  return (0, _builder.default)("ClassDeclaration", ...arguments);
}

function exportAllDeclaration(source) {
  return (0, _builder.default)("ExportAllDeclaration", ...arguments);
}

function exportDefaultDeclaration(declaration) {
  return (0, _builder.default)("ExportDefaultDeclaration", ...arguments);
}

function exportNamedDeclaration(declaration, specifiers, source) {
  return (0, _builder.default)("ExportNamedDeclaration", ...arguments);
}

function exportSpecifier(local, exported) {
  return (0, _builder.default)("ExportSpecifier", ...arguments);
}

function forOfStatement(left, right, body, _await) {
  return (0, _builder.default)("ForOfStatement", ...arguments);
}

function importDeclaration(specifiers, source) {
  return (0, _builder.default)("ImportDeclaration", ...arguments);
}

function importDefaultSpecifier(local) {
  return (0, _builder.default)("ImportDefaultSpecifier", ...arguments);
}

function importNamespaceSpecifier(local) {
  return (0, _builder.default)("ImportNamespaceSpecifier", ...arguments);
}

function importSpecifier(local, imported) {
  return (0, _builder.default)("ImportSpecifier", ...arguments);
}

function metaProperty(meta, property) {
  return (0, _builder.default)("MetaProperty", ...arguments);
}

function classMethod(kind, key, params, body, computed, _static, generator, async) {
  return (0, _builder.default)("ClassMethod", ...arguments);
}

function objectPattern(properties) {
  return (0, _builder.default)("ObjectPattern", ...arguments);
}

function spreadElement(argument) {
  return (0, _builder.default)("SpreadElement", ...arguments);
}

function _super() {
  return (0, _builder.default)("Super", ...arguments);
}

function taggedTemplateExpression(tag, quasi) {
  return (0, _builder.default)("TaggedTemplateExpression", ...arguments);
}

function templateElement(value, tail) {
  return (0, _builder.default)("TemplateElement", ...arguments);
}

function templateLiteral(quasis, expressions) {
  return (0, _builder.default)("TemplateLiteral", ...arguments);
}

function yieldExpression(argument, delegate) {
  return (0, _builder.default)("YieldExpression", ...arguments);
}

function awaitExpression(argument) {
  return (0, _builder.default)("AwaitExpression", ...arguments);
}

function _import() {
  return (0, _builder.default)("Import", ...arguments);
}

function bigIntLiteral(value) {
  return (0, _builder.default)("BigIntLiteral", ...arguments);
}

function exportNamespaceSpecifier(exported) {
  return (0, _builder.default)("ExportNamespaceSpecifier", ...arguments);
}

function optionalMemberExpression(object, property, computed, optional) {
  return (0, _builder.default)("OptionalMemberExpression", ...arguments);
}

function optionalCallExpression(callee, _arguments, optional) {
  return (0, _builder.default)("OptionalCallExpression", ...arguments);
}

function classProperty(key, value, typeAnnotation, decorators, computed, _static) {
  return (0, _builder.default)("ClassProperty", ...arguments);
}

function classPrivateProperty(key, value, decorators, _static) {
  return (0, _builder.default)("ClassPrivateProperty", ...arguments);
}

function classPrivateMethod(kind, key, params, body, _static) {
  return (0, _builder.default)("ClassPrivateMethod", ...arguments);
}

function privateName(id) {
  return (0, _builder.default)("PrivateName", ...arguments);
}

function anyTypeAnnotation() {
  return (0, _builder.default)("AnyTypeAnnotation", ...arguments);
}

function arrayTypeAnnotation(elementType) {
  return (0, _builder.default)("ArrayTypeAnnotation", ...arguments);
}

function booleanTypeAnnotation() {
  return (0, _builder.default)("BooleanTypeAnnotation", ...arguments);
}

function booleanLiteralTypeAnnotation(value) {
  return (0, _builder.default)("BooleanLiteralTypeAnnotation", ...arguments);
}

function nullLiteralTypeAnnotation() {
  return (0, _builder.default)("NullLiteralTypeAnnotation", ...arguments);
}

function classImplements(id, typeParameters) {
  return (0, _builder.default)("ClassImplements", ...arguments);
}

function declareClass(id, typeParameters, _extends, body) {
  return (0, _builder.default)("DeclareClass", ...arguments);
}

function declareFunction(id) {
  return (0, _builder.default)("DeclareFunction", ...arguments);
}

function declareInterface(id, typeParameters, _extends, body) {
  return (0, _builder.default)("DeclareInterface", ...arguments);
}

function declareModule(id, body, kind) {
  return (0, _builder.default)("DeclareModule", ...arguments);
}

function declareModuleExports(typeAnnotation) {
  return (0, _builder.default)("DeclareModuleExports", ...arguments);
}

function declareTypeAlias(id, typeParameters, right) {
  return (0, _builder.default)("DeclareTypeAlias", ...arguments);
}

function declareOpaqueType(id, typeParameters, supertype) {
  return (0, _builder.default)("DeclareOpaqueType", ...arguments);
}

function declareVariable(id) {
  return (0, _builder.default)("DeclareVariable", ...arguments);
}

function declareExportDeclaration(declaration, specifiers, source) {
  return (0, _builder.default)("DeclareExportDeclaration", ...arguments);
}

function declareExportAllDeclaration(source) {
  return (0, _builder.default)("DeclareExportAllDeclaration", ...arguments);
}

function declaredPredicate(value) {
  return (0, _builder.default)("DeclaredPredicate", ...arguments);
}

function existsTypeAnnotation() {
  return (0, _builder.default)("ExistsTypeAnnotation", ...arguments);
}

function functionTypeAnnotation(typeParameters, params, rest, returnType) {
  return (0, _builder.default)("FunctionTypeAnnotation", ...arguments);
}

function functionTypeParam(name, typeAnnotation) {
  return (0, _builder.default)("FunctionTypeParam", ...arguments);
}

function genericTypeAnnotation(id, typeParameters) {
  return (0, _builder.default)("GenericTypeAnnotation", ...arguments);
}

function inferredPredicate() {
  return (0, _builder.default)("InferredPredicate", ...arguments);
}

function interfaceExtends(id, typeParameters) {
  return (0, _builder.default)("InterfaceExtends", ...arguments);
}

function interfaceDeclaration(id, typeParameters, _extends, body) {
  return (0, _builder.default)("InterfaceDeclaration", ...arguments);
}

function interfaceTypeAnnotation(_extends, body) {
  return (0, _builder.default)("InterfaceTypeAnnotation", ...arguments);
}

function intersectionTypeAnnotation(types) {
  return (0, _builder.default)("IntersectionTypeAnnotation", ...arguments);
}

function mixedTypeAnnotation() {
  return (0, _builder.default)("MixedTypeAnnotation", ...arguments);
}

function emptyTypeAnnotation() {
  return (0, _builder.default)("EmptyTypeAnnotation", ...arguments);
}

function nullableTypeAnnotation(typeAnnotation) {
  return (0, _builder.default)("NullableTypeAnnotation", ...arguments);
}

function numberLiteralTypeAnnotation(value) {
  return (0, _builder.default)("NumberLiteralTypeAnnotation", ...arguments);
}

function numberTypeAnnotation() {
  return (0, _builder.default)("NumberTypeAnnotation", ...arguments);
}

function objectTypeAnnotation(properties, indexers, callProperties, internalSlots, exact) {
  return (0, _builder.default)("ObjectTypeAnnotation", ...arguments);
}

function objectTypeInternalSlot(id, value, optional, _static, method) {
  return (0, _builder.default)("ObjectTypeInternalSlot", ...arguments);
}

function objectTypeCallProperty(value) {
  return (0, _builder.default)("ObjectTypeCallProperty", ...arguments);
}

function objectTypeIndexer(id, key, value, variance) {
  return (0, _builder.default)("ObjectTypeIndexer", ...arguments);
}

function objectTypeProperty(key, value, variance) {
  return (0, _builder.default)("ObjectTypeProperty", ...arguments);
}

function objectTypeSpreadProperty(argument) {
  return (0, _builder.default)("ObjectTypeSpreadProperty", ...arguments);
}

function opaqueType(id, typeParameters, supertype, impltype) {
  return (0, _builder.default)("OpaqueType", ...arguments);
}

function qualifiedTypeIdentifier(id, qualification) {
  return (0, _builder.default)("QualifiedTypeIdentifier", ...arguments);
}

function stringLiteralTypeAnnotation(value) {
  return (0, _builder.default)("StringLiteralTypeAnnotation", ...arguments);
}

function stringTypeAnnotation() {
  return (0, _builder.default)("StringTypeAnnotation", ...arguments);
}

function symbolTypeAnnotation() {
  return (0, _builder.default)("SymbolTypeAnnotation", ...arguments);
}

function thisTypeAnnotation() {
  return (0, _builder.default)("ThisTypeAnnotation", ...arguments);
}

function tupleTypeAnnotation(types) {
  return (0, _builder.default)("TupleTypeAnnotation", ...arguments);
}

function typeofTypeAnnotation(argument) {
  return (0, _builder.default)("TypeofTypeAnnotation", ...arguments);
}

function typeAlias(id, typeParameters, right) {
  return (0, _builder.default)("TypeAlias", ...arguments);
}

function typeAnnotation(typeAnnotation) {
  return (0, _builder.default)("TypeAnnotation", ...arguments);
}

function typeCastExpression(expression, typeAnnotation) {
  return (0, _builder.default)("TypeCastExpression", ...arguments);
}

function typeParameter(bound, _default, variance) {
  return (0, _builder.default)("TypeParameter", ...arguments);
}

function typeParameterDeclaration(params) {
  return (0, _builder.default)("TypeParameterDeclaration", ...arguments);
}

function typeParameterInstantiation(params) {
  return (0, _builder.default)("TypeParameterInstantiation", ...arguments);
}

function unionTypeAnnotation(types) {
  return (0, _builder.default)("UnionTypeAnnotation", ...arguments);
}

function variance(kind) {
  return (0, _builder.default)("Variance", ...arguments);
}

function voidTypeAnnotation() {
  return (0, _builder.default)("VoidTypeAnnotation", ...arguments);
}

function enumDeclaration(id, body) {
  return (0, _builder.default)("EnumDeclaration", ...arguments);
}

function enumBooleanBody(members) {
  return (0, _builder.default)("EnumBooleanBody", ...arguments);
}

function enumNumberBody(members) {
  return (0, _builder.default)("EnumNumberBody", ...arguments);
}

function enumStringBody(members) {
  return (0, _builder.default)("EnumStringBody", ...arguments);
}

function enumSymbolBody(members) {
  return (0, _builder.default)("EnumSymbolBody", ...arguments);
}

function enumBooleanMember(id) {
  return (0, _builder.default)("EnumBooleanMember", ...arguments);
}

function enumNumberMember(id, init) {
  return (0, _builder.default)("EnumNumberMember", ...arguments);
}

function enumStringMember(id, init) {
  return (0, _builder.default)("EnumStringMember", ...arguments);
}

function enumDefaultedMember(id) {
  return (0, _builder.default)("EnumDefaultedMember", ...arguments);
}

function indexedAccessType(objectType, indexType) {
  return (0, _builder.default)("IndexedAccessType", ...arguments);
}

function optionalIndexedAccessType(objectType, indexType) {
  return (0, _builder.default)("OptionalIndexedAccessType", ...arguments);
}

function jsxAttribute(name, value) {
  return (0, _builder.default)("JSXAttribute", ...arguments);
}

function jsxClosingElement(name) {
  return (0, _builder.default)("JSXClosingElement", ...arguments);
}

function jsxElement(openingElement, closingElement, children, selfClosing) {
  return (0, _builder.default)("JSXElement", ...arguments);
}

function jsxEmptyExpression() {
  return (0, _builder.default)("JSXEmptyExpression", ...arguments);
}

function jsxExpressionContainer(expression) {
  return (0, _builder.default)("JSXExpressionContainer", ...arguments);
}

function jsxSpreadChild(expression) {
  return (0, _builder.default)("JSXSpreadChild", ...arguments);
}

function jsxIdentifier(name) {
  return (0, _builder.default)("JSXIdentifier", ...arguments);
}

function jsxMemberExpression(object, property) {
  return (0, _builder.default)("JSXMemberExpression", ...arguments);
}

function jsxNamespacedName(namespace, name) {
  return (0, _builder.default)("JSXNamespacedName", ...arguments);
}

function jsxOpeningElement(name, attributes, selfClosing) {
  return (0, _builder.default)("JSXOpeningElement", ...arguments);
}

function jsxSpreadAttribute(argument) {
  return (0, _builder.default)("JSXSpreadAttribute", ...arguments);
}

function jsxText(value) {
  return (0, _builder.default)("JSXText", ...arguments);
}

function jsxFragment(openingFragment, closingFragment, children) {
  return (0, _builder.default)("JSXFragment", ...arguments);
}

function jsxOpeningFragment() {
  return (0, _builder.default)("JSXOpeningFragment", ...arguments);
}

function jsxClosingFragment() {
  return (0, _builder.default)("JSXClosingFragment", ...arguments);
}

function noop() {
  return (0, _builder.default)("Noop", ...arguments);
}

function placeholder(expectedNode, name) {
  return (0, _builder.default)("Placeholder", ...arguments);
}

function v8IntrinsicIdentifier(name) {
  return (0, _builder.default)("V8IntrinsicIdentifier", ...arguments);
}

function argumentPlaceholder() {
  return (0, _builder.default)("ArgumentPlaceholder", ...arguments);
}

function bindExpression(object, callee) {
  return (0, _builder.default)("BindExpression", ...arguments);
}

function importAttribute(key, value) {
  return (0, _builder.default)("ImportAttribute", ...arguments);
}

function decorator(expression) {
  return (0, _builder.default)("Decorator", ...arguments);
}

function doExpression(body, async) {
  return (0, _builder.default)("DoExpression", ...arguments);
}

function exportDefaultSpecifier(exported) {
  return (0, _builder.default)("ExportDefaultSpecifier", ...arguments);
}

function recordExpression(properties) {
  return (0, _builder.default)("RecordExpression", ...arguments);
}

function tupleExpression(elements) {
  return (0, _builder.default)("TupleExpression", ...arguments);
}

function decimalLiteral(value) {
  return (0, _builder.default)("DecimalLiteral", ...arguments);
}

function staticBlock(body) {
  return (0, _builder.default)("StaticBlock", ...arguments);
}

function moduleExpression(body) {
  return (0, _builder.default)("ModuleExpression", ...arguments);
}

function topicReference() {
  return (0, _builder.default)("TopicReference", ...arguments);
}

function pipelineTopicExpression(expression) {
  return (0, _builder.default)("PipelineTopicExpression", ...arguments);
}

function pipelineBareFunction(callee) {
  return (0, _builder.default)("PipelineBareFunction", ...arguments);
}

function pipelinePrimaryTopicReference() {
  return (0, _builder.default)("PipelinePrimaryTopicReference", ...arguments);
}

function tsParameterProperty(parameter) {
  return (0, _builder.default)("TSParameterProperty", ...arguments);
}

function tsDeclareFunction(id, typeParameters, params, returnType) {
  return (0, _builder.default)("TSDeclareFunction", ...arguments);
}

function tsDeclareMethod(decorators, key, typeParameters, params, returnType) {
  return (0, _builder.default)("TSDeclareMethod", ...arguments);
}

function tsQualifiedName(left, right) {
  return (0, _builder.default)("TSQualifiedName", ...arguments);
}

function tsCallSignatureDeclaration(typeParameters, parameters, typeAnnotation) {
  return (0, _builder.default)("TSCallSignatureDeclaration", ...arguments);
}

function tsConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation) {
  return (0, _builder.default)("TSConstructSignatureDeclaration", ...arguments);
}

function tsPropertySignature(key, typeAnnotation, initializer) {
  return (0, _builder.default)("TSPropertySignature", ...arguments);
}

function tsMethodSignature(key, typeParameters, parameters, typeAnnotation) {
  return (0, _builder.default)("TSMethodSignature", ...arguments);
}

function tsIndexSignature(parameters, typeAnnotation) {
  return (0, _builder.default)("TSIndexSignature", ...arguments);
}

function tsAnyKeyword() {
  return (0, _builder.default)("TSAnyKeyword", ...arguments);
}

function tsBooleanKeyword() {
  return (0, _builder.default)("TSBooleanKeyword", ...arguments);
}

function tsBigIntKeyword() {
  return (0, _builder.default)("TSBigIntKeyword", ...arguments);
}

function tsIntrinsicKeyword() {
  return (0, _builder.default)("TSIntrinsicKeyword", ...arguments);
}

function tsNeverKeyword() {
  return (0, _builder.default)("TSNeverKeyword", ...arguments);
}

function tsNullKeyword() {
  return (0, _builder.default)("TSNullKeyword", ...arguments);
}

function tsNumberKeyword() {
  return (0, _builder.default)("TSNumberKeyword", ...arguments);
}

function tsObjectKeyword() {
  return (0, _builder.default)("TSObjectKeyword", ...arguments);
}

function tsStringKeyword() {
  return (0, _builder.default)("TSStringKeyword", ...arguments);
}

function tsSymbolKeyword() {
  return (0, _builder.default)("TSSymbolKeyword", ...arguments);
}

function tsUndefinedKeyword() {
  return (0, _builder.default)("TSUndefinedKeyword", ...arguments);
}

function tsUnknownKeyword() {
  return (0, _builder.default)("TSUnknownKeyword", ...arguments);
}

function tsVoidKeyword() {
  return (0, _builder.default)("TSVoidKeyword", ...arguments);
}

function tsThisType() {
  return (0, _builder.default)("TSThisType", ...arguments);
}

function tsFunctionType(typeParameters, parameters, typeAnnotation) {
  return (0, _builder.default)("TSFunctionType", ...arguments);
}

function tsConstructorType(typeParameters, parameters, typeAnnotation) {
  return (0, _builder.default)("TSConstructorType", ...arguments);
}

function tsTypeReference(typeName, typeParameters) {
  return (0, _builder.default)("TSTypeReference", ...arguments);
}

function tsTypePredicate(parameterName, typeAnnotation, asserts) {
  return (0, _builder.default)("TSTypePredicate", ...arguments);
}

function tsTypeQuery(exprName) {
  return (0, _builder.default)("TSTypeQuery", ...arguments);
}

function tsTypeLiteral(members) {
  return (0, _builder.default)("TSTypeLiteral", ...arguments);
}

function tsArrayType(elementType) {
  return (0, _builder.default)("TSArrayType", ...arguments);
}

function tsTupleType(elementTypes) {
  return (0, _builder.default)("TSTupleType", ...arguments);
}

function tsOptionalType(typeAnnotation) {
  return (0, _builder.default)("TSOptionalType", ...arguments);
}

function tsRestType(typeAnnotation) {
  return (0, _builder.default)("TSRestType", ...arguments);
}

function tsNamedTupleMember(label, elementType, optional) {
  return (0, _builder.default)("TSNamedTupleMember", ...arguments);
}

function tsUnionType(types) {
  return (0, _builder.default)("TSUnionType", ...arguments);
}

function tsIntersectionType(types) {
  return (0, _builder.default)("TSIntersectionType", ...arguments);
}

function tsConditionalType(checkType, extendsType, trueType, falseType) {
  return (0, _builder.default)("TSConditionalType", ...arguments);
}

function tsInferType(typeParameter) {
  return (0, _builder.default)("TSInferType", ...arguments);
}

function tsParenthesizedType(typeAnnotation) {
  return (0, _builder.default)("TSParenthesizedType", ...arguments);
}

function tsTypeOperator(typeAnnotation) {
  return (0, _builder.default)("TSTypeOperator", ...arguments);
}

function tsIndexedAccessType(objectType, indexType) {
  return (0, _builder.default)("TSIndexedAccessType", ...arguments);
}

function tsMappedType(typeParameter, typeAnnotation, nameType) {
  return (0, _builder.default)("TSMappedType", ...arguments);
}

function tsLiteralType(literal) {
  return (0, _builder.default)("TSLiteralType", ...arguments);
}

function tsExpressionWithTypeArguments(expression, typeParameters) {
  return (0, _builder.default)("TSExpressionWithTypeArguments", ...arguments);
}

function tsInterfaceDeclaration(id, typeParameters, _extends, body) {
  return (0, _builder.default)("TSInterfaceDeclaration", ...arguments);
}

function tsInterfaceBody(body) {
  return (0, _builder.default)("TSInterfaceBody", ...arguments);
}

function tsTypeAliasDeclaration(id, typeParameters, typeAnnotation) {
  return (0, _builder.default)("TSTypeAliasDeclaration", ...arguments);
}

function tsAsExpression(expression, typeAnnotation) {
  return (0, _builder.default)("TSAsExpression", ...arguments);
}

function tsTypeAssertion(typeAnnotation, expression) {
  return (0, _builder.default)("TSTypeAssertion", ...arguments);
}

function tsEnumDeclaration(id, members) {
  return (0, _builder.default)("TSEnumDeclaration", ...arguments);
}

function tsEnumMember(id, initializer) {
  return (0, _builder.default)("TSEnumMember", ...arguments);
}

function tsModuleDeclaration(id, body) {
  return (0, _builder.default)("TSModuleDeclaration", ...arguments);
}

function tsModuleBlock(body) {
  return (0, _builder.default)("TSModuleBlock", ...arguments);
}

function tsImportType(argument, qualifier, typeParameters) {
  return (0, _builder.default)("TSImportType", ...arguments);
}

function tsImportEqualsDeclaration(id, moduleReference) {
  return (0, _builder.default)("TSImportEqualsDeclaration", ...arguments);
}

function tsExternalModuleReference(expression) {
  return (0, _builder.default)("TSExternalModuleReference", ...arguments);
}

function tsNonNullExpression(expression) {
  return (0, _builder.default)("TSNonNullExpression", ...arguments);
}

function tsExportAssignment(expression) {
  return (0, _builder.default)("TSExportAssignment", ...arguments);
}

function tsNamespaceExportDeclaration(id) {
  return (0, _builder.default)("TSNamespaceExportDeclaration", ...arguments);
}

function tsTypeAnnotation(typeAnnotation) {
  return (0, _builder.default)("TSTypeAnnotation", ...arguments);
}

function tsTypeParameterInstantiation(params) {
  return (0, _builder.default)("TSTypeParameterInstantiation", ...arguments);
}

function tsTypeParameterDeclaration(params) {
  return (0, _builder.default)("TSTypeParameterDeclaration", ...arguments);
}

function tsTypeParameter(constraint, _default, name) {
  return (0, _builder.default)("TSTypeParameter", ...arguments);
}

function NumberLiteral(...args) {
  console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
  return (0, _builder.default)("NumberLiteral", ...args);
}

function RegexLiteral(...args) {
  console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
  return (0, _builder.default)("RegexLiteral", ...args);
}

function RestProperty(...args) {
  console.trace("The node type RestProperty has been renamed to RestElement");
  return (0, _builder.default)("RestProperty", ...args);
}

function SpreadProperty(...args) {
  console.trace("The node type SpreadProperty has been renamed to SpreadElement");
  return (0, _builder.default)("SpreadProperty", ...args);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/generated/uppercase.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/generated/uppercase.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "ArrayExpression", ({
  enumerable: true,
  get: function () {
    return _index.arrayExpression;
  }
}));
Object.defineProperty(exports, "AssignmentExpression", ({
  enumerable: true,
  get: function () {
    return _index.assignmentExpression;
  }
}));
Object.defineProperty(exports, "BinaryExpression", ({
  enumerable: true,
  get: function () {
    return _index.binaryExpression;
  }
}));
Object.defineProperty(exports, "InterpreterDirective", ({
  enumerable: true,
  get: function () {
    return _index.interpreterDirective;
  }
}));
Object.defineProperty(exports, "Directive", ({
  enumerable: true,
  get: function () {
    return _index.directive;
  }
}));
Object.defineProperty(exports, "DirectiveLiteral", ({
  enumerable: true,
  get: function () {
    return _index.directiveLiteral;
  }
}));
Object.defineProperty(exports, "BlockStatement", ({
  enumerable: true,
  get: function () {
    return _index.blockStatement;
  }
}));
Object.defineProperty(exports, "BreakStatement", ({
  enumerable: true,
  get: function () {
    return _index.breakStatement;
  }
}));
Object.defineProperty(exports, "CallExpression", ({
  enumerable: true,
  get: function () {
    return _index.callExpression;
  }
}));
Object.defineProperty(exports, "CatchClause", ({
  enumerable: true,
  get: function () {
    return _index.catchClause;
  }
}));
Object.defineProperty(exports, "ConditionalExpression", ({
  enumerable: true,
  get: function () {
    return _index.conditionalExpression;
  }
}));
Object.defineProperty(exports, "ContinueStatement", ({
  enumerable: true,
  get: function () {
    return _index.continueStatement;
  }
}));
Object.defineProperty(exports, "DebuggerStatement", ({
  enumerable: true,
  get: function () {
    return _index.debuggerStatement;
  }
}));
Object.defineProperty(exports, "DoWhileStatement", ({
  enumerable: true,
  get: function () {
    return _index.doWhileStatement;
  }
}));
Object.defineProperty(exports, "EmptyStatement", ({
  enumerable: true,
  get: function () {
    return _index.emptyStatement;
  }
}));
Object.defineProperty(exports, "ExpressionStatement", ({
  enumerable: true,
  get: function () {
    return _index.expressionStatement;
  }
}));
Object.defineProperty(exports, "File", ({
  enumerable: true,
  get: function () {
    return _index.file;
  }
}));
Object.defineProperty(exports, "ForInStatement", ({
  enumerable: true,
  get: function () {
    return _index.forInStatement;
  }
}));
Object.defineProperty(exports, "ForStatement", ({
  enumerable: true,
  get: function () {
    return _index.forStatement;
  }
}));
Object.defineProperty(exports, "FunctionDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.functionDeclaration;
  }
}));
Object.defineProperty(exports, "FunctionExpression", ({
  enumerable: true,
  get: function () {
    return _index.functionExpression;
  }
}));
Object.defineProperty(exports, "Identifier", ({
  enumerable: true,
  get: function () {
    return _index.identifier;
  }
}));
Object.defineProperty(exports, "IfStatement", ({
  enumerable: true,
  get: function () {
    return _index.ifStatement;
  }
}));
Object.defineProperty(exports, "LabeledStatement", ({
  enumerable: true,
  get: function () {
    return _index.labeledStatement;
  }
}));
Object.defineProperty(exports, "StringLiteral", ({
  enumerable: true,
  get: function () {
    return _index.stringLiteral;
  }
}));
Object.defineProperty(exports, "NumericLiteral", ({
  enumerable: true,
  get: function () {
    return _index.numericLiteral;
  }
}));
Object.defineProperty(exports, "NullLiteral", ({
  enumerable: true,
  get: function () {
    return _index.nullLiteral;
  }
}));
Object.defineProperty(exports, "BooleanLiteral", ({
  enumerable: true,
  get: function () {
    return _index.booleanLiteral;
  }
}));
Object.defineProperty(exports, "RegExpLiteral", ({
  enumerable: true,
  get: function () {
    return _index.regExpLiteral;
  }
}));
Object.defineProperty(exports, "LogicalExpression", ({
  enumerable: true,
  get: function () {
    return _index.logicalExpression;
  }
}));
Object.defineProperty(exports, "MemberExpression", ({
  enumerable: true,
  get: function () {
    return _index.memberExpression;
  }
}));
Object.defineProperty(exports, "NewExpression", ({
  enumerable: true,
  get: function () {
    return _index.newExpression;
  }
}));
Object.defineProperty(exports, "Program", ({
  enumerable: true,
  get: function () {
    return _index.program;
  }
}));
Object.defineProperty(exports, "ObjectExpression", ({
  enumerable: true,
  get: function () {
    return _index.objectExpression;
  }
}));
Object.defineProperty(exports, "ObjectMethod", ({
  enumerable: true,
  get: function () {
    return _index.objectMethod;
  }
}));
Object.defineProperty(exports, "ObjectProperty", ({
  enumerable: true,
  get: function () {
    return _index.objectProperty;
  }
}));
Object.defineProperty(exports, "RestElement", ({
  enumerable: true,
  get: function () {
    return _index.restElement;
  }
}));
Object.defineProperty(exports, "ReturnStatement", ({
  enumerable: true,
  get: function () {
    return _index.returnStatement;
  }
}));
Object.defineProperty(exports, "SequenceExpression", ({
  enumerable: true,
  get: function () {
    return _index.sequenceExpression;
  }
}));
Object.defineProperty(exports, "ParenthesizedExpression", ({
  enumerable: true,
  get: function () {
    return _index.parenthesizedExpression;
  }
}));
Object.defineProperty(exports, "SwitchCase", ({
  enumerable: true,
  get: function () {
    return _index.switchCase;
  }
}));
Object.defineProperty(exports, "SwitchStatement", ({
  enumerable: true,
  get: function () {
    return _index.switchStatement;
  }
}));
Object.defineProperty(exports, "ThisExpression", ({
  enumerable: true,
  get: function () {
    return _index.thisExpression;
  }
}));
Object.defineProperty(exports, "ThrowStatement", ({
  enumerable: true,
  get: function () {
    return _index.throwStatement;
  }
}));
Object.defineProperty(exports, "TryStatement", ({
  enumerable: true,
  get: function () {
    return _index.tryStatement;
  }
}));
Object.defineProperty(exports, "UnaryExpression", ({
  enumerable: true,
  get: function () {
    return _index.unaryExpression;
  }
}));
Object.defineProperty(exports, "UpdateExpression", ({
  enumerable: true,
  get: function () {
    return _index.updateExpression;
  }
}));
Object.defineProperty(exports, "VariableDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.variableDeclaration;
  }
}));
Object.defineProperty(exports, "VariableDeclarator", ({
  enumerable: true,
  get: function () {
    return _index.variableDeclarator;
  }
}));
Object.defineProperty(exports, "WhileStatement", ({
  enumerable: true,
  get: function () {
    return _index.whileStatement;
  }
}));
Object.defineProperty(exports, "WithStatement", ({
  enumerable: true,
  get: function () {
    return _index.withStatement;
  }
}));
Object.defineProperty(exports, "AssignmentPattern", ({
  enumerable: true,
  get: function () {
    return _index.assignmentPattern;
  }
}));
Object.defineProperty(exports, "ArrayPattern", ({
  enumerable: true,
  get: function () {
    return _index.arrayPattern;
  }
}));
Object.defineProperty(exports, "ArrowFunctionExpression", ({
  enumerable: true,
  get: function () {
    return _index.arrowFunctionExpression;
  }
}));
Object.defineProperty(exports, "ClassBody", ({
  enumerable: true,
  get: function () {
    return _index.classBody;
  }
}));
Object.defineProperty(exports, "ClassExpression", ({
  enumerable: true,
  get: function () {
    return _index.classExpression;
  }
}));
Object.defineProperty(exports, "ClassDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.classDeclaration;
  }
}));
Object.defineProperty(exports, "ExportAllDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.exportAllDeclaration;
  }
}));
Object.defineProperty(exports, "ExportDefaultDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.exportDefaultDeclaration;
  }
}));
Object.defineProperty(exports, "ExportNamedDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.exportNamedDeclaration;
  }
}));
Object.defineProperty(exports, "ExportSpecifier", ({
  enumerable: true,
  get: function () {
    return _index.exportSpecifier;
  }
}));
Object.defineProperty(exports, "ForOfStatement", ({
  enumerable: true,
  get: function () {
    return _index.forOfStatement;
  }
}));
Object.defineProperty(exports, "ImportDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.importDeclaration;
  }
}));
Object.defineProperty(exports, "ImportDefaultSpecifier", ({
  enumerable: true,
  get: function () {
    return _index.importDefaultSpecifier;
  }
}));
Object.defineProperty(exports, "ImportNamespaceSpecifier", ({
  enumerable: true,
  get: function () {
    return _index.importNamespaceSpecifier;
  }
}));
Object.defineProperty(exports, "ImportSpecifier", ({
  enumerable: true,
  get: function () {
    return _index.importSpecifier;
  }
}));
Object.defineProperty(exports, "MetaProperty", ({
  enumerable: true,
  get: function () {
    return _index.metaProperty;
  }
}));
Object.defineProperty(exports, "ClassMethod", ({
  enumerable: true,
  get: function () {
    return _index.classMethod;
  }
}));
Object.defineProperty(exports, "ObjectPattern", ({
  enumerable: true,
  get: function () {
    return _index.objectPattern;
  }
}));
Object.defineProperty(exports, "SpreadElement", ({
  enumerable: true,
  get: function () {
    return _index.spreadElement;
  }
}));
Object.defineProperty(exports, "Super", ({
  enumerable: true,
  get: function () {
    return _index.super;
  }
}));
Object.defineProperty(exports, "TaggedTemplateExpression", ({
  enumerable: true,
  get: function () {
    return _index.taggedTemplateExpression;
  }
}));
Object.defineProperty(exports, "TemplateElement", ({
  enumerable: true,
  get: function () {
    return _index.templateElement;
  }
}));
Object.defineProperty(exports, "TemplateLiteral", ({
  enumerable: true,
  get: function () {
    return _index.templateLiteral;
  }
}));
Object.defineProperty(exports, "YieldExpression", ({
  enumerable: true,
  get: function () {
    return _index.yieldExpression;
  }
}));
Object.defineProperty(exports, "AwaitExpression", ({
  enumerable: true,
  get: function () {
    return _index.awaitExpression;
  }
}));
Object.defineProperty(exports, "Import", ({
  enumerable: true,
  get: function () {
    return _index.import;
  }
}));
Object.defineProperty(exports, "BigIntLiteral", ({
  enumerable: true,
  get: function () {
    return _index.bigIntLiteral;
  }
}));
Object.defineProperty(exports, "ExportNamespaceSpecifier", ({
  enumerable: true,
  get: function () {
    return _index.exportNamespaceSpecifier;
  }
}));
Object.defineProperty(exports, "OptionalMemberExpression", ({
  enumerable: true,
  get: function () {
    return _index.optionalMemberExpression;
  }
}));
Object.defineProperty(exports, "OptionalCallExpression", ({
  enumerable: true,
  get: function () {
    return _index.optionalCallExpression;
  }
}));
Object.defineProperty(exports, "ClassProperty", ({
  enumerable: true,
  get: function () {
    return _index.classProperty;
  }
}));
Object.defineProperty(exports, "ClassPrivateProperty", ({
  enumerable: true,
  get: function () {
    return _index.classPrivateProperty;
  }
}));
Object.defineProperty(exports, "ClassPrivateMethod", ({
  enumerable: true,
  get: function () {
    return _index.classPrivateMethod;
  }
}));
Object.defineProperty(exports, "PrivateName", ({
  enumerable: true,
  get: function () {
    return _index.privateName;
  }
}));
Object.defineProperty(exports, "AnyTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.anyTypeAnnotation;
  }
}));
Object.defineProperty(exports, "ArrayTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.arrayTypeAnnotation;
  }
}));
Object.defineProperty(exports, "BooleanTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.booleanTypeAnnotation;
  }
}));
Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.booleanLiteralTypeAnnotation;
  }
}));
Object.defineProperty(exports, "NullLiteralTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.nullLiteralTypeAnnotation;
  }
}));
Object.defineProperty(exports, "ClassImplements", ({
  enumerable: true,
  get: function () {
    return _index.classImplements;
  }
}));
Object.defineProperty(exports, "DeclareClass", ({
  enumerable: true,
  get: function () {
    return _index.declareClass;
  }
}));
Object.defineProperty(exports, "DeclareFunction", ({
  enumerable: true,
  get: function () {
    return _index.declareFunction;
  }
}));
Object.defineProperty(exports, "DeclareInterface", ({
  enumerable: true,
  get: function () {
    return _index.declareInterface;
  }
}));
Object.defineProperty(exports, "DeclareModule", ({
  enumerable: true,
  get: function () {
    return _index.declareModule;
  }
}));
Object.defineProperty(exports, "DeclareModuleExports", ({
  enumerable: true,
  get: function () {
    return _index.declareModuleExports;
  }
}));
Object.defineProperty(exports, "DeclareTypeAlias", ({
  enumerable: true,
  get: function () {
    return _index.declareTypeAlias;
  }
}));
Object.defineProperty(exports, "DeclareOpaqueType", ({
  enumerable: true,
  get: function () {
    return _index.declareOpaqueType;
  }
}));
Object.defineProperty(exports, "DeclareVariable", ({
  enumerable: true,
  get: function () {
    return _index.declareVariable;
  }
}));
Object.defineProperty(exports, "DeclareExportDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.declareExportDeclaration;
  }
}));
Object.defineProperty(exports, "DeclareExportAllDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.declareExportAllDeclaration;
  }
}));
Object.defineProperty(exports, "DeclaredPredicate", ({
  enumerable: true,
  get: function () {
    return _index.declaredPredicate;
  }
}));
Object.defineProperty(exports, "ExistsTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.existsTypeAnnotation;
  }
}));
Object.defineProperty(exports, "FunctionTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.functionTypeAnnotation;
  }
}));
Object.defineProperty(exports, "FunctionTypeParam", ({
  enumerable: true,
  get: function () {
    return _index.functionTypeParam;
  }
}));
Object.defineProperty(exports, "GenericTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.genericTypeAnnotation;
  }
}));
Object.defineProperty(exports, "InferredPredicate", ({
  enumerable: true,
  get: function () {
    return _index.inferredPredicate;
  }
}));
Object.defineProperty(exports, "InterfaceExtends", ({
  enumerable: true,
  get: function () {
    return _index.interfaceExtends;
  }
}));
Object.defineProperty(exports, "InterfaceDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.interfaceDeclaration;
  }
}));
Object.defineProperty(exports, "InterfaceTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.interfaceTypeAnnotation;
  }
}));
Object.defineProperty(exports, "IntersectionTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.intersectionTypeAnnotation;
  }
}));
Object.defineProperty(exports, "MixedTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.mixedTypeAnnotation;
  }
}));
Object.defineProperty(exports, "EmptyTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.emptyTypeAnnotation;
  }
}));
Object.defineProperty(exports, "NullableTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.nullableTypeAnnotation;
  }
}));
Object.defineProperty(exports, "NumberLiteralTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.numberLiteralTypeAnnotation;
  }
}));
Object.defineProperty(exports, "NumberTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.numberTypeAnnotation;
  }
}));
Object.defineProperty(exports, "ObjectTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.objectTypeAnnotation;
  }
}));
Object.defineProperty(exports, "ObjectTypeInternalSlot", ({
  enumerable: true,
  get: function () {
    return _index.objectTypeInternalSlot;
  }
}));
Object.defineProperty(exports, "ObjectTypeCallProperty", ({
  enumerable: true,
  get: function () {
    return _index.objectTypeCallProperty;
  }
}));
Object.defineProperty(exports, "ObjectTypeIndexer", ({
  enumerable: true,
  get: function () {
    return _index.objectTypeIndexer;
  }
}));
Object.defineProperty(exports, "ObjectTypeProperty", ({
  enumerable: true,
  get: function () {
    return _index.objectTypeProperty;
  }
}));
Object.defineProperty(exports, "ObjectTypeSpreadProperty", ({
  enumerable: true,
  get: function () {
    return _index.objectTypeSpreadProperty;
  }
}));
Object.defineProperty(exports, "OpaqueType", ({
  enumerable: true,
  get: function () {
    return _index.opaqueType;
  }
}));
Object.defineProperty(exports, "QualifiedTypeIdentifier", ({
  enumerable: true,
  get: function () {
    return _index.qualifiedTypeIdentifier;
  }
}));
Object.defineProperty(exports, "StringLiteralTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.stringLiteralTypeAnnotation;
  }
}));
Object.defineProperty(exports, "StringTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.stringTypeAnnotation;
  }
}));
Object.defineProperty(exports, "SymbolTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.symbolTypeAnnotation;
  }
}));
Object.defineProperty(exports, "ThisTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.thisTypeAnnotation;
  }
}));
Object.defineProperty(exports, "TupleTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.tupleTypeAnnotation;
  }
}));
Object.defineProperty(exports, "TypeofTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.typeofTypeAnnotation;
  }
}));
Object.defineProperty(exports, "TypeAlias", ({
  enumerable: true,
  get: function () {
    return _index.typeAlias;
  }
}));
Object.defineProperty(exports, "TypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.typeAnnotation;
  }
}));
Object.defineProperty(exports, "TypeCastExpression", ({
  enumerable: true,
  get: function () {
    return _index.typeCastExpression;
  }
}));
Object.defineProperty(exports, "TypeParameter", ({
  enumerable: true,
  get: function () {
    return _index.typeParameter;
  }
}));
Object.defineProperty(exports, "TypeParameterDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.typeParameterDeclaration;
  }
}));
Object.defineProperty(exports, "TypeParameterInstantiation", ({
  enumerable: true,
  get: function () {
    return _index.typeParameterInstantiation;
  }
}));
Object.defineProperty(exports, "UnionTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.unionTypeAnnotation;
  }
}));
Object.defineProperty(exports, "Variance", ({
  enumerable: true,
  get: function () {
    return _index.variance;
  }
}));
Object.defineProperty(exports, "VoidTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.voidTypeAnnotation;
  }
}));
Object.defineProperty(exports, "EnumDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.enumDeclaration;
  }
}));
Object.defineProperty(exports, "EnumBooleanBody", ({
  enumerable: true,
  get: function () {
    return _index.enumBooleanBody;
  }
}));
Object.defineProperty(exports, "EnumNumberBody", ({
  enumerable: true,
  get: function () {
    return _index.enumNumberBody;
  }
}));
Object.defineProperty(exports, "EnumStringBody", ({
  enumerable: true,
  get: function () {
    return _index.enumStringBody;
  }
}));
Object.defineProperty(exports, "EnumSymbolBody", ({
  enumerable: true,
  get: function () {
    return _index.enumSymbolBody;
  }
}));
Object.defineProperty(exports, "EnumBooleanMember", ({
  enumerable: true,
  get: function () {
    return _index.enumBooleanMember;
  }
}));
Object.defineProperty(exports, "EnumNumberMember", ({
  enumerable: true,
  get: function () {
    return _index.enumNumberMember;
  }
}));
Object.defineProperty(exports, "EnumStringMember", ({
  enumerable: true,
  get: function () {
    return _index.enumStringMember;
  }
}));
Object.defineProperty(exports, "EnumDefaultedMember", ({
  enumerable: true,
  get: function () {
    return _index.enumDefaultedMember;
  }
}));
Object.defineProperty(exports, "IndexedAccessType", ({
  enumerable: true,
  get: function () {
    return _index.indexedAccessType;
  }
}));
Object.defineProperty(exports, "OptionalIndexedAccessType", ({
  enumerable: true,
  get: function () {
    return _index.optionalIndexedAccessType;
  }
}));
Object.defineProperty(exports, "JSXAttribute", ({
  enumerable: true,
  get: function () {
    return _index.jsxAttribute;
  }
}));
Object.defineProperty(exports, "JSXClosingElement", ({
  enumerable: true,
  get: function () {
    return _index.jsxClosingElement;
  }
}));
Object.defineProperty(exports, "JSXElement", ({
  enumerable: true,
  get: function () {
    return _index.jsxElement;
  }
}));
Object.defineProperty(exports, "JSXEmptyExpression", ({
  enumerable: true,
  get: function () {
    return _index.jsxEmptyExpression;
  }
}));
Object.defineProperty(exports, "JSXExpressionContainer", ({
  enumerable: true,
  get: function () {
    return _index.jsxExpressionContainer;
  }
}));
Object.defineProperty(exports, "JSXSpreadChild", ({
  enumerable: true,
  get: function () {
    return _index.jsxSpreadChild;
  }
}));
Object.defineProperty(exports, "JSXIdentifier", ({
  enumerable: true,
  get: function () {
    return _index.jsxIdentifier;
  }
}));
Object.defineProperty(exports, "JSXMemberExpression", ({
  enumerable: true,
  get: function () {
    return _index.jsxMemberExpression;
  }
}));
Object.defineProperty(exports, "JSXNamespacedName", ({
  enumerable: true,
  get: function () {
    return _index.jsxNamespacedName;
  }
}));
Object.defineProperty(exports, "JSXOpeningElement", ({
  enumerable: true,
  get: function () {
    return _index.jsxOpeningElement;
  }
}));
Object.defineProperty(exports, "JSXSpreadAttribute", ({
  enumerable: true,
  get: function () {
    return _index.jsxSpreadAttribute;
  }
}));
Object.defineProperty(exports, "JSXText", ({
  enumerable: true,
  get: function () {
    return _index.jsxText;
  }
}));
Object.defineProperty(exports, "JSXFragment", ({
  enumerable: true,
  get: function () {
    return _index.jsxFragment;
  }
}));
Object.defineProperty(exports, "JSXOpeningFragment", ({
  enumerable: true,
  get: function () {
    return _index.jsxOpeningFragment;
  }
}));
Object.defineProperty(exports, "JSXClosingFragment", ({
  enumerable: true,
  get: function () {
    return _index.jsxClosingFragment;
  }
}));
Object.defineProperty(exports, "Noop", ({
  enumerable: true,
  get: function () {
    return _index.noop;
  }
}));
Object.defineProperty(exports, "Placeholder", ({
  enumerable: true,
  get: function () {
    return _index.placeholder;
  }
}));
Object.defineProperty(exports, "V8IntrinsicIdentifier", ({
  enumerable: true,
  get: function () {
    return _index.v8IntrinsicIdentifier;
  }
}));
Object.defineProperty(exports, "ArgumentPlaceholder", ({
  enumerable: true,
  get: function () {
    return _index.argumentPlaceholder;
  }
}));
Object.defineProperty(exports, "BindExpression", ({
  enumerable: true,
  get: function () {
    return _index.bindExpression;
  }
}));
Object.defineProperty(exports, "ImportAttribute", ({
  enumerable: true,
  get: function () {
    return _index.importAttribute;
  }
}));
Object.defineProperty(exports, "Decorator", ({
  enumerable: true,
  get: function () {
    return _index.decorator;
  }
}));
Object.defineProperty(exports, "DoExpression", ({
  enumerable: true,
  get: function () {
    return _index.doExpression;
  }
}));
Object.defineProperty(exports, "ExportDefaultSpecifier", ({
  enumerable: true,
  get: function () {
    return _index.exportDefaultSpecifier;
  }
}));
Object.defineProperty(exports, "RecordExpression", ({
  enumerable: true,
  get: function () {
    return _index.recordExpression;
  }
}));
Object.defineProperty(exports, "TupleExpression", ({
  enumerable: true,
  get: function () {
    return _index.tupleExpression;
  }
}));
Object.defineProperty(exports, "DecimalLiteral", ({
  enumerable: true,
  get: function () {
    return _index.decimalLiteral;
  }
}));
Object.defineProperty(exports, "StaticBlock", ({
  enumerable: true,
  get: function () {
    return _index.staticBlock;
  }
}));
Object.defineProperty(exports, "ModuleExpression", ({
  enumerable: true,
  get: function () {
    return _index.moduleExpression;
  }
}));
Object.defineProperty(exports, "TopicReference", ({
  enumerable: true,
  get: function () {
    return _index.topicReference;
  }
}));
Object.defineProperty(exports, "PipelineTopicExpression", ({
  enumerable: true,
  get: function () {
    return _index.pipelineTopicExpression;
  }
}));
Object.defineProperty(exports, "PipelineBareFunction", ({
  enumerable: true,
  get: function () {
    return _index.pipelineBareFunction;
  }
}));
Object.defineProperty(exports, "PipelinePrimaryTopicReference", ({
  enumerable: true,
  get: function () {
    return _index.pipelinePrimaryTopicReference;
  }
}));
Object.defineProperty(exports, "TSParameterProperty", ({
  enumerable: true,
  get: function () {
    return _index.tsParameterProperty;
  }
}));
Object.defineProperty(exports, "TSDeclareFunction", ({
  enumerable: true,
  get: function () {
    return _index.tsDeclareFunction;
  }
}));
Object.defineProperty(exports, "TSDeclareMethod", ({
  enumerable: true,
  get: function () {
    return _index.tsDeclareMethod;
  }
}));
Object.defineProperty(exports, "TSQualifiedName", ({
  enumerable: true,
  get: function () {
    return _index.tsQualifiedName;
  }
}));
Object.defineProperty(exports, "TSCallSignatureDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsCallSignatureDeclaration;
  }
}));
Object.defineProperty(exports, "TSConstructSignatureDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsConstructSignatureDeclaration;
  }
}));
Object.defineProperty(exports, "TSPropertySignature", ({
  enumerable: true,
  get: function () {
    return _index.tsPropertySignature;
  }
}));
Object.defineProperty(exports, "TSMethodSignature", ({
  enumerable: true,
  get: function () {
    return _index.tsMethodSignature;
  }
}));
Object.defineProperty(exports, "TSIndexSignature", ({
  enumerable: true,
  get: function () {
    return _index.tsIndexSignature;
  }
}));
Object.defineProperty(exports, "TSAnyKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsAnyKeyword;
  }
}));
Object.defineProperty(exports, "TSBooleanKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsBooleanKeyword;
  }
}));
Object.defineProperty(exports, "TSBigIntKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsBigIntKeyword;
  }
}));
Object.defineProperty(exports, "TSIntrinsicKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsIntrinsicKeyword;
  }
}));
Object.defineProperty(exports, "TSNeverKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsNeverKeyword;
  }
}));
Object.defineProperty(exports, "TSNullKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsNullKeyword;
  }
}));
Object.defineProperty(exports, "TSNumberKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsNumberKeyword;
  }
}));
Object.defineProperty(exports, "TSObjectKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsObjectKeyword;
  }
}));
Object.defineProperty(exports, "TSStringKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsStringKeyword;
  }
}));
Object.defineProperty(exports, "TSSymbolKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsSymbolKeyword;
  }
}));
Object.defineProperty(exports, "TSUndefinedKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsUndefinedKeyword;
  }
}));
Object.defineProperty(exports, "TSUnknownKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsUnknownKeyword;
  }
}));
Object.defineProperty(exports, "TSVoidKeyword", ({
  enumerable: true,
  get: function () {
    return _index.tsVoidKeyword;
  }
}));
Object.defineProperty(exports, "TSThisType", ({
  enumerable: true,
  get: function () {
    return _index.tsThisType;
  }
}));
Object.defineProperty(exports, "TSFunctionType", ({
  enumerable: true,
  get: function () {
    return _index.tsFunctionType;
  }
}));
Object.defineProperty(exports, "TSConstructorType", ({
  enumerable: true,
  get: function () {
    return _index.tsConstructorType;
  }
}));
Object.defineProperty(exports, "TSTypeReference", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeReference;
  }
}));
Object.defineProperty(exports, "TSTypePredicate", ({
  enumerable: true,
  get: function () {
    return _index.tsTypePredicate;
  }
}));
Object.defineProperty(exports, "TSTypeQuery", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeQuery;
  }
}));
Object.defineProperty(exports, "TSTypeLiteral", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeLiteral;
  }
}));
Object.defineProperty(exports, "TSArrayType", ({
  enumerable: true,
  get: function () {
    return _index.tsArrayType;
  }
}));
Object.defineProperty(exports, "TSTupleType", ({
  enumerable: true,
  get: function () {
    return _index.tsTupleType;
  }
}));
Object.defineProperty(exports, "TSOptionalType", ({
  enumerable: true,
  get: function () {
    return _index.tsOptionalType;
  }
}));
Object.defineProperty(exports, "TSRestType", ({
  enumerable: true,
  get: function () {
    return _index.tsRestType;
  }
}));
Object.defineProperty(exports, "TSNamedTupleMember", ({
  enumerable: true,
  get: function () {
    return _index.tsNamedTupleMember;
  }
}));
Object.defineProperty(exports, "TSUnionType", ({
  enumerable: true,
  get: function () {
    return _index.tsUnionType;
  }
}));
Object.defineProperty(exports, "TSIntersectionType", ({
  enumerable: true,
  get: function () {
    return _index.tsIntersectionType;
  }
}));
Object.defineProperty(exports, "TSConditionalType", ({
  enumerable: true,
  get: function () {
    return _index.tsConditionalType;
  }
}));
Object.defineProperty(exports, "TSInferType", ({
  enumerable: true,
  get: function () {
    return _index.tsInferType;
  }
}));
Object.defineProperty(exports, "TSParenthesizedType", ({
  enumerable: true,
  get: function () {
    return _index.tsParenthesizedType;
  }
}));
Object.defineProperty(exports, "TSTypeOperator", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeOperator;
  }
}));
Object.defineProperty(exports, "TSIndexedAccessType", ({
  enumerable: true,
  get: function () {
    return _index.tsIndexedAccessType;
  }
}));
Object.defineProperty(exports, "TSMappedType", ({
  enumerable: true,
  get: function () {
    return _index.tsMappedType;
  }
}));
Object.defineProperty(exports, "TSLiteralType", ({
  enumerable: true,
  get: function () {
    return _index.tsLiteralType;
  }
}));
Object.defineProperty(exports, "TSExpressionWithTypeArguments", ({
  enumerable: true,
  get: function () {
    return _index.tsExpressionWithTypeArguments;
  }
}));
Object.defineProperty(exports, "TSInterfaceDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsInterfaceDeclaration;
  }
}));
Object.defineProperty(exports, "TSInterfaceBody", ({
  enumerable: true,
  get: function () {
    return _index.tsInterfaceBody;
  }
}));
Object.defineProperty(exports, "TSTypeAliasDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeAliasDeclaration;
  }
}));
Object.defineProperty(exports, "TSAsExpression", ({
  enumerable: true,
  get: function () {
    return _index.tsAsExpression;
  }
}));
Object.defineProperty(exports, "TSTypeAssertion", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeAssertion;
  }
}));
Object.defineProperty(exports, "TSEnumDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsEnumDeclaration;
  }
}));
Object.defineProperty(exports, "TSEnumMember", ({
  enumerable: true,
  get: function () {
    return _index.tsEnumMember;
  }
}));
Object.defineProperty(exports, "TSModuleDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsModuleDeclaration;
  }
}));
Object.defineProperty(exports, "TSModuleBlock", ({
  enumerable: true,
  get: function () {
    return _index.tsModuleBlock;
  }
}));
Object.defineProperty(exports, "TSImportType", ({
  enumerable: true,
  get: function () {
    return _index.tsImportType;
  }
}));
Object.defineProperty(exports, "TSImportEqualsDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsImportEqualsDeclaration;
  }
}));
Object.defineProperty(exports, "TSExternalModuleReference", ({
  enumerable: true,
  get: function () {
    return _index.tsExternalModuleReference;
  }
}));
Object.defineProperty(exports, "TSNonNullExpression", ({
  enumerable: true,
  get: function () {
    return _index.tsNonNullExpression;
  }
}));
Object.defineProperty(exports, "TSExportAssignment", ({
  enumerable: true,
  get: function () {
    return _index.tsExportAssignment;
  }
}));
Object.defineProperty(exports, "TSNamespaceExportDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsNamespaceExportDeclaration;
  }
}));
Object.defineProperty(exports, "TSTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeAnnotation;
  }
}));
Object.defineProperty(exports, "TSTypeParameterInstantiation", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeParameterInstantiation;
  }
}));
Object.defineProperty(exports, "TSTypeParameterDeclaration", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeParameterDeclaration;
  }
}));
Object.defineProperty(exports, "TSTypeParameter", ({
  enumerable: true,
  get: function () {
    return _index.tsTypeParameter;
  }
}));
Object.defineProperty(exports, "NumberLiteral", ({
  enumerable: true,
  get: function () {
    return _index.numberLiteral;
  }
}));
Object.defineProperty(exports, "RegexLiteral", ({
  enumerable: true,
  get: function () {
    return _index.regexLiteral;
  }
}));
Object.defineProperty(exports, "RestProperty", ({
  enumerable: true,
  get: function () {
    return _index.restProperty;
  }
}));
Object.defineProperty(exports, "SpreadProperty", ({
  enumerable: true,
  get: function () {
    return _index.spreadProperty;
  }
}));

var _index = __webpack_require__(/*! ./index */ "./node_modules/@babel/types/lib/builders/generated/index.js");

/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/react/buildChildren.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/react/buildChildren.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildChildren;

var _generated = __webpack_require__(/*! ../../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _cleanJSXElementLiteralChild = __webpack_require__(/*! ../../utils/react/cleanJSXElementLiteralChild */ "./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");

function buildChildren(node) {
  const elements = [];

  for (let i = 0; i < node.children.length; i++) {
    let child = node.children[i];

    if ((0, _generated.isJSXText)(child)) {
      (0, _cleanJSXElementLiteralChild.default)(child, elements);
      continue;
    }

    if ((0, _generated.isJSXExpressionContainer)(child)) child = child.expression;
    if ((0, _generated.isJSXEmptyExpression)(child)) continue;
    elements.push(child);
  }

  return elements;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = createTSUnionType;

var _generated = __webpack_require__(/*! ../generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

var _removeTypeDuplicates = __webpack_require__(/*! ../../modifications/typescript/removeTypeDuplicates */ "./node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js");

function createTSUnionType(typeAnnotations) {
  const types = typeAnnotations.map(type => type.typeAnnotation);
  const flattened = (0, _removeTypeDuplicates.default)(types);

  if (flattened.length === 1) {
    return flattened[0];
  } else {
    return (0, _generated.tsUnionType)(flattened);
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/clone/clone.js":
/*!******************************************************!*\
  !*** ./node_modules/@babel/types/lib/clone/clone.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = clone;

var _cloneNode = __webpack_require__(/*! ./cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

function clone(node) {
  return (0, _cloneNode.default)(node, false);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/clone/cloneDeep.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/types/lib/clone/cloneDeep.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = cloneDeep;

var _cloneNode = __webpack_require__(/*! ./cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

function cloneDeep(node) {
  return (0, _cloneNode.default)(node);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = cloneDeepWithoutLoc;

var _cloneNode = __webpack_require__(/*! ./cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

function cloneDeepWithoutLoc(node) {
  return (0, _cloneNode.default)(node, true, true);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/clone/cloneNode.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/types/lib/clone/cloneNode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = cloneNode;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

const has = Function.call.bind(Object.prototype.hasOwnProperty);

function cloneIfNode(obj, deep, withoutLoc) {
  if (obj && typeof obj.type === "string") {
    return cloneNode(obj, deep, withoutLoc);
  }

  return obj;
}

function cloneIfNodeOrArray(obj, deep, withoutLoc) {
  if (Array.isArray(obj)) {
    return obj.map(node => cloneIfNode(node, deep, withoutLoc));
  }

  return cloneIfNode(obj, deep, withoutLoc);
}

function cloneNode(node, deep = true, withoutLoc = false) {
  if (!node) return node;
  const {
    type
  } = node;
  const newNode = {
    type: node.type
  };

  if ((0, _generated.isIdentifier)(node)) {
    newNode.name = node.name;

    if (has(node, "optional") && typeof node.optional === "boolean") {
      newNode.optional = node.optional;
    }

    if (has(node, "typeAnnotation")) {
      newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc) : node.typeAnnotation;
    }
  } else if (!has(_definitions.NODE_FIELDS, type)) {
    throw new Error(`Unknown node type: "${type}"`);
  } else {
    for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {
      if (has(node, field)) {
        if (deep) {
          newNode[field] = (0, _generated.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc) : cloneIfNodeOrArray(node[field], true, withoutLoc);
        } else {
          newNode[field] = node[field];
        }
      }
    }
  }

  if (has(node, "loc")) {
    if (withoutLoc) {
      newNode.loc = null;
    } else {
      newNode.loc = node.loc;
    }
  }

  if (has(node, "leadingComments")) {
    newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc);
  }

  if (has(node, "innerComments")) {
    newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc);
  }

  if (has(node, "trailingComments")) {
    newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc);
  }

  if (has(node, "extra")) {
    newNode.extra = Object.assign({}, node.extra);
  }

  return newNode;
}

function maybeCloneComments(comments, deep, withoutLoc) {
  if (!comments || !deep) {
    return comments;
  }

  return comments.map(({
    type,
    value,
    loc
  }) => {
    if (withoutLoc) {
      return {
        type,
        value,
        loc: null
      };
    }

    return {
      type,
      value,
      loc
    };
  });
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/clone/cloneWithoutLoc.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/clone/cloneWithoutLoc.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = cloneWithoutLoc;

var _cloneNode = __webpack_require__(/*! ./cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

function cloneWithoutLoc(node) {
  return (0, _cloneNode.default)(node, false, true);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/addComment.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/addComment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = addComment;

var _addComments = __webpack_require__(/*! ./addComments */ "./node_modules/@babel/types/lib/comments/addComments.js");

function addComment(node, type, content, line) {
  return (0, _addComments.default)(node, type, [{
    type: line ? "CommentLine" : "CommentBlock",
    value: content
  }]);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/addComments.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/addComments.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = addComments;

function addComments(node, type, comments) {
  if (!comments || !node) return node;
  const key = `${type}Comments`;

  if (node[key]) {
    if (type === "leading") {
      node[key] = comments.concat(node[key]);
    } else {
      node[key] = node[key].concat(comments);
    }
  } else {
    node[key] = comments;
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/inheritInnerComments.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/inheritInnerComments.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = inheritInnerComments;

var _inherit = __webpack_require__(/*! ../utils/inherit */ "./node_modules/@babel/types/lib/utils/inherit.js");

function inheritInnerComments(child, parent) {
  (0, _inherit.default)("innerComments", child, parent);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/inheritLeadingComments.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/inheritLeadingComments.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = inheritLeadingComments;

var _inherit = __webpack_require__(/*! ../utils/inherit */ "./node_modules/@babel/types/lib/utils/inherit.js");

function inheritLeadingComments(child, parent) {
  (0, _inherit.default)("leadingComments", child, parent);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/inheritTrailingComments.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/inheritTrailingComments.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = inheritTrailingComments;

var _inherit = __webpack_require__(/*! ../utils/inherit */ "./node_modules/@babel/types/lib/utils/inherit.js");

function inheritTrailingComments(child, parent) {
  (0, _inherit.default)("trailingComments", child, parent);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/inheritsComments.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/inheritsComments.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = inheritsComments;

var _inheritTrailingComments = __webpack_require__(/*! ./inheritTrailingComments */ "./node_modules/@babel/types/lib/comments/inheritTrailingComments.js");

var _inheritLeadingComments = __webpack_require__(/*! ./inheritLeadingComments */ "./node_modules/@babel/types/lib/comments/inheritLeadingComments.js");

var _inheritInnerComments = __webpack_require__(/*! ./inheritInnerComments */ "./node_modules/@babel/types/lib/comments/inheritInnerComments.js");

function inheritsComments(child, parent) {
  (0, _inheritTrailingComments.default)(child, parent);
  (0, _inheritLeadingComments.default)(child, parent);
  (0, _inheritInnerComments.default)(child, parent);
  return child;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/comments/removeComments.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/comments/removeComments.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = removeComments;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/@babel/types/lib/constants/index.js");

function removeComments(node) {
  _constants.COMMENT_KEYS.forEach(key => {
    node[key] = null;
  });

  return node;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/constants/generated/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/constants/generated/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.TSBASETYPE_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.JSX_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.FLOWTYPE_TYPES = exports.FLOW_TYPES = exports.PRIVATE_TYPES = exports.MODULESPECIFIER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = exports.CLASS_TYPES = exports.PATTERN_TYPES = exports.UNARYLIKE_TYPES = exports.PROPERTY_TYPES = exports.OBJECTMEMBER_TYPES = exports.METHOD_TYPES = exports.USERWHITESPACABLE_TYPES = exports.IMMUTABLE_TYPES = exports.LITERAL_TYPES = exports.TSENTITYNAME_TYPES = exports.LVAL_TYPES = exports.PATTERNLIKE_TYPES = exports.DECLARATION_TYPES = exports.PUREISH_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FUNCTION_TYPES = exports.FORXSTATEMENT_TYPES = exports.FOR_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.WHILE_TYPES = exports.LOOP_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.SCOPABLE_TYPES = exports.BINARY_TYPES = exports.EXPRESSION_TYPES = void 0;

var _definitions = __webpack_require__(/*! ../../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

const EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Expression"];
exports.EXPRESSION_TYPES = EXPRESSION_TYPES;
const BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Binary"];
exports.BINARY_TYPES = BINARY_TYPES;
const SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Scopable"];
exports.SCOPABLE_TYPES = SCOPABLE_TYPES;
const BLOCKPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["BlockParent"];
exports.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
const BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Block"];
exports.BLOCK_TYPES = BLOCK_TYPES;
const STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Statement"];
exports.STATEMENT_TYPES = STATEMENT_TYPES;
const TERMINATORLESS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Terminatorless"];
exports.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
const COMPLETIONSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["CompletionStatement"];
exports.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
const CONDITIONAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Conditional"];
exports.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
const LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Loop"];
exports.LOOP_TYPES = LOOP_TYPES;
const WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["While"];
exports.WHILE_TYPES = WHILE_TYPES;
const EXPRESSIONWRAPPER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
exports.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
const FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS["For"];
exports.FOR_TYPES = FOR_TYPES;
const FORXSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ForXStatement"];
exports.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
const FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Function"];
exports.FUNCTION_TYPES = FUNCTION_TYPES;
const FUNCTIONPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FunctionParent"];
exports.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
const PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pureish"];
exports.PUREISH_TYPES = PUREISH_TYPES;
const DECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Declaration"];
exports.DECLARATION_TYPES = DECLARATION_TYPES;
const PATTERNLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["PatternLike"];
exports.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
const LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["LVal"];
exports.LVAL_TYPES = LVAL_TYPES;
const TSENTITYNAME_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSEntityName"];
exports.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
const LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Literal"];
exports.LITERAL_TYPES = LITERAL_TYPES;
const IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Immutable"];
exports.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
const USERWHITESPACABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
exports.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
const METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Method"];
exports.METHOD_TYPES = METHOD_TYPES;
const OBJECTMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ObjectMember"];
exports.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
const PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Property"];
exports.PROPERTY_TYPES = PROPERTY_TYPES;
const UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UnaryLike"];
exports.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
const PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pattern"];
exports.PATTERN_TYPES = PATTERN_TYPES;
const CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Class"];
exports.CLASS_TYPES = CLASS_TYPES;
const MODULEDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ModuleDeclaration"];
exports.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
const EXPORTDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
exports.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
const MODULESPECIFIER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
exports.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
const PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Private"];
exports.PRIVATE_TYPES = PRIVATE_TYPES;
const FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Flow"];
exports.FLOW_TYPES = FLOW_TYPES;
const FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowType"];
exports.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
const FLOWBASEANNOTATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
exports.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
const FLOWDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
exports.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
const FLOWPREDICATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowPredicate"];
exports.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
const ENUMBODY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["EnumBody"];
exports.ENUMBODY_TYPES = ENUMBODY_TYPES;
const ENUMMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["EnumMember"];
exports.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
const JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS["JSX"];
exports.JSX_TYPES = JSX_TYPES;
const TSTYPEELEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSTypeElement"];
exports.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
const TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSType"];
exports.TSTYPE_TYPES = TSTYPE_TYPES;
const TSBASETYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSBaseType"];
exports.TSBASETYPE_TYPES = TSBASETYPE_TYPES;

/***/ }),

/***/ "./node_modules/@babel/types/lib/constants/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/types/lib/constants/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.ASSIGNMENT_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = void 0;
const STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
const FLATTENABLE_KEYS = ["body", "expressions"];
exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
const FOR_INIT_KEYS = ["left", "init"];
exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
const COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
exports.COMMENT_KEYS = COMMENT_KEYS;
const LOGICAL_OPERATORS = ["||", "&&", "??"];
exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
const UPDATE_OPERATORS = ["++", "--"];
exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
const BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
const COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
const BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
const NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
const BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS];
exports.BINARY_OPERATORS = BINARY_OPERATORS;
const ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map(op => op + "="), ...LOGICAL_OPERATORS.map(op => op + "=")];
exports.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
const STRING_UNARY_OPERATORS = ["typeof"];
exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
const UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
exports.UNARY_OPERATORS = UNARY_OPERATORS;
const INHERIT_KEYS = {
  optional: ["typeAnnotation", "typeParameters", "returnType"],
  force: ["start", "loc", "end"]
};
exports.INHERIT_KEYS = INHERIT_KEYS;
const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
const NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/ensureBlock.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/ensureBlock.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = ensureBlock;

var _toBlock = __webpack_require__(/*! ./toBlock */ "./node_modules/@babel/types/lib/converters/toBlock.js");

function ensureBlock(node, key = "body") {
  return node[key] = (0, _toBlock.default)(node[key], node);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = gatherSequenceExpressions;

var _getBindingIdentifiers = __webpack_require__(/*! ../retrievers/getBindingIdentifiers */ "./node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _generated2 = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

var _cloneNode = __webpack_require__(/*! ../clone/cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

function gatherSequenceExpressions(nodes, scope, declars) {
  const exprs = [];
  let ensureLastUndefined = true;

  for (const node of nodes) {
    if (!(0, _generated.isEmptyStatement)(node)) {
      ensureLastUndefined = false;
    }

    if ((0, _generated.isExpression)(node)) {
      exprs.push(node);
    } else if ((0, _generated.isExpressionStatement)(node)) {
      exprs.push(node.expression);
    } else if ((0, _generated.isVariableDeclaration)(node)) {
      if (node.kind !== "var") return;

      for (const declar of node.declarations) {
        const bindings = (0, _getBindingIdentifiers.default)(declar);

        for (const key of Object.keys(bindings)) {
          declars.push({
            kind: node.kind,
            id: (0, _cloneNode.default)(bindings[key])
          });
        }

        if (declar.init) {
          exprs.push((0, _generated2.assignmentExpression)("=", declar.id, declar.init));
        }
      }

      ensureLastUndefined = true;
    } else if ((0, _generated.isIfStatement)(node)) {
      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();
      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
      if (!consequent || !alternate) return;
      exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));
    } else if ((0, _generated.isBlockStatement)(node)) {
      const body = gatherSequenceExpressions(node.body, scope, declars);
      if (!body) return;
      exprs.push(body);
    } else if ((0, _generated.isEmptyStatement)(node)) {
      if (nodes.indexOf(node) === 0) {
        ensureLastUndefined = true;
      }
    } else {
      return;
    }
  }

  if (ensureLastUndefined) {
    exprs.push(scope.buildUndefinedNode());
  }

  if (exprs.length === 1) {
    return exprs[0];
  } else {
    return (0, _generated2.sequenceExpression)(exprs);
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toBindingIdentifierName.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toBindingIdentifierName.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = toBindingIdentifierName;

var _toIdentifier = __webpack_require__(/*! ./toIdentifier */ "./node_modules/@babel/types/lib/converters/toIdentifier.js");

function toBindingIdentifierName(name) {
  name = (0, _toIdentifier.default)(name);
  if (name === "eval" || name === "arguments") name = "_" + name;
  return name;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toBlock.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toBlock.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = toBlock;

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _generated2 = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

function toBlock(node, parent) {
  if ((0, _generated.isBlockStatement)(node)) {
    return node;
  }

  let blockNodes = [];

  if ((0, _generated.isEmptyStatement)(node)) {
    blockNodes = [];
  } else {
    if (!(0, _generated.isStatement)(node)) {
      if ((0, _generated.isFunction)(parent)) {
        node = (0, _generated2.returnStatement)(node);
      } else {
        node = (0, _generated2.expressionStatement)(node);
      }
    }

    blockNodes = [node];
  }

  return (0, _generated2.blockStatement)(blockNodes);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toComputedKey.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toComputedKey.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = toComputedKey;

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _generated2 = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

function toComputedKey(node, key = node.key || node.property) {
  if (!node.computed && (0, _generated.isIdentifier)(key)) key = (0, _generated2.stringLiteral)(key.name);
  return key;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toExpression.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toExpression.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _default = toExpression;
exports.default = _default;

function toExpression(node) {
  if ((0, _generated.isExpressionStatement)(node)) {
    node = node.expression;
  }

  if ((0, _generated.isExpression)(node)) {
    return node;
  }

  if ((0, _generated.isClass)(node)) {
    node.type = "ClassExpression";
  } else if ((0, _generated.isFunction)(node)) {
    node.type = "FunctionExpression";
  }

  if (!(0, _generated.isExpression)(node)) {
    throw new Error(`cannot turn ${node.type} to an expression`);
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toIdentifier.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toIdentifier.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = toIdentifier;

var _isValidIdentifier = __webpack_require__(/*! ../validators/isValidIdentifier */ "./node_modules/@babel/types/lib/validators/isValidIdentifier.js");

var _helperValidatorIdentifier = __webpack_require__(/*! @babel/helper-validator-identifier */ "./node_modules/@babel/helper-validator-identifier/lib/index.js");

function toIdentifier(input) {
  input = input + "";
  let name = "";

  for (const c of input) {
    name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
  }

  name = name.replace(/^[-0-9]+/, "");
  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
    return c ? c.toUpperCase() : "";
  });

  if (!(0, _isValidIdentifier.default)(name)) {
    name = `_${name}`;
  }

  return name || "_";
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toKeyAlias.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toKeyAlias.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = toKeyAlias;

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _cloneNode = __webpack_require__(/*! ../clone/cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

var _removePropertiesDeep = __webpack_require__(/*! ../modifications/removePropertiesDeep */ "./node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");

function toKeyAlias(node, key = node.key) {
  let alias;

  if (node.kind === "method") {
    return toKeyAlias.increment() + "";
  } else if ((0, _generated.isIdentifier)(key)) {
    alias = key.name;
  } else if ((0, _generated.isStringLiteral)(key)) {
    alias = JSON.stringify(key.value);
  } else {
    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));
  }

  if (node.computed) {
    alias = `[${alias}]`;
  }

  if (node.static) {
    alias = `static:${alias}`;
  }

  return alias;
}

toKeyAlias.uid = 0;

toKeyAlias.increment = function () {
  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
    return toKeyAlias.uid = 0;
  } else {
    return toKeyAlias.uid++;
  }
};

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toSequenceExpression.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toSequenceExpression.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = toSequenceExpression;

var _gatherSequenceExpressions = __webpack_require__(/*! ./gatherSequenceExpressions */ "./node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");

function toSequenceExpression(nodes, scope) {
  if (!(nodes != null && nodes.length)) return;
  const declars = [];
  const result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
  if (!result) return;

  for (const declar of declars) {
    scope.push(declar);
  }

  return result;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/toStatement.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/toStatement.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _generated2 = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

var _default = toStatement;
exports.default = _default;

function toStatement(node, ignore) {
  if ((0, _generated.isStatement)(node)) {
    return node;
  }

  let mustHaveId = false;
  let newType;

  if ((0, _generated.isClass)(node)) {
    mustHaveId = true;
    newType = "ClassDeclaration";
  } else if ((0, _generated.isFunction)(node)) {
    mustHaveId = true;
    newType = "FunctionDeclaration";
  } else if ((0, _generated.isAssignmentExpression)(node)) {
    return (0, _generated2.expressionStatement)(node);
  }

  if (mustHaveId && !node.id) {
    newType = false;
  }

  if (!newType) {
    if (ignore) {
      return false;
    } else {
      throw new Error(`cannot turn ${node.type} to a statement`);
    }
  }

  node.type = newType;
  return node;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/converters/valueToNode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/converters/valueToNode.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _isValidIdentifier = __webpack_require__(/*! ../validators/isValidIdentifier */ "./node_modules/@babel/types/lib/validators/isValidIdentifier.js");

var _generated = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

var _default = valueToNode;
exports.default = _default;
const objectToString = Function.call.bind(Object.prototype.toString);

function isRegExp(value) {
  return objectToString(value) === "[object RegExp]";
}

function isPlainObject(value) {
  if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") {
    return false;
  }

  const proto = Object.getPrototypeOf(value);
  return proto === null || Object.getPrototypeOf(proto) === null;
}

function valueToNode(value) {
  if (value === undefined) {
    return (0, _generated.identifier)("undefined");
  }

  if (value === true || value === false) {
    return (0, _generated.booleanLiteral)(value);
  }

  if (value === null) {
    return (0, _generated.nullLiteral)();
  }

  if (typeof value === "string") {
    return (0, _generated.stringLiteral)(value);
  }

  if (typeof value === "number") {
    let result;

    if (Number.isFinite(value)) {
      result = (0, _generated.numericLiteral)(Math.abs(value));
    } else {
      let numerator;

      if (Number.isNaN(value)) {
        numerator = (0, _generated.numericLiteral)(0);
      } else {
        numerator = (0, _generated.numericLiteral)(1);
      }

      result = (0, _generated.binaryExpression)("/", numerator, (0, _generated.numericLiteral)(0));
    }

    if (value < 0 || Object.is(value, -0)) {
      result = (0, _generated.unaryExpression)("-", result);
    }

    return result;
  }

  if (isRegExp(value)) {
    const pattern = value.source;
    const flags = value.toString().match(/\/([a-z]+|)$/)[1];
    return (0, _generated.regExpLiteral)(pattern, flags);
  }

  if (Array.isArray(value)) {
    return (0, _generated.arrayExpression)(value.map(valueToNode));
  }

  if (isPlainObject(value)) {
    const props = [];

    for (const key of Object.keys(value)) {
      let nodeKey;

      if ((0, _isValidIdentifier.default)(key)) {
        nodeKey = (0, _generated.identifier)(key);
      } else {
        nodeKey = (0, _generated.stringLiteral)(key);
      }

      props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));
    }

    return (0, _generated.objectExpression)(props);
  }

  throw new Error("don't know how to turn this value into a node");
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/core.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/core.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.classMethodOrDeclareMethodCommon = exports.classMethodOrPropertyCommon = exports.patternLikeCommon = exports.functionDeclarationCommon = exports.functionTypeAnnotationCommon = exports.functionCommon = void 0;

var _is = __webpack_require__(/*! ../validators/is */ "./node_modules/@babel/types/lib/validators/is.js");

var _isValidIdentifier = __webpack_require__(/*! ../validators/isValidIdentifier */ "./node_modules/@babel/types/lib/validators/isValidIdentifier.js");

var _helperValidatorIdentifier = __webpack_require__(/*! @babel/helper-validator-identifier */ "./node_modules/@babel/helper-validator-identifier/lib/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/@babel/types/lib/constants/index.js");

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

(0, _utils.default)("ArrayExpression", {
  fields: {
    elements: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined
    }
  },
  visitor: ["elements"],
  aliases: ["Expression"]
});
(0, _utils.default)("AssignmentExpression", {
  fields: {
    operator: {
      validate: function () {
        if (!process.env.BABEL_TYPES_8_BREAKING) {
          return (0, _utils.assertValueType)("string");
        }

        const identifier = (0, _utils.assertOneOf)(..._constants.ASSIGNMENT_OPERATORS);
        const pattern = (0, _utils.assertOneOf)("=");
        return function (node, key, val) {
          const validator = (0, _is.default)("Pattern", node.left) ? pattern : identifier;
          validator(node, key, val);
        };
      }()
    },
    left: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern")
    },
    right: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  },
  builder: ["operator", "left", "right"],
  visitor: ["left", "right"],
  aliases: ["Expression"]
});
(0, _utils.default)("BinaryExpression", {
  builder: ["operator", "left", "right"],
  fields: {
    operator: {
      validate: (0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS)
    },
    left: {
      validate: function () {
        const expression = (0, _utils.assertNodeType)("Expression");
        const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");

        const validator = function (node, key, val) {
          const validator = node.operator === "in" ? inOp : expression;
          validator(node, key, val);
        };

        validator.oneOfNodeTypes = ["Expression", "PrivateName"];
        return validator;
      }()
    },
    right: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  },
  visitor: ["left", "right"],
  aliases: ["Binary", "Expression"]
});
(0, _utils.default)("InterpreterDirective", {
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("string")
    }
  }
});
(0, _utils.default)("Directive", {
  visitor: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertNodeType)("DirectiveLiteral")
    }
  }
});
(0, _utils.default)("DirectiveLiteral", {
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("string")
    }
  }
});
(0, _utils.default)("BlockStatement", {
  builder: ["body", "directives"],
  visitor: ["directives", "body"],
  fields: {
    directives: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
      default: []
    },
    body: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
    }
  },
  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
});
(0, _utils.default)("BreakStatement", {
  visitor: ["label"],
  fields: {
    label: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    }
  },
  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
});
(0, _utils.default)("CallExpression", {
  visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
  builder: ["callee", "arguments"],
  aliases: ["Expression"],
  fields: Object.assign({
    callee: {
      validate: (0, _utils.assertNodeType)("Expression", "V8IntrinsicIdentifier")
    },
    arguments: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
    }
  }, !process.env.BABEL_TYPES_8_BREAKING ? {
    optional: {
      validate: (0, _utils.assertOneOf)(true, false),
      optional: true
    }
  } : {}, {
    typeArguments: {
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
      optional: true
    }
  })
});
(0, _utils.default)("CatchClause", {
  visitor: ["param", "body"],
  fields: {
    param: {
      validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
      optional: true
    },
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  },
  aliases: ["Scopable", "BlockParent"]
});
(0, _utils.default)("ConditionalExpression", {
  visitor: ["test", "consequent", "alternate"],
  fields: {
    test: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    consequent: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    alternate: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  },
  aliases: ["Expression", "Conditional"]
});
(0, _utils.default)("ContinueStatement", {
  visitor: ["label"],
  fields: {
    label: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    }
  },
  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
});
(0, _utils.default)("DebuggerStatement", {
  aliases: ["Statement"]
});
(0, _utils.default)("DoWhileStatement", {
  visitor: ["test", "body"],
  fields: {
    test: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    }
  },
  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
});
(0, _utils.default)("EmptyStatement", {
  aliases: ["Statement"]
});
(0, _utils.default)("ExpressionStatement", {
  visitor: ["expression"],
  fields: {
    expression: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  },
  aliases: ["Statement", "ExpressionWrapper"]
});
(0, _utils.default)("File", {
  builder: ["program", "comments", "tokens"],
  visitor: ["program"],
  fields: {
    program: {
      validate: (0, _utils.assertNodeType)("Program")
    },
    comments: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {}, {
        each: {
          oneOfNodeTypes: ["CommentBlock", "CommentLine"]
        }
      }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),
      optional: true
    },
    tokens: {
      validate: (0, _utils.assertEach)(Object.assign(() => {}, {
        type: "any"
      })),
      optional: true
    }
  }
});
(0, _utils.default)("ForInStatement", {
  visitor: ["left", "right", "body"],
  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
  fields: {
    left: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern")
    },
    right: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    }
  }
});
(0, _utils.default)("ForStatement", {
  visitor: ["init", "test", "update", "body"],
  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
  fields: {
    init: {
      validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
      optional: true
    },
    test: {
      validate: (0, _utils.assertNodeType)("Expression"),
      optional: true
    },
    update: {
      validate: (0, _utils.assertNodeType)("Expression"),
      optional: true
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    }
  }
});
const functionCommon = {
  params: {
    validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement")))
  },
  generator: {
    default: false
  },
  async: {
    default: false
  }
};
exports.functionCommon = functionCommon;
const functionTypeAnnotationCommon = {
  returnType: {
    validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
    optional: true
  },
  typeParameters: {
    validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
    optional: true
  }
};
exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
const functionDeclarationCommon = Object.assign({}, functionCommon, {
  declare: {
    validate: (0, _utils.assertValueType)("boolean"),
    optional: true
  },
  id: {
    validate: (0, _utils.assertNodeType)("Identifier"),
    optional: true
  }
});
exports.functionDeclarationCommon = functionDeclarationCommon;
(0, _utils.default)("FunctionDeclaration", {
  builder: ["id", "params", "body", "generator", "async"],
  visitor: ["id", "params", "body", "returnType", "typeParameters"],
  fields: Object.assign({}, functionDeclarationCommon, functionTypeAnnotationCommon, {
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  }),
  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
  validate: function () {
    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};
    const identifier = (0, _utils.assertNodeType)("Identifier");
    return function (parent, key, node) {
      if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
        identifier(node, "id", node.id);
      }
    };
  }()
});
(0, _utils.default)("FunctionExpression", {
  inherits: "FunctionDeclaration",
  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
  fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
    id: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    },
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  })
});
const patternLikeCommon = {
  typeAnnotation: {
    validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
    optional: true
  },
  decorators: {
    validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator")))
  }
};
exports.patternLikeCommon = patternLikeCommon;
(0, _utils.default)("Identifier", {
  builder: ["name"],
  visitor: ["typeAnnotation", "decorators"],
  aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
  fields: Object.assign({}, patternLikeCommon, {
    name: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (!(0, _isValidIdentifier.default)(val, false)) {
          throw new TypeError(`"${val}" is not a valid identifier name`);
        }
      }, {
        type: "string"
      }))
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    }
  }),

  validate(parent, key, node) {
    if (!process.env.BABEL_TYPES_8_BREAKING) return;
    const match = /\.(\w+)$/.exec(key);
    if (!match) return;
    const [, parentKey] = match;
    const nonComp = {
      computed: false
    };

    if (parentKey === "property") {
      if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
      if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
    } else if (parentKey === "key") {
      if ((0, _is.default)("Property", parent, nonComp)) return;
      if ((0, _is.default)("Method", parent, nonComp)) return;
    } else if (parentKey === "exported") {
      if ((0, _is.default)("ExportSpecifier", parent)) return;
    } else if (parentKey === "imported") {
      if ((0, _is.default)("ImportSpecifier", parent, {
        imported: node
      })) return;
    } else if (parentKey === "meta") {
      if ((0, _is.default)("MetaProperty", parent, {
        meta: node
      })) return;
    }

    if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== "this") {
      throw new TypeError(`"${node.name}" is not a valid identifier`);
    }
  }

});
(0, _utils.default)("IfStatement", {
  visitor: ["test", "consequent", "alternate"],
  aliases: ["Statement", "Conditional"],
  fields: {
    test: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    consequent: {
      validate: (0, _utils.assertNodeType)("Statement")
    },
    alternate: {
      optional: true,
      validate: (0, _utils.assertNodeType)("Statement")
    }
  }
});
(0, _utils.default)("LabeledStatement", {
  visitor: ["label", "body"],
  aliases: ["Statement"],
  fields: {
    label: {
      validate: (0, _utils.assertNodeType)("Identifier")
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    }
  }
});
(0, _utils.default)("StringLiteral", {
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("string")
    }
  },
  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
});
(0, _utils.default)("NumericLiteral", {
  builder: ["value"],
  deprecatedAlias: "NumberLiteral",
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("number")
    }
  },
  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
});
(0, _utils.default)("NullLiteral", {
  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
});
(0, _utils.default)("BooleanLiteral", {
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("boolean")
    }
  },
  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
});
(0, _utils.default)("RegExpLiteral", {
  builder: ["pattern", "flags"],
  deprecatedAlias: "RegexLiteral",
  aliases: ["Expression", "Pureish", "Literal"],
  fields: {
    pattern: {
      validate: (0, _utils.assertValueType)("string")
    },
    flags: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        const invalid = /[^gimsuy]/.exec(val);

        if (invalid) {
          throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
        }
      }, {
        type: "string"
      })),
      default: ""
    }
  }
});
(0, _utils.default)("LogicalExpression", {
  builder: ["operator", "left", "right"],
  visitor: ["left", "right"],
  aliases: ["Binary", "Expression"],
  fields: {
    operator: {
      validate: (0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS)
    },
    left: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    right: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("MemberExpression", {
  builder: ["object", "property", "computed", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : [])],
  visitor: ["object", "property"],
  aliases: ["Expression", "LVal"],
  fields: Object.assign({
    object: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    property: {
      validate: function () {
        const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");
        const computed = (0, _utils.assertNodeType)("Expression");

        const validator = function (node, key, val) {
          const validator = node.computed ? computed : normal;
          validator(node, key, val);
        };

        validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
        return validator;
      }()
    },
    computed: {
      default: false
    }
  }, !process.env.BABEL_TYPES_8_BREAKING ? {
    optional: {
      validate: (0, _utils.assertOneOf)(true, false),
      optional: true
    }
  } : {})
});
(0, _utils.default)("NewExpression", {
  inherits: "CallExpression"
});
(0, _utils.default)("Program", {
  visitor: ["directives", "body"],
  builder: ["body", "directives", "sourceType", "interpreter"],
  fields: {
    sourceFile: {
      validate: (0, _utils.assertValueType)("string")
    },
    sourceType: {
      validate: (0, _utils.assertOneOf)("script", "module"),
      default: "script"
    },
    interpreter: {
      validate: (0, _utils.assertNodeType)("InterpreterDirective"),
      default: null,
      optional: true
    },
    directives: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
      default: []
    },
    body: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
    }
  },
  aliases: ["Scopable", "BlockParent", "Block"]
});
(0, _utils.default)("ObjectExpression", {
  visitor: ["properties"],
  aliases: ["Expression"],
  fields: {
    properties: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement")))
    }
  }
});
(0, _utils.default)("ObjectMethod", {
  builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
  fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
    kind: Object.assign({
      validate: (0, _utils.assertOneOf)("method", "get", "set")
    }, !process.env.BABEL_TYPES_8_BREAKING ? {
      default: "method"
    } : {}),
    computed: {
      default: false
    },
    key: {
      validate: function () {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
        const computed = (0, _utils.assertNodeType)("Expression");

        const validator = function (node, key, val) {
          const validator = node.computed ? computed : normal;
          validator(node, key, val);
        };

        validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral"];
        return validator;
      }()
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    },
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  }),
  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
});
(0, _utils.default)("ObjectProperty", {
  builder: ["key", "value", "computed", "shorthand", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : [])],
  fields: {
    computed: {
      default: false
    },
    key: {
      validate: function () {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
        const computed = (0, _utils.assertNodeType)("Expression");

        const validator = function (node, key, val) {
          const validator = node.computed ? computed : normal;
          validator(node, key, val);
        };

        validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral"];
        return validator;
      }()
    },
    value: {
      validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
    },
    shorthand: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (val && node.computed) {
          throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
        }
      }, {
        type: "boolean"
      }), function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (val && !(0, _is.default)("Identifier", node.key)) {
          throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
        }
      }),
      default: false
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  },
  visitor: ["key", "value", "decorators"],
  aliases: ["UserWhitespacable", "Property", "ObjectMember"],
  validate: function () {
    const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern");
    const expression = (0, _utils.assertNodeType)("Expression");
    return function (parent, key, node) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      const validator = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;
      validator(node, "value", node.value);
    };
  }()
});
(0, _utils.default)("RestElement", {
  visitor: ["argument", "typeAnnotation"],
  builder: ["argument"],
  aliases: ["LVal", "PatternLike"],
  deprecatedAlias: "RestProperty",
  fields: Object.assign({}, patternLikeCommon, {
    argument: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "Pattern", "MemberExpression")
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    }
  }),

  validate(parent, key) {
    if (!process.env.BABEL_TYPES_8_BREAKING) return;
    const match = /(\w+)\[(\d+)\]/.exec(key);
    if (!match) throw new Error("Internal Babel error: malformed key.");
    const [, listKey, index] = match;

    if (parent[listKey].length > index + 1) {
      throw new TypeError(`RestElement must be last element of ${listKey}`);
    }
  }

});
(0, _utils.default)("ReturnStatement", {
  visitor: ["argument"],
  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
  fields: {
    argument: {
      validate: (0, _utils.assertNodeType)("Expression"),
      optional: true
    }
  }
});
(0, _utils.default)("SequenceExpression", {
  visitor: ["expressions"],
  fields: {
    expressions: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression")))
    }
  },
  aliases: ["Expression"]
});
(0, _utils.default)("ParenthesizedExpression", {
  visitor: ["expression"],
  aliases: ["Expression", "ExpressionWrapper"],
  fields: {
    expression: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("SwitchCase", {
  visitor: ["test", "consequent"],
  fields: {
    test: {
      validate: (0, _utils.assertNodeType)("Expression"),
      optional: true
    },
    consequent: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
    }
  }
});
(0, _utils.default)("SwitchStatement", {
  visitor: ["discriminant", "cases"],
  aliases: ["Statement", "BlockParent", "Scopable"],
  fields: {
    discriminant: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    cases: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase")))
    }
  }
});
(0, _utils.default)("ThisExpression", {
  aliases: ["Expression"]
});
(0, _utils.default)("ThrowStatement", {
  visitor: ["argument"],
  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
  fields: {
    argument: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("TryStatement", {
  visitor: ["block", "handler", "finalizer"],
  aliases: ["Statement"],
  fields: {
    block: {
      validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function (node) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (!node.handler && !node.finalizer) {
          throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }
      }, {
        oneOfNodeTypes: ["BlockStatement"]
      }))
    },
    handler: {
      optional: true,
      validate: (0, _utils.assertNodeType)("CatchClause")
    },
    finalizer: {
      optional: true,
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  }
});
(0, _utils.default)("UnaryExpression", {
  builder: ["operator", "argument", "prefix"],
  fields: {
    prefix: {
      default: true
    },
    argument: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    operator: {
      validate: (0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS)
    }
  },
  visitor: ["argument"],
  aliases: ["UnaryLike", "Expression"]
});
(0, _utils.default)("UpdateExpression", {
  builder: ["operator", "argument", "prefix"],
  fields: {
    prefix: {
      default: false
    },
    argument: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")
    },
    operator: {
      validate: (0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS)
    }
  },
  visitor: ["argument"],
  aliases: ["Expression"]
});
(0, _utils.default)("VariableDeclaration", {
  builder: ["kind", "declarations"],
  visitor: ["declarations"],
  aliases: ["Statement", "Declaration"],
  fields: {
    declare: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    kind: {
      validate: (0, _utils.assertOneOf)("var", "let", "const")
    },
    declarations: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator")))
    }
  },

  validate(parent, key, node) {
    if (!process.env.BABEL_TYPES_8_BREAKING) return;
    if (!(0, _is.default)("ForXStatement", parent, {
      left: node
    })) return;

    if (node.declarations.length !== 1) {
      throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
    }
  }

});
(0, _utils.default)("VariableDeclarator", {
  visitor: ["id", "init"],
  fields: {
    id: {
      validate: function () {
        if (!process.env.BABEL_TYPES_8_BREAKING) {
          return (0, _utils.assertNodeType)("LVal");
        }

        const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern");
        const without = (0, _utils.assertNodeType)("Identifier");
        return function (node, key, val) {
          const validator = node.init ? normal : without;
          validator(node, key, val);
        };
      }()
    },
    definite: {
      optional: true,
      validate: (0, _utils.assertValueType)("boolean")
    },
    init: {
      optional: true,
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("WhileStatement", {
  visitor: ["test", "body"],
  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
  fields: {
    test: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    }
  }
});
(0, _utils.default)("WithStatement", {
  visitor: ["object", "body"],
  aliases: ["Statement"],
  fields: {
    object: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    }
  }
});
(0, _utils.default)("AssignmentPattern", {
  visitor: ["left", "right", "decorators"],
  builder: ["left", "right"],
  aliases: ["Pattern", "PatternLike", "LVal"],
  fields: Object.assign({}, patternLikeCommon, {
    left: {
      validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression")
    },
    right: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  })
});
(0, _utils.default)("ArrayPattern", {
  visitor: ["elements", "typeAnnotation"],
  builder: ["elements"],
  aliases: ["Pattern", "PatternLike", "LVal"],
  fields: Object.assign({}, patternLikeCommon, {
    elements: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike")))
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    }
  })
});
(0, _utils.default)("ArrowFunctionExpression", {
  builder: ["params", "body", "async"],
  visitor: ["params", "body", "returnType", "typeParameters"],
  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
  fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
    expression: {
      validate: (0, _utils.assertValueType)("boolean")
    },
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")
    }
  })
});
(0, _utils.default)("ClassBody", {
  visitor: ["body"],
  fields: {
    body: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "TSDeclareMethod", "TSIndexSignature")))
    }
  }
});
(0, _utils.default)("ClassExpression", {
  builder: ["id", "superClass", "body", "decorators"],
  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
  aliases: ["Scopable", "Class", "Expression"],
  fields: {
    id: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: true
    },
    body: {
      validate: (0, _utils.assertNodeType)("ClassBody")
    },
    superClass: {
      optional: true,
      validate: (0, _utils.assertNodeType)("Expression")
    },
    superTypeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
      optional: true
    },
    implements: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    },
    mixins: {
      validate: (0, _utils.assertNodeType)("InterfaceExtends"),
      optional: true
    }
  }
});
(0, _utils.default)("ClassDeclaration", {
  inherits: "ClassExpression",
  aliases: ["Scopable", "Class", "Statement", "Declaration"],
  fields: {
    id: {
      validate: (0, _utils.assertNodeType)("Identifier")
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: true
    },
    body: {
      validate: (0, _utils.assertNodeType)("ClassBody")
    },
    superClass: {
      optional: true,
      validate: (0, _utils.assertNodeType)("Expression")
    },
    superTypeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
      optional: true
    },
    implements: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    },
    mixins: {
      validate: (0, _utils.assertNodeType)("InterfaceExtends"),
      optional: true
    },
    declare: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    abstract: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    }
  },
  validate: function () {
    const identifier = (0, _utils.assertNodeType)("Identifier");
    return function (parent, key, node) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;

      if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
        identifier(node, "id", node.id);
      }
    };
  }()
});
(0, _utils.default)("ExportAllDeclaration", {
  visitor: ["source"],
  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
  fields: {
    source: {
      validate: (0, _utils.assertNodeType)("StringLiteral")
    },
    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")),
    assertions: {
      optional: true,
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
    }
  }
});
(0, _utils.default)("ExportDefaultDeclaration", {
  visitor: ["declaration"],
  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
  fields: {
    declaration: {
      validate: (0, _utils.assertNodeType)("FunctionDeclaration", "TSDeclareFunction", "ClassDeclaration", "Expression")
    },
    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
  }
});
(0, _utils.default)("ExportNamedDeclaration", {
  visitor: ["declaration", "specifiers", "source"],
  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
  fields: {
    declaration: {
      optional: true,
      validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (val && node.specifiers.length) {
          throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
        }
      }, {
        oneOfNodeTypes: ["Declaration"]
      }), function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (val && node.source) {
          throw new TypeError("Cannot export a declaration from a source");
        }
      })
    },
    assertions: {
      optional: true,
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
    },
    specifiers: {
      default: [],
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function () {
        const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
        const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
        if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
        return function (node, key, val) {
          const validator = node.source ? sourced : sourceless;
          validator(node, key, val);
        };
      }()))
    },
    source: {
      validate: (0, _utils.assertNodeType)("StringLiteral"),
      optional: true
    },
    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
  }
});
(0, _utils.default)("ExportSpecifier", {
  visitor: ["local", "exported"],
  aliases: ["ModuleSpecifier"],
  fields: {
    local: {
      validate: (0, _utils.assertNodeType)("Identifier")
    },
    exported: {
      validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
    }
  }
});
(0, _utils.default)("ForOfStatement", {
  visitor: ["left", "right", "body"],
  builder: ["left", "right", "body", "await"],
  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
  fields: {
    left: {
      validate: function () {
        if (!process.env.BABEL_TYPES_8_BREAKING) {
          return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
        }

        const declaration = (0, _utils.assertNodeType)("VariableDeclaration");
        const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern");
        return function (node, key, val) {
          if ((0, _is.default)("VariableDeclaration", val)) {
            declaration(node, key, val);
          } else {
            lval(node, key, val);
          }
        };
      }()
    },
    right: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    body: {
      validate: (0, _utils.assertNodeType)("Statement")
    },
    await: {
      default: false
    }
  }
});
(0, _utils.default)("ImportDeclaration", {
  visitor: ["specifiers", "source"],
  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
  fields: {
    assertions: {
      optional: true,
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
    },
    specifiers: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
    },
    source: {
      validate: (0, _utils.assertNodeType)("StringLiteral")
    },
    importKind: {
      validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
      optional: true
    }
  }
});
(0, _utils.default)("ImportDefaultSpecifier", {
  visitor: ["local"],
  aliases: ["ModuleSpecifier"],
  fields: {
    local: {
      validate: (0, _utils.assertNodeType)("Identifier")
    }
  }
});
(0, _utils.default)("ImportNamespaceSpecifier", {
  visitor: ["local"],
  aliases: ["ModuleSpecifier"],
  fields: {
    local: {
      validate: (0, _utils.assertNodeType)("Identifier")
    }
  }
});
(0, _utils.default)("ImportSpecifier", {
  visitor: ["local", "imported"],
  aliases: ["ModuleSpecifier"],
  fields: {
    local: {
      validate: (0, _utils.assertNodeType)("Identifier")
    },
    imported: {
      validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
    },
    importKind: {
      validate: (0, _utils.assertOneOf)("type", "typeof"),
      optional: true
    }
  }
});
(0, _utils.default)("MetaProperty", {
  visitor: ["meta", "property"],
  aliases: ["Expression"],
  fields: {
    meta: {
      validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        let property;

        switch (val.name) {
          case "function":
            property = "sent";
            break;

          case "new":
            property = "target";
            break;

          case "import":
            property = "meta";
            break;
        }

        if (!(0, _is.default)("Identifier", node.property, {
          name: property
        })) {
          throw new TypeError("Unrecognised MetaProperty");
        }
      }, {
        oneOfNodeTypes: ["Identifier"]
      }))
    },
    property: {
      validate: (0, _utils.assertNodeType)("Identifier")
    }
  }
});
const classMethodOrPropertyCommon = {
  abstract: {
    validate: (0, _utils.assertValueType)("boolean"),
    optional: true
  },
  accessibility: {
    validate: (0, _utils.assertOneOf)("public", "private", "protected"),
    optional: true
  },
  static: {
    default: false
  },
  override: {
    default: false
  },
  computed: {
    default: false
  },
  optional: {
    validate: (0, _utils.assertValueType)("boolean"),
    optional: true
  },
  key: {
    validate: (0, _utils.chain)(function () {
      const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
      const computed = (0, _utils.assertNodeType)("Expression");
      return function (node, key, val) {
        const validator = node.computed ? computed : normal;
        validator(node, key, val);
      };
    }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "Expression"))
  }
};
exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
const classMethodOrDeclareMethodCommon = Object.assign({}, functionCommon, classMethodOrPropertyCommon, {
  params: {
    validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty")))
  },
  kind: {
    validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
    default: "method"
  },
  access: {
    validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
    optional: true
  },
  decorators: {
    validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
    optional: true
  }
});
exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
(0, _utils.default)("ClassMethod", {
  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
  builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
  fields: Object.assign({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, {
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  })
});
(0, _utils.default)("ObjectPattern", {
  visitor: ["properties", "typeAnnotation", "decorators"],
  builder: ["properties"],
  aliases: ["Pattern", "PatternLike", "LVal"],
  fields: Object.assign({}, patternLikeCommon, {
    properties: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty")))
    }
  })
});
(0, _utils.default)("SpreadElement", {
  visitor: ["argument"],
  aliases: ["UnaryLike"],
  deprecatedAlias: "SpreadProperty",
  fields: {
    argument: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("Super", {
  aliases: ["Expression"]
});
(0, _utils.default)("TaggedTemplateExpression", {
  visitor: ["tag", "quasi", "typeParameters"],
  builder: ["tag", "quasi"],
  aliases: ["Expression"],
  fields: {
    tag: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    quasi: {
      validate: (0, _utils.assertNodeType)("TemplateLiteral")
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
      optional: true
    }
  }
});
(0, _utils.default)("TemplateElement", {
  builder: ["value", "tail"],
  fields: {
    value: {
      validate: (0, _utils.assertShape)({
        raw: {
          validate: (0, _utils.assertValueType)("string")
        },
        cooked: {
          validate: (0, _utils.assertValueType)("string"),
          optional: true
        }
      })
    },
    tail: {
      default: false
    }
  }
});
(0, _utils.default)("TemplateLiteral", {
  visitor: ["quasis", "expressions"],
  aliases: ["Expression", "Literal"],
  fields: {
    quasis: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement")))
    },
    expressions: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function (node, key, val) {
        if (node.quasis.length !== val.length + 1) {
          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);
        }
      })
    }
  }
});
(0, _utils.default)("YieldExpression", {
  builder: ["argument", "delegate"],
  visitor: ["argument"],
  aliases: ["Expression", "Terminatorless"],
  fields: {
    delegate: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function (node, key, val) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;

        if (val && !node.argument) {
          throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }
      }, {
        type: "boolean"
      })),
      default: false
    },
    argument: {
      optional: true,
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("AwaitExpression", {
  builder: ["argument"],
  visitor: ["argument"],
  aliases: ["Expression", "Terminatorless"],
  fields: {
    argument: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("Import", {
  aliases: ["Expression"]
});
(0, _utils.default)("BigIntLiteral", {
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("string")
    }
  },
  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
});
(0, _utils.default)("ExportNamespaceSpecifier", {
  visitor: ["exported"],
  aliases: ["ModuleSpecifier"],
  fields: {
    exported: {
      validate: (0, _utils.assertNodeType)("Identifier")
    }
  }
});
(0, _utils.default)("OptionalMemberExpression", {
  builder: ["object", "property", "computed", "optional"],
  visitor: ["object", "property"],
  aliases: ["Expression"],
  fields: {
    object: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    property: {
      validate: function () {
        const normal = (0, _utils.assertNodeType)("Identifier");
        const computed = (0, _utils.assertNodeType)("Expression");

        const validator = function (node, key, val) {
          const validator = node.computed ? computed : normal;
          validator(node, key, val);
        };

        validator.oneOfNodeTypes = ["Expression", "Identifier"];
        return validator;
      }()
    },
    computed: {
      default: false
    },
    optional: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
    }
  }
});
(0, _utils.default)("OptionalCallExpression", {
  visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
  builder: ["callee", "arguments", "optional"],
  aliases: ["Expression"],
  fields: {
    callee: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    arguments: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
    },
    optional: {
      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
    },
    typeArguments: {
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
      optional: true
    }
  }
});
(0, _utils.default)("ClassProperty", {
  visitor: ["key", "value", "typeAnnotation", "decorators"],
  builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
  aliases: ["Property"],
  fields: Object.assign({}, classMethodOrPropertyCommon, {
    value: {
      validate: (0, _utils.assertNodeType)("Expression"),
      optional: true
    },
    definite: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    typeAnnotation: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    },
    readonly: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    declare: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    variance: {
      validate: (0, _utils.assertNodeType)("Variance"),
      optional: true
    }
  })
});
(0, _utils.default)("ClassPrivateProperty", {
  visitor: ["key", "value", "decorators", "typeAnnotation"],
  builder: ["key", "value", "decorators", "static"],
  aliases: ["Property", "Private"],
  fields: {
    key: {
      validate: (0, _utils.assertNodeType)("PrivateName")
    },
    value: {
      validate: (0, _utils.assertNodeType)("Expression"),
      optional: true
    },
    typeAnnotation: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    },
    readonly: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    definite: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    variance: {
      validate: (0, _utils.assertNodeType)("Variance"),
      optional: true
    }
  }
});
(0, _utils.default)("ClassPrivateMethod", {
  builder: ["kind", "key", "params", "body", "static"],
  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
  fields: Object.assign({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, {
    key: {
      validate: (0, _utils.assertNodeType)("PrivateName")
    },
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    }
  })
});
(0, _utils.default)("PrivateName", {
  visitor: ["id"],
  aliases: ["Private"],
  fields: {
    id: {
      validate: (0, _utils.assertNodeType)("Identifier")
    }
  }
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/experimental.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/experimental.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");


var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

(0, _utils.default)("ArgumentPlaceholder", {});
(0, _utils.default)("BindExpression", {
  visitor: ["object", "callee"],
  aliases: ["Expression"],
  fields: !process.env.BABEL_TYPES_8_BREAKING ? {
    object: {
      validate: Object.assign(() => {}, {
        oneOfNodeTypes: ["Expression"]
      })
    },
    callee: {
      validate: Object.assign(() => {}, {
        oneOfNodeTypes: ["Expression"]
      })
    }
  } : {
    object: {
      validate: (0, _utils.assertNodeType)("Expression")
    },
    callee: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("ImportAttribute", {
  visitor: ["key", "value"],
  fields: {
    key: {
      validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
    },
    value: {
      validate: (0, _utils.assertNodeType)("StringLiteral")
    }
  }
});
(0, _utils.default)("Decorator", {
  visitor: ["expression"],
  fields: {
    expression: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("DoExpression", {
  visitor: ["body"],
  builder: ["body", "async"],
  aliases: ["Expression"],
  fields: {
    body: {
      validate: (0, _utils.assertNodeType)("BlockStatement")
    },
    async: {
      validate: (0, _utils.assertValueType)("boolean"),
      default: false
    }
  }
});
(0, _utils.default)("ExportDefaultSpecifier", {
  visitor: ["exported"],
  aliases: ["ModuleSpecifier"],
  fields: {
    exported: {
      validate: (0, _utils.assertNodeType)("Identifier")
    }
  }
});
(0, _utils.default)("RecordExpression", {
  visitor: ["properties"],
  aliases: ["Expression"],
  fields: {
    properties: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement")))
    }
  }
});
(0, _utils.default)("TupleExpression", {
  fields: {
    elements: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))),
      default: []
    }
  },
  visitor: ["elements"],
  aliases: ["Expression"]
});
(0, _utils.default)("DecimalLiteral", {
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("string")
    }
  },
  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
});
(0, _utils.default)("StaticBlock", {
  visitor: ["body"],
  fields: {
    body: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
    }
  },
  aliases: ["Scopable", "BlockParent"]
});
(0, _utils.default)("ModuleExpression", {
  visitor: ["body"],
  fields: {
    body: {
      validate: (0, _utils.assertNodeType)("Program")
    }
  },
  aliases: ["Expression"]
});
(0, _utils.default)("TopicReference", {
  aliases: ["Expression"]
});
(0, _utils.default)("PipelineTopicExpression", {
  builder: ["expression"],
  visitor: ["expression"],
  fields: {
    expression: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  },
  aliases: ["Expression"]
});
(0, _utils.default)("PipelineBareFunction", {
  builder: ["callee"],
  visitor: ["callee"],
  fields: {
    callee: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  },
  aliases: ["Expression"]
});
(0, _utils.default)("PipelinePrimaryTopicReference", {
  aliases: ["Expression"]
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/flow.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/flow.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

const defineInterfaceishType = (name, typeParameterType = "TypeParameterDeclaration") => {
  (0, _utils.default)(name, {
    builder: ["id", "typeParameters", "extends", "body"],
    visitor: ["id", "typeParameters", "extends", "mixins", "implements", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)(typeParameterType),
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")),
      body: (0, _utils.validateType)("ObjectTypeAnnotation")
    }
  });
};

(0, _utils.default)("AnyTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("ArrayTypeAnnotation", {
  visitor: ["elementType"],
  aliases: ["Flow", "FlowType"],
  fields: {
    elementType: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("BooleanTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("BooleanLiteralTypeAnnotation", {
  builder: ["value"],
  aliases: ["Flow", "FlowType"],
  fields: {
    value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("NullLiteralTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("ClassImplements", {
  visitor: ["id", "typeParameters"],
  aliases: ["Flow"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
  }
});
defineInterfaceishType("DeclareClass");
(0, _utils.default)("DeclareFunction", {
  visitor: ["id"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
  }
});
defineInterfaceishType("DeclareInterface");
(0, _utils.default)("DeclareModule", {
  builder: ["id", "body", "kind"],
  visitor: ["id", "body"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    body: (0, _utils.validateType)("BlockStatement"),
    kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
  }
});
(0, _utils.default)("DeclareModuleExports", {
  visitor: ["typeAnnotation"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
  }
});
(0, _utils.default)("DeclareTypeAlias", {
  visitor: ["id", "typeParameters", "right"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    right: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("DeclareOpaqueType", {
  visitor: ["id", "typeParameters", "supertype"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    supertype: (0, _utils.validateOptionalType)("FlowType"),
    impltype: (0, _utils.validateOptionalType)("FlowType")
  }
});
(0, _utils.default)("DeclareVariable", {
  visitor: ["id"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)("Identifier")
  }
});
(0, _utils.default)("DeclareExportDeclaration", {
  visitor: ["declaration", "specifiers", "source"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    declaration: (0, _utils.validateOptionalType)("Flow"),
    specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
    source: (0, _utils.validateOptionalType)("StringLiteral"),
    default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("DeclareExportAllDeclaration", {
  visitor: ["source"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    source: (0, _utils.validateType)("StringLiteral"),
    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
  }
});
(0, _utils.default)("DeclaredPredicate", {
  visitor: ["value"],
  aliases: ["Flow", "FlowPredicate"],
  fields: {
    value: (0, _utils.validateType)("Flow")
  }
});
(0, _utils.default)("ExistsTypeAnnotation", {
  aliases: ["Flow", "FlowType"]
});
(0, _utils.default)("FunctionTypeAnnotation", {
  visitor: ["typeParameters", "params", "rest", "returnType"],
  aliases: ["Flow", "FlowType"],
  fields: {
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")),
    rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
    this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
    returnType: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("FunctionTypeParam", {
  visitor: ["name", "typeAnnotation"],
  aliases: ["Flow"],
  fields: {
    name: (0, _utils.validateOptionalType)("Identifier"),
    typeAnnotation: (0, _utils.validateType)("FlowType"),
    optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("GenericTypeAnnotation", {
  visitor: ["id", "typeParameters"],
  aliases: ["Flow", "FlowType"],
  fields: {
    id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
  }
});
(0, _utils.default)("InferredPredicate", {
  aliases: ["Flow", "FlowPredicate"]
});
(0, _utils.default)("InterfaceExtends", {
  visitor: ["id", "typeParameters"],
  aliases: ["Flow"],
  fields: {
    id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
  }
});
defineInterfaceishType("InterfaceDeclaration");
(0, _utils.default)("InterfaceTypeAnnotation", {
  visitor: ["extends", "body"],
  aliases: ["Flow", "FlowType"],
  fields: {
    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
    body: (0, _utils.validateType)("ObjectTypeAnnotation")
  }
});
(0, _utils.default)("IntersectionTypeAnnotation", {
  visitor: ["types"],
  aliases: ["Flow", "FlowType"],
  fields: {
    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
  }
});
(0, _utils.default)("MixedTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("EmptyTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("NullableTypeAnnotation", {
  visitor: ["typeAnnotation"],
  aliases: ["Flow", "FlowType"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("NumberLiteralTypeAnnotation", {
  builder: ["value"],
  aliases: ["Flow", "FlowType"],
  fields: {
    value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
  }
});
(0, _utils.default)("NumberTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("ObjectTypeAnnotation", {
  visitor: ["properties", "indexers", "callProperties", "internalSlots"],
  aliases: ["Flow", "FlowType"],
  builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
  fields: {
    properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
    indexers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ObjectTypeIndexer")),
    callProperties: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ObjectTypeCallProperty")),
    internalSlots: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ObjectTypeInternalSlot")),
    exact: {
      validate: (0, _utils.assertValueType)("boolean"),
      default: false
    },
    inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("ObjectTypeInternalSlot", {
  visitor: ["id", "value", "optional", "static", "method"],
  aliases: ["Flow", "UserWhitespacable"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    value: (0, _utils.validateType)("FlowType"),
    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("ObjectTypeCallProperty", {
  visitor: ["value"],
  aliases: ["Flow", "UserWhitespacable"],
  fields: {
    value: (0, _utils.validateType)("FlowType"),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("ObjectTypeIndexer", {
  visitor: ["id", "key", "value", "variance"],
  aliases: ["Flow", "UserWhitespacable"],
  fields: {
    id: (0, _utils.validateOptionalType)("Identifier"),
    key: (0, _utils.validateType)("FlowType"),
    value: (0, _utils.validateType)("FlowType"),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    variance: (0, _utils.validateOptionalType)("Variance")
  }
});
(0, _utils.default)("ObjectTypeProperty", {
  visitor: ["key", "value", "variance"],
  aliases: ["Flow", "UserWhitespacable"],
  fields: {
    key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    value: (0, _utils.validateType)("FlowType"),
    kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    variance: (0, _utils.validateOptionalType)("Variance"),
    method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("ObjectTypeSpreadProperty", {
  visitor: ["argument"],
  aliases: ["Flow", "UserWhitespacable"],
  fields: {
    argument: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("OpaqueType", {
  visitor: ["id", "typeParameters", "supertype", "impltype"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    supertype: (0, _utils.validateOptionalType)("FlowType"),
    impltype: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("QualifiedTypeIdentifier", {
  visitor: ["id", "qualification"],
  aliases: ["Flow"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"])
  }
});
(0, _utils.default)("StringLiteralTypeAnnotation", {
  builder: ["value"],
  aliases: ["Flow", "FlowType"],
  fields: {
    value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
  }
});
(0, _utils.default)("StringTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("SymbolTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("ThisTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("TupleTypeAnnotation", {
  visitor: ["types"],
  aliases: ["Flow", "FlowType"],
  fields: {
    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
  }
});
(0, _utils.default)("TypeofTypeAnnotation", {
  visitor: ["argument"],
  aliases: ["Flow", "FlowType"],
  fields: {
    argument: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("TypeAlias", {
  visitor: ["id", "typeParameters", "right"],
  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    right: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("TypeAnnotation", {
  aliases: ["Flow"],
  visitor: ["typeAnnotation"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("TypeCastExpression", {
  visitor: ["expression", "typeAnnotation"],
  aliases: ["Flow", "ExpressionWrapper", "Expression"],
  fields: {
    expression: (0, _utils.validateType)("Expression"),
    typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
  }
});
(0, _utils.default)("TypeParameter", {
  aliases: ["Flow"],
  visitor: ["bound", "default", "variance"],
  fields: {
    name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
    bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
    default: (0, _utils.validateOptionalType)("FlowType"),
    variance: (0, _utils.validateOptionalType)("Variance")
  }
});
(0, _utils.default)("TypeParameterDeclaration", {
  aliases: ["Flow"],
  visitor: ["params"],
  fields: {
    params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
  }
});
(0, _utils.default)("TypeParameterInstantiation", {
  aliases: ["Flow"],
  visitor: ["params"],
  fields: {
    params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
  }
});
(0, _utils.default)("UnionTypeAnnotation", {
  visitor: ["types"],
  aliases: ["Flow", "FlowType"],
  fields: {
    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
  }
});
(0, _utils.default)("Variance", {
  aliases: ["Flow"],
  builder: ["kind"],
  fields: {
    kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
  }
});
(0, _utils.default)("VoidTypeAnnotation", {
  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
});
(0, _utils.default)("EnumDeclaration", {
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "body"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
  }
});
(0, _utils.default)("EnumBooleanBody", {
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: {
    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("EnumNumberBody", {
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: {
    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("EnumStringBody", {
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: {
    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("EnumSymbolBody", {
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: {
    members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});
(0, _utils.default)("EnumBooleanMember", {
  aliases: ["EnumMember"],
  visitor: ["id"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    init: (0, _utils.validateType)("BooleanLiteral")
  }
});
(0, _utils.default)("EnumNumberMember", {
  aliases: ["EnumMember"],
  visitor: ["id", "init"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    init: (0, _utils.validateType)("NumericLiteral")
  }
});
(0, _utils.default)("EnumStringMember", {
  aliases: ["EnumMember"],
  visitor: ["id", "init"],
  fields: {
    id: (0, _utils.validateType)("Identifier"),
    init: (0, _utils.validateType)("StringLiteral")
  }
});
(0, _utils.default)("EnumDefaultedMember", {
  aliases: ["EnumMember"],
  visitor: ["id"],
  fields: {
    id: (0, _utils.validateType)("Identifier")
  }
});
(0, _utils.default)("IndexedAccessType", {
  visitor: ["objectType", "indexType"],
  aliases: ["Flow", "FlowType"],
  fields: {
    objectType: (0, _utils.validateType)("FlowType"),
    indexType: (0, _utils.validateType)("FlowType")
  }
});
(0, _utils.default)("OptionalIndexedAccessType", {
  visitor: ["objectType", "indexType"],
  aliases: ["Flow", "FlowType"],
  fields: {
    objectType: (0, _utils.validateType)("FlowType"),
    indexType: (0, _utils.validateType)("FlowType"),
    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
  }
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "VISITOR_KEYS", ({
  enumerable: true,
  get: function () {
    return _utils.VISITOR_KEYS;
  }
}));
Object.defineProperty(exports, "ALIAS_KEYS", ({
  enumerable: true,
  get: function () {
    return _utils.ALIAS_KEYS;
  }
}));
Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", ({
  enumerable: true,
  get: function () {
    return _utils.FLIPPED_ALIAS_KEYS;
  }
}));
Object.defineProperty(exports, "NODE_FIELDS", ({
  enumerable: true,
  get: function () {
    return _utils.NODE_FIELDS;
  }
}));
Object.defineProperty(exports, "BUILDER_KEYS", ({
  enumerable: true,
  get: function () {
    return _utils.BUILDER_KEYS;
  }
}));
Object.defineProperty(exports, "DEPRECATED_KEYS", ({
  enumerable: true,
  get: function () {
    return _utils.DEPRECATED_KEYS;
  }
}));
Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", ({
  enumerable: true,
  get: function () {
    return _utils.NODE_PARENT_VALIDATIONS;
  }
}));
Object.defineProperty(exports, "PLACEHOLDERS", ({
  enumerable: true,
  get: function () {
    return _placeholders.PLACEHOLDERS;
  }
}));
Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", ({
  enumerable: true,
  get: function () {
    return _placeholders.PLACEHOLDERS_ALIAS;
  }
}));
Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", ({
  enumerable: true,
  get: function () {
    return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
  }
}));
exports.TYPES = void 0;

var _toFastProperties = __webpack_require__(/*! to-fast-properties */ "./node_modules/to-fast-properties/index.js");

__webpack_require__(/*! ./core */ "./node_modules/@babel/types/lib/definitions/core.js");

__webpack_require__(/*! ./flow */ "./node_modules/@babel/types/lib/definitions/flow.js");

__webpack_require__(/*! ./jsx */ "./node_modules/@babel/types/lib/definitions/jsx.js");

__webpack_require__(/*! ./misc */ "./node_modules/@babel/types/lib/definitions/misc.js");

__webpack_require__(/*! ./experimental */ "./node_modules/@babel/types/lib/definitions/experimental.js");

__webpack_require__(/*! ./typescript */ "./node_modules/@babel/types/lib/definitions/typescript.js");

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

var _placeholders = __webpack_require__(/*! ./placeholders */ "./node_modules/@babel/types/lib/definitions/placeholders.js");

_toFastProperties(_utils.VISITOR_KEYS);

_toFastProperties(_utils.ALIAS_KEYS);

_toFastProperties(_utils.FLIPPED_ALIAS_KEYS);

_toFastProperties(_utils.NODE_FIELDS);

_toFastProperties(_utils.BUILDER_KEYS);

_toFastProperties(_utils.DEPRECATED_KEYS);

_toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);

_toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);

const TYPES = Object.keys(_utils.VISITOR_KEYS).concat(Object.keys(_utils.FLIPPED_ALIAS_KEYS)).concat(Object.keys(_utils.DEPRECATED_KEYS));
exports.TYPES = TYPES;

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/jsx.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/jsx.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

(0, _utils.default)("JSXAttribute", {
  visitor: ["name", "value"],
  aliases: ["JSX", "Immutable"],
  fields: {
    name: {
      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
    },
    value: {
      optional: true,
      validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
    }
  }
});
(0, _utils.default)("JSXClosingElement", {
  visitor: ["name"],
  aliases: ["JSX", "Immutable"],
  fields: {
    name: {
      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
    }
  }
});
(0, _utils.default)("JSXElement", {
  builder: ["openingElement", "closingElement", "children", "selfClosing"],
  visitor: ["openingElement", "children", "closingElement"],
  aliases: ["JSX", "Immutable", "Expression"],
  fields: {
    openingElement: {
      validate: (0, _utils.assertNodeType)("JSXOpeningElement")
    },
    closingElement: {
      optional: true,
      validate: (0, _utils.assertNodeType)("JSXClosingElement")
    },
    children: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
    },
    selfClosing: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    }
  }
});
(0, _utils.default)("JSXEmptyExpression", {
  aliases: ["JSX"]
});
(0, _utils.default)("JSXExpressionContainer", {
  visitor: ["expression"],
  aliases: ["JSX", "Immutable"],
  fields: {
    expression: {
      validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
    }
  }
});
(0, _utils.default)("JSXSpreadChild", {
  visitor: ["expression"],
  aliases: ["JSX", "Immutable"],
  fields: {
    expression: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("JSXIdentifier", {
  builder: ["name"],
  aliases: ["JSX"],
  fields: {
    name: {
      validate: (0, _utils.assertValueType)("string")
    }
  }
});
(0, _utils.default)("JSXMemberExpression", {
  visitor: ["object", "property"],
  aliases: ["JSX"],
  fields: {
    object: {
      validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
    },
    property: {
      validate: (0, _utils.assertNodeType)("JSXIdentifier")
    }
  }
});
(0, _utils.default)("JSXNamespacedName", {
  visitor: ["namespace", "name"],
  aliases: ["JSX"],
  fields: {
    namespace: {
      validate: (0, _utils.assertNodeType)("JSXIdentifier")
    },
    name: {
      validate: (0, _utils.assertNodeType)("JSXIdentifier")
    }
  }
});
(0, _utils.default)("JSXOpeningElement", {
  builder: ["name", "attributes", "selfClosing"],
  visitor: ["name", "attributes"],
  aliases: ["JSX", "Immutable"],
  fields: {
    name: {
      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
    },
    selfClosing: {
      default: false
    },
    attributes: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
      optional: true
    }
  }
});
(0, _utils.default)("JSXSpreadAttribute", {
  visitor: ["argument"],
  aliases: ["JSX"],
  fields: {
    argument: {
      validate: (0, _utils.assertNodeType)("Expression")
    }
  }
});
(0, _utils.default)("JSXText", {
  aliases: ["JSX", "Immutable"],
  builder: ["value"],
  fields: {
    value: {
      validate: (0, _utils.assertValueType)("string")
    }
  }
});
(0, _utils.default)("JSXFragment", {
  builder: ["openingFragment", "closingFragment", "children"],
  visitor: ["openingFragment", "children", "closingFragment"],
  aliases: ["JSX", "Immutable", "Expression"],
  fields: {
    openingFragment: {
      validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
    },
    closingFragment: {
      validate: (0, _utils.assertNodeType)("JSXClosingFragment")
    },
    children: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
    }
  }
});
(0, _utils.default)("JSXOpeningFragment", {
  aliases: ["JSX", "Immutable"]
});
(0, _utils.default)("JSXClosingFragment", {
  aliases: ["JSX", "Immutable"]
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/misc.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/misc.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

var _placeholders = __webpack_require__(/*! ./placeholders */ "./node_modules/@babel/types/lib/definitions/placeholders.js");

{
  (0, _utils.default)("Noop", {
    visitor: []
  });
}
(0, _utils.default)("Placeholder", {
  visitor: [],
  builder: ["expectedNode", "name"],
  fields: {
    name: {
      validate: (0, _utils.assertNodeType)("Identifier")
    },
    expectedNode: {
      validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
    }
  }
});
(0, _utils.default)("V8IntrinsicIdentifier", {
  builder: ["name"],
  fields: {
    name: {
      validate: (0, _utils.assertValueType)("string")
    }
  }
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/placeholders.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/placeholders.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

const PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
exports.PLACEHOLDERS = PLACEHOLDERS;
const PLACEHOLDERS_ALIAS = {
  Declaration: ["Statement"],
  Pattern: ["PatternLike", "LVal"]
};
exports.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;

for (const type of PLACEHOLDERS) {
  const alias = _utils.ALIAS_KEYS[type];
  if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
}

const PLACEHOLDERS_FLIPPED_ALIAS = {};
exports.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS;
Object.keys(PLACEHOLDERS_ALIAS).forEach(type => {
  PLACEHOLDERS_ALIAS[type].forEach(alias => {
    if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
    }

    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
  });
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/typescript.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/typescript.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@babel/types/lib/definitions/utils.js");

var _core = __webpack_require__(/*! ./core */ "./node_modules/@babel/types/lib/definitions/core.js");

var _is = __webpack_require__(/*! ../validators/is */ "./node_modules/@babel/types/lib/validators/is.js");

const bool = (0, _utils.assertValueType)("boolean");
const tSFunctionTypeAnnotationCommon = {
  returnType: {
    validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
    optional: true
  },
  typeParameters: {
    validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
    optional: true
  }
};
(0, _utils.default)("TSParameterProperty", {
  aliases: ["LVal"],
  visitor: ["parameter"],
  fields: {
    accessibility: {
      validate: (0, _utils.assertOneOf)("public", "private", "protected"),
      optional: true
    },
    readonly: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    parameter: {
      validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
    },
    override: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  }
});
(0, _utils.default)("TSDeclareFunction", {
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "typeParameters", "params", "returnType"],
  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)
});
(0, _utils.default)("TSDeclareMethod", {
  visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)
});
(0, _utils.default)("TSQualifiedName", {
  aliases: ["TSEntityName"],
  visitor: ["left", "right"],
  fields: {
    left: (0, _utils.validateType)("TSEntityName"),
    right: (0, _utils.validateType)("Identifier")
  }
});
const signatureDeclarationCommon = {
  typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
  parameters: (0, _utils.validateArrayOfType)(["Identifier", "RestElement"]),
  typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
};
const callConstructSignatureDeclaration = {
  aliases: ["TSTypeElement"],
  visitor: ["typeParameters", "parameters", "typeAnnotation"],
  fields: signatureDeclarationCommon
};
(0, _utils.default)("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
(0, _utils.default)("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
const namedTypeElementCommon = {
  key: (0, _utils.validateType)("Expression"),
  computed: (0, _utils.validate)(bool),
  optional: (0, _utils.validateOptional)(bool)
};
(0, _utils.default)("TSPropertySignature", {
  aliases: ["TSTypeElement"],
  visitor: ["key", "typeAnnotation", "initializer"],
  fields: Object.assign({}, namedTypeElementCommon, {
    readonly: (0, _utils.validateOptional)(bool),
    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
    initializer: (0, _utils.validateOptionalType)("Expression"),
    kind: {
      validate: (0, _utils.assertOneOf)("get", "set")
    }
  })
});
(0, _utils.default)("TSMethodSignature", {
  aliases: ["TSTypeElement"],
  visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {
    kind: {
      validate: (0, _utils.assertOneOf)("method", "get", "set")
    }
  })
});
(0, _utils.default)("TSIndexSignature", {
  aliases: ["TSTypeElement"],
  visitor: ["parameters", "typeAnnotation"],
  fields: {
    readonly: (0, _utils.validateOptional)(bool),
    static: (0, _utils.validateOptional)(bool),
    parameters: (0, _utils.validateArrayOfType)("Identifier"),
    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
  }
});
const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];

for (const type of tsKeywordTypes) {
  (0, _utils.default)(type, {
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: {}
  });
}

(0, _utils.default)("TSThisType", {
  aliases: ["TSType", "TSBaseType"],
  visitor: [],
  fields: {}
});
const fnOrCtrBase = {
  aliases: ["TSType"],
  visitor: ["typeParameters", "parameters", "typeAnnotation"]
};
(0, _utils.default)("TSFunctionType", Object.assign({}, fnOrCtrBase, {
  fields: signatureDeclarationCommon
}));
(0, _utils.default)("TSConstructorType", Object.assign({}, fnOrCtrBase, {
  fields: Object.assign({}, signatureDeclarationCommon, {
    abstract: (0, _utils.validateOptional)(bool)
  })
}));
(0, _utils.default)("TSTypeReference", {
  aliases: ["TSType"],
  visitor: ["typeName", "typeParameters"],
  fields: {
    typeName: (0, _utils.validateType)("TSEntityName"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
  }
});
(0, _utils.default)("TSTypePredicate", {
  aliases: ["TSType"],
  visitor: ["parameterName", "typeAnnotation"],
  builder: ["parameterName", "typeAnnotation", "asserts"],
  fields: {
    parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]),
    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
    asserts: (0, _utils.validateOptional)(bool)
  }
});
(0, _utils.default)("TSTypeQuery", {
  aliases: ["TSType"],
  visitor: ["exprName"],
  fields: {
    exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"])
  }
});
(0, _utils.default)("TSTypeLiteral", {
  aliases: ["TSType"],
  visitor: ["members"],
  fields: {
    members: (0, _utils.validateArrayOfType)("TSTypeElement")
  }
});
(0, _utils.default)("TSArrayType", {
  aliases: ["TSType"],
  visitor: ["elementType"],
  fields: {
    elementType: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSTupleType", {
  aliases: ["TSType"],
  visitor: ["elementTypes"],
  fields: {
    elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
  }
});
(0, _utils.default)("TSOptionalType", {
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSRestType", {
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSNamedTupleMember", {
  visitor: ["label", "elementType"],
  builder: ["label", "elementType", "optional"],
  fields: {
    label: (0, _utils.validateType)("Identifier"),
    optional: {
      validate: bool,
      default: false
    },
    elementType: (0, _utils.validateType)("TSType")
  }
});
const unionOrIntersection = {
  aliases: ["TSType"],
  visitor: ["types"],
  fields: {
    types: (0, _utils.validateArrayOfType)("TSType")
  }
};
(0, _utils.default)("TSUnionType", unionOrIntersection);
(0, _utils.default)("TSIntersectionType", unionOrIntersection);
(0, _utils.default)("TSConditionalType", {
  aliases: ["TSType"],
  visitor: ["checkType", "extendsType", "trueType", "falseType"],
  fields: {
    checkType: (0, _utils.validateType)("TSType"),
    extendsType: (0, _utils.validateType)("TSType"),
    trueType: (0, _utils.validateType)("TSType"),
    falseType: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSInferType", {
  aliases: ["TSType"],
  visitor: ["typeParameter"],
  fields: {
    typeParameter: (0, _utils.validateType)("TSTypeParameter")
  }
});
(0, _utils.default)("TSParenthesizedType", {
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSTypeOperator", {
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: {
    operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
    typeAnnotation: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSIndexedAccessType", {
  aliases: ["TSType"],
  visitor: ["objectType", "indexType"],
  fields: {
    objectType: (0, _utils.validateType)("TSType"),
    indexType: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSMappedType", {
  aliases: ["TSType"],
  visitor: ["typeParameter", "typeAnnotation", "nameType"],
  fields: {
    readonly: (0, _utils.validateOptional)(bool),
    typeParameter: (0, _utils.validateType)("TSTypeParameter"),
    optional: (0, _utils.validateOptional)(bool),
    typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
    nameType: (0, _utils.validateOptionalType)("TSType")
  }
});
(0, _utils.default)("TSLiteralType", {
  aliases: ["TSType", "TSBaseType"],
  visitor: ["literal"],
  fields: {
    literal: {
      validate: function () {
        const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
        const unaryOperator = (0, _utils.assertOneOf)("-");
        const literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral");

        function validator(parent, key, node) {
          if ((0, _is.default)("UnaryExpression", node)) {
            unaryOperator(node, "operator", node.operator);
            unaryExpression(node, "argument", node.argument);
          } else {
            literal(parent, key, node);
          }
        }

        validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "UnaryExpression"];
        return validator;
      }()
    }
  }
});
(0, _utils.default)("TSExpressionWithTypeArguments", {
  aliases: ["TSType"],
  visitor: ["expression", "typeParameters"],
  fields: {
    expression: (0, _utils.validateType)("TSEntityName"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
  }
});
(0, _utils.default)("TSInterfaceDeclaration", {
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "typeParameters", "extends", "body"],
  fields: {
    declare: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
    body: (0, _utils.validateType)("TSInterfaceBody")
  }
});
(0, _utils.default)("TSInterfaceBody", {
  visitor: ["body"],
  fields: {
    body: (0, _utils.validateArrayOfType)("TSTypeElement")
  }
});
(0, _utils.default)("TSTypeAliasDeclaration", {
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "typeParameters", "typeAnnotation"],
  fields: {
    declare: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    typeAnnotation: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSAsExpression", {
  aliases: ["Expression"],
  visitor: ["expression", "typeAnnotation"],
  fields: {
    expression: (0, _utils.validateType)("Expression"),
    typeAnnotation: (0, _utils.validateType)("TSType")
  }
});
(0, _utils.default)("TSTypeAssertion", {
  aliases: ["Expression"],
  visitor: ["typeAnnotation", "expression"],
  fields: {
    typeAnnotation: (0, _utils.validateType)("TSType"),
    expression: (0, _utils.validateType)("Expression")
  }
});
(0, _utils.default)("TSEnumDeclaration", {
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "members"],
  fields: {
    declare: (0, _utils.validateOptional)(bool),
    const: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)("Identifier"),
    members: (0, _utils.validateArrayOfType)("TSEnumMember"),
    initializer: (0, _utils.validateOptionalType)("Expression")
  }
});
(0, _utils.default)("TSEnumMember", {
  visitor: ["id", "initializer"],
  fields: {
    id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    initializer: (0, _utils.validateOptionalType)("Expression")
  }
});
(0, _utils.default)("TSModuleDeclaration", {
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "body"],
  fields: {
    declare: (0, _utils.validateOptional)(bool),
    global: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
  }
});
(0, _utils.default)("TSModuleBlock", {
  aliases: ["Scopable", "Block", "BlockParent"],
  visitor: ["body"],
  fields: {
    body: (0, _utils.validateArrayOfType)("Statement")
  }
});
(0, _utils.default)("TSImportType", {
  aliases: ["TSType"],
  visitor: ["argument", "qualifier", "typeParameters"],
  fields: {
    argument: (0, _utils.validateType)("StringLiteral"),
    qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
  }
});
(0, _utils.default)("TSImportEqualsDeclaration", {
  aliases: ["Statement"],
  visitor: ["id", "moduleReference"],
  fields: {
    isExport: (0, _utils.validate)(bool),
    id: (0, _utils.validateType)("Identifier"),
    moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]),
    importKind: {
      validate: (0, _utils.assertOneOf)("type", "value"),
      optional: true
    }
  }
});
(0, _utils.default)("TSExternalModuleReference", {
  visitor: ["expression"],
  fields: {
    expression: (0, _utils.validateType)("StringLiteral")
  }
});
(0, _utils.default)("TSNonNullExpression", {
  aliases: ["Expression"],
  visitor: ["expression"],
  fields: {
    expression: (0, _utils.validateType)("Expression")
  }
});
(0, _utils.default)("TSExportAssignment", {
  aliases: ["Statement"],
  visitor: ["expression"],
  fields: {
    expression: (0, _utils.validateType)("Expression")
  }
});
(0, _utils.default)("TSNamespaceExportDeclaration", {
  aliases: ["Statement"],
  visitor: ["id"],
  fields: {
    id: (0, _utils.validateType)("Identifier")
  }
});
(0, _utils.default)("TSTypeAnnotation", {
  visitor: ["typeAnnotation"],
  fields: {
    typeAnnotation: {
      validate: (0, _utils.assertNodeType)("TSType")
    }
  }
});
(0, _utils.default)("TSTypeParameterInstantiation", {
  visitor: ["params"],
  fields: {
    params: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")))
    }
  }
});
(0, _utils.default)("TSTypeParameterDeclaration", {
  visitor: ["params"],
  fields: {
    params: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter")))
    }
  }
});
(0, _utils.default)("TSTypeParameter", {
  builder: ["constraint", "default", "name"],
  visitor: ["constraint", "default"],
  fields: {
    name: {
      validate: (0, _utils.assertValueType)("string")
    },
    constraint: {
      validate: (0, _utils.assertNodeType)("TSType"),
      optional: true
    },
    default: {
      validate: (0, _utils.assertNodeType)("TSType"),
      optional: true
    }
  }
});

/***/ }),

/***/ "./node_modules/@babel/types/lib/definitions/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/types/lib/definitions/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validate = validate;
exports.typeIs = typeIs;
exports.validateType = validateType;
exports.validateOptional = validateOptional;
exports.validateOptionalType = validateOptionalType;
exports.arrayOf = arrayOf;
exports.arrayOfType = arrayOfType;
exports.validateArrayOfType = validateArrayOfType;
exports.assertEach = assertEach;
exports.assertOneOf = assertOneOf;
exports.assertNodeType = assertNodeType;
exports.assertNodeOrValueType = assertNodeOrValueType;
exports.assertValueType = assertValueType;
exports.assertShape = assertShape;
exports.assertOptionalChainStart = assertOptionalChainStart;
exports.chain = chain;
exports.default = defineType;
exports.NODE_PARENT_VALIDATIONS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;

var _is = __webpack_require__(/*! ../validators/is */ "./node_modules/@babel/types/lib/validators/is.js");

var _validate = __webpack_require__(/*! ../validators/validate */ "./node_modules/@babel/types/lib/validators/validate.js");

const VISITOR_KEYS = {};
exports.VISITOR_KEYS = VISITOR_KEYS;
const ALIAS_KEYS = {};
exports.ALIAS_KEYS = ALIAS_KEYS;
const FLIPPED_ALIAS_KEYS = {};
exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
const NODE_FIELDS = {};
exports.NODE_FIELDS = NODE_FIELDS;
const BUILDER_KEYS = {};
exports.BUILDER_KEYS = BUILDER_KEYS;
const DEPRECATED_KEYS = {};
exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
const NODE_PARENT_VALIDATIONS = {};
exports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;

function getType(val) {
  if (Array.isArray(val)) {
    return "array";
  } else if (val === null) {
    return "null";
  } else {
    return typeof val;
  }
}

function validate(validate) {
  return {
    validate
  };
}

function typeIs(typeName) {
  return typeof typeName === "string" ? assertNodeType(typeName) : assertNodeType(...typeName);
}

function validateType(typeName) {
  return validate(typeIs(typeName));
}

function validateOptional(validate) {
  return {
    validate,
    optional: true
  };
}

function validateOptionalType(typeName) {
  return {
    validate: typeIs(typeName),
    optional: true
  };
}

function arrayOf(elementType) {
  return chain(assertValueType("array"), assertEach(elementType));
}

function arrayOfType(typeName) {
  return arrayOf(typeIs(typeName));
}

function validateArrayOfType(typeName) {
  return validate(arrayOfType(typeName));
}

function assertEach(callback) {
  function validator(node, key, val) {
    if (!Array.isArray(val)) return;

    for (let i = 0; i < val.length; i++) {
      const subkey = `${key}[${i}]`;
      const v = val[i];
      callback(node, subkey, v);
      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);
    }
  }

  validator.each = callback;
  return validator;
}

function assertOneOf(...values) {
  function validate(node, key, val) {
    if (values.indexOf(val) < 0) {
      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
    }
  }

  validate.oneOf = values;
  return validate;
}

function assertNodeType(...types) {
  function validate(node, key, val) {
    for (const type of types) {
      if ((0, _is.default)(type, val)) {
        (0, _validate.validateChild)(node, key, val);
        return;
      }
    }

    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
  }

  validate.oneOfNodeTypes = types;
  return validate;
}

function assertNodeOrValueType(...types) {
  function validate(node, key, val) {
    for (const type of types) {
      if (getType(val) === type || (0, _is.default)(type, val)) {
        (0, _validate.validateChild)(node, key, val);
        return;
      }
    }

    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
  }

  validate.oneOfNodeOrValueTypes = types;
  return validate;
}

function assertValueType(type) {
  function validate(node, key, val) {
    const valid = getType(val) === type;

    if (!valid) {
      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
    }
  }

  validate.type = type;
  return validate;
}

function assertShape(shape) {
  function validate(node, key, val) {
    const errors = [];

    for (const property of Object.keys(shape)) {
      try {
        (0, _validate.validateField)(node, property, val[property], shape[property]);
      } catch (error) {
        if (error instanceof TypeError) {
          errors.push(error.message);
          continue;
        }

        throw error;
      }
    }

    if (errors.length) {
      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\n${errors.join("\n")}`);
    }
  }

  validate.shapeOf = shape;
  return validate;
}

function assertOptionalChainStart() {
  function validate(node) {
    var _current;

    let current = node;

    while (node) {
      const {
        type
      } = current;

      if (type === "OptionalCallExpression") {
        if (current.optional) return;
        current = current.callee;
        continue;
      }

      if (type === "OptionalMemberExpression") {
        if (current.optional) return;
        current = current.object;
        continue;
      }

      break;
    }

    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
  }

  return validate;
}

function chain(...fns) {
  function validate(...args) {
    for (const fn of fns) {
      fn(...args);
    }
  }

  validate.chainOf = fns;

  if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
    throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
  }

  return validate;
}

const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"];
const validFieldKeys = ["default", "optional", "validate"];

function defineType(type, opts = {}) {
  const inherits = opts.inherits && store[opts.inherits] || {};
  let fields = opts.fields;

  if (!fields) {
    fields = {};

    if (inherits.fields) {
      const keys = Object.getOwnPropertyNames(inherits.fields);

      for (const key of keys) {
        const field = inherits.fields[key];
        const def = field.default;

        if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
          throw new Error("field defaults can only be primitives or empty arrays currently");
        }

        fields[key] = {
          default: Array.isArray(def) ? [] : def,
          optional: field.optional,
          validate: field.validate
        };
      }
    }
  }

  const visitor = opts.visitor || inherits.visitor || [];
  const aliases = opts.aliases || inherits.aliases || [];
  const builder = opts.builder || inherits.builder || opts.visitor || [];

  for (const k of Object.keys(opts)) {
    if (validTypeOpts.indexOf(k) === -1) {
      throw new Error(`Unknown type option "${k}" on ${type}`);
    }
  }

  if (opts.deprecatedAlias) {
    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
  }

  for (const key of visitor.concat(builder)) {
    fields[key] = fields[key] || {};
  }

  for (const key of Object.keys(fields)) {
    const field = fields[key];

    if (field.default !== undefined && builder.indexOf(key) === -1) {
      field.optional = true;
    }

    if (field.default === undefined) {
      field.default = null;
    } else if (!field.validate && field.default != null) {
      field.validate = assertValueType(getType(field.default));
    }

    for (const k of Object.keys(field)) {
      if (validFieldKeys.indexOf(k) === -1) {
        throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
      }
    }
  }

  VISITOR_KEYS[type] = opts.visitor = visitor;
  BUILDER_KEYS[type] = opts.builder = builder;
  NODE_FIELDS[type] = opts.fields = fields;
  ALIAS_KEYS[type] = opts.aliases = aliases;
  aliases.forEach(alias => {
    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
    FLIPPED_ALIAS_KEYS[alias].push(type);
  });

  if (opts.validate) {
    NODE_PARENT_VALIDATIONS[type] = opts.validate;
  }

  store[type] = opts;
}

const store = {};

/***/ }),

/***/ "./node_modules/@babel/types/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/@babel/types/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var _exportNames = {
  react: true,
  assertNode: true,
  createTypeAnnotationBasedOnTypeof: true,
  createUnionTypeAnnotation: true,
  createFlowUnionType: true,
  createTSUnionType: true,
  cloneNode: true,
  clone: true,
  cloneDeep: true,
  cloneDeepWithoutLoc: true,
  cloneWithoutLoc: true,
  addComment: true,
  addComments: true,
  inheritInnerComments: true,
  inheritLeadingComments: true,
  inheritsComments: true,
  inheritTrailingComments: true,
  removeComments: true,
  ensureBlock: true,
  toBindingIdentifierName: true,
  toBlock: true,
  toComputedKey: true,
  toExpression: true,
  toIdentifier: true,
  toKeyAlias: true,
  toSequenceExpression: true,
  toStatement: true,
  valueToNode: true,
  appendToMemberExpression: true,
  inherits: true,
  prependToMemberExpression: true,
  removeProperties: true,
  removePropertiesDeep: true,
  removeTypeDuplicates: true,
  getBindingIdentifiers: true,
  getOuterBindingIdentifiers: true,
  traverse: true,
  traverseFast: true,
  shallowEqual: true,
  is: true,
  isBinding: true,
  isBlockScoped: true,
  isImmutable: true,
  isLet: true,
  isNode: true,
  isNodesEquivalent: true,
  isPlaceholderType: true,
  isReferenced: true,
  isScope: true,
  isSpecifierDefault: true,
  isType: true,
  isValidES3Identifier: true,
  isValidIdentifier: true,
  isVar: true,
  matchesPattern: true,
  validate: true,
  buildMatchMemberExpression: true
};
Object.defineProperty(exports, "assertNode", ({
  enumerable: true,
  get: function () {
    return _assertNode.default;
  }
}));
Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", ({
  enumerable: true,
  get: function () {
    return _createTypeAnnotationBasedOnTypeof.default;
  }
}));
Object.defineProperty(exports, "createUnionTypeAnnotation", ({
  enumerable: true,
  get: function () {
    return _createFlowUnionType.default;
  }
}));
Object.defineProperty(exports, "createFlowUnionType", ({
  enumerable: true,
  get: function () {
    return _createFlowUnionType.default;
  }
}));
Object.defineProperty(exports, "createTSUnionType", ({
  enumerable: true,
  get: function () {
    return _createTSUnionType.default;
  }
}));
Object.defineProperty(exports, "cloneNode", ({
  enumerable: true,
  get: function () {
    return _cloneNode.default;
  }
}));
Object.defineProperty(exports, "clone", ({
  enumerable: true,
  get: function () {
    return _clone.default;
  }
}));
Object.defineProperty(exports, "cloneDeep", ({
  enumerable: true,
  get: function () {
    return _cloneDeep.default;
  }
}));
Object.defineProperty(exports, "cloneDeepWithoutLoc", ({
  enumerable: true,
  get: function () {
    return _cloneDeepWithoutLoc.default;
  }
}));
Object.defineProperty(exports, "cloneWithoutLoc", ({
  enumerable: true,
  get: function () {
    return _cloneWithoutLoc.default;
  }
}));
Object.defineProperty(exports, "addComment", ({
  enumerable: true,
  get: function () {
    return _addComment.default;
  }
}));
Object.defineProperty(exports, "addComments", ({
  enumerable: true,
  get: function () {
    return _addComments.default;
  }
}));
Object.defineProperty(exports, "inheritInnerComments", ({
  enumerable: true,
  get: function () {
    return _inheritInnerComments.default;
  }
}));
Object.defineProperty(exports, "inheritLeadingComments", ({
  enumerable: true,
  get: function () {
    return _inheritLeadingComments.default;
  }
}));
Object.defineProperty(exports, "inheritsComments", ({
  enumerable: true,
  get: function () {
    return _inheritsComments.default;
  }
}));
Object.defineProperty(exports, "inheritTrailingComments", ({
  enumerable: true,
  get: function () {
    return _inheritTrailingComments.default;
  }
}));
Object.defineProperty(exports, "removeComments", ({
  enumerable: true,
  get: function () {
    return _removeComments.default;
  }
}));
Object.defineProperty(exports, "ensureBlock", ({
  enumerable: true,
  get: function () {
    return _ensureBlock.default;
  }
}));
Object.defineProperty(exports, "toBindingIdentifierName", ({
  enumerable: true,
  get: function () {
    return _toBindingIdentifierName.default;
  }
}));
Object.defineProperty(exports, "toBlock", ({
  enumerable: true,
  get: function () {
    return _toBlock.default;
  }
}));
Object.defineProperty(exports, "toComputedKey", ({
  enumerable: true,
  get: function () {
    return _toComputedKey.default;
  }
}));
Object.defineProperty(exports, "toExpression", ({
  enumerable: true,
  get: function () {
    return _toExpression.default;
  }
}));
Object.defineProperty(exports, "toIdentifier", ({
  enumerable: true,
  get: function () {
    return _toIdentifier.default;
  }
}));
Object.defineProperty(exports, "toKeyAlias", ({
  enumerable: true,
  get: function () {
    return _toKeyAlias.default;
  }
}));
Object.defineProperty(exports, "toSequenceExpression", ({
  enumerable: true,
  get: function () {
    return _toSequenceExpression.default;
  }
}));
Object.defineProperty(exports, "toStatement", ({
  enumerable: true,
  get: function () {
    return _toStatement.default;
  }
}));
Object.defineProperty(exports, "valueToNode", ({
  enumerable: true,
  get: function () {
    return _valueToNode.default;
  }
}));
Object.defineProperty(exports, "appendToMemberExpression", ({
  enumerable: true,
  get: function () {
    return _appendToMemberExpression.default;
  }
}));
Object.defineProperty(exports, "inherits", ({
  enumerable: true,
  get: function () {
    return _inherits.default;
  }
}));
Object.defineProperty(exports, "prependToMemberExpression", ({
  enumerable: true,
  get: function () {
    return _prependToMemberExpression.default;
  }
}));
Object.defineProperty(exports, "removeProperties", ({
  enumerable: true,
  get: function () {
    return _removeProperties.default;
  }
}));
Object.defineProperty(exports, "removePropertiesDeep", ({
  enumerable: true,
  get: function () {
    return _removePropertiesDeep.default;
  }
}));
Object.defineProperty(exports, "removeTypeDuplicates", ({
  enumerable: true,
  get: function () {
    return _removeTypeDuplicates.default;
  }
}));
Object.defineProperty(exports, "getBindingIdentifiers", ({
  enumerable: true,
  get: function () {
    return _getBindingIdentifiers.default;
  }
}));
Object.defineProperty(exports, "getOuterBindingIdentifiers", ({
  enumerable: true,
  get: function () {
    return _getOuterBindingIdentifiers.default;
  }
}));
Object.defineProperty(exports, "traverse", ({
  enumerable: true,
  get: function () {
    return _traverse.default;
  }
}));
Object.defineProperty(exports, "traverseFast", ({
  enumerable: true,
  get: function () {
    return _traverseFast.default;
  }
}));
Object.defineProperty(exports, "shallowEqual", ({
  enumerable: true,
  get: function () {
    return _shallowEqual.default;
  }
}));
Object.defineProperty(exports, "is", ({
  enumerable: true,
  get: function () {
    return _is.default;
  }
}));
Object.defineProperty(exports, "isBinding", ({
  enumerable: true,
  get: function () {
    return _isBinding.default;
  }
}));
Object.defineProperty(exports, "isBlockScoped", ({
  enumerable: true,
  get: function () {
    return _isBlockScoped.default;
  }
}));
Object.defineProperty(exports, "isImmutable", ({
  enumerable: true,
  get: function () {
    return _isImmutable.default;
  }
}));
Object.defineProperty(exports, "isLet", ({
  enumerable: true,
  get: function () {
    return _isLet.default;
  }
}));
Object.defineProperty(exports, "isNode", ({
  enumerable: true,
  get: function () {
    return _isNode.default;
  }
}));
Object.defineProperty(exports, "isNodesEquivalent", ({
  enumerable: true,
  get: function () {
    return _isNodesEquivalent.default;
  }
}));
Object.defineProperty(exports, "isPlaceholderType", ({
  enumerable: true,
  get: function () {
    return _isPlaceholderType.default;
  }
}));
Object.defineProperty(exports, "isReferenced", ({
  enumerable: true,
  get: function () {
    return _isReferenced.default;
  }
}));
Object.defineProperty(exports, "isScope", ({
  enumerable: true,
  get: function () {
    return _isScope.default;
  }
}));
Object.defineProperty(exports, "isSpecifierDefault", ({
  enumerable: true,
  get: function () {
    return _isSpecifierDefault.default;
  }
}));
Object.defineProperty(exports, "isType", ({
  enumerable: true,
  get: function () {
    return _isType.default;
  }
}));
Object.defineProperty(exports, "isValidES3Identifier", ({
  enumerable: true,
  get: function () {
    return _isValidES3Identifier.default;
  }
}));
Object.defineProperty(exports, "isValidIdentifier", ({
  enumerable: true,
  get: function () {
    return _isValidIdentifier.default;
  }
}));
Object.defineProperty(exports, "isVar", ({
  enumerable: true,
  get: function () {
    return _isVar.default;
  }
}));
Object.defineProperty(exports, "matchesPattern", ({
  enumerable: true,
  get: function () {
    return _matchesPattern.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "buildMatchMemberExpression", ({
  enumerable: true,
  get: function () {
    return _buildMatchMemberExpression.default;
  }
}));
exports.react = void 0;

var _isReactComponent = __webpack_require__(/*! ./validators/react/isReactComponent */ "./node_modules/@babel/types/lib/validators/react/isReactComponent.js");

var _isCompatTag = __webpack_require__(/*! ./validators/react/isCompatTag */ "./node_modules/@babel/types/lib/validators/react/isCompatTag.js");

var _buildChildren = __webpack_require__(/*! ./builders/react/buildChildren */ "./node_modules/@babel/types/lib/builders/react/buildChildren.js");

var _assertNode = __webpack_require__(/*! ./asserts/assertNode */ "./node_modules/@babel/types/lib/asserts/assertNode.js");

var _generated = __webpack_require__(/*! ./asserts/generated */ "./node_modules/@babel/types/lib/asserts/generated/index.js");

Object.keys(_generated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generated[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generated[key];
    }
  });
});

var _createTypeAnnotationBasedOnTypeof = __webpack_require__(/*! ./builders/flow/createTypeAnnotationBasedOnTypeof */ "./node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js");

var _createFlowUnionType = __webpack_require__(/*! ./builders/flow/createFlowUnionType */ "./node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js");

var _createTSUnionType = __webpack_require__(/*! ./builders/typescript/createTSUnionType */ "./node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js");

var _generated2 = __webpack_require__(/*! ./builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

Object.keys(_generated2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generated2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generated2[key];
    }
  });
});

var _uppercase = __webpack_require__(/*! ./builders/generated/uppercase */ "./node_modules/@babel/types/lib/builders/generated/uppercase.js");

Object.keys(_uppercase).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _uppercase[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _uppercase[key];
    }
  });
});

var _cloneNode = __webpack_require__(/*! ./clone/cloneNode */ "./node_modules/@babel/types/lib/clone/cloneNode.js");

var _clone = __webpack_require__(/*! ./clone/clone */ "./node_modules/@babel/types/lib/clone/clone.js");

var _cloneDeep = __webpack_require__(/*! ./clone/cloneDeep */ "./node_modules/@babel/types/lib/clone/cloneDeep.js");

var _cloneDeepWithoutLoc = __webpack_require__(/*! ./clone/cloneDeepWithoutLoc */ "./node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js");

var _cloneWithoutLoc = __webpack_require__(/*! ./clone/cloneWithoutLoc */ "./node_modules/@babel/types/lib/clone/cloneWithoutLoc.js");

var _addComment = __webpack_require__(/*! ./comments/addComment */ "./node_modules/@babel/types/lib/comments/addComment.js");

var _addComments = __webpack_require__(/*! ./comments/addComments */ "./node_modules/@babel/types/lib/comments/addComments.js");

var _inheritInnerComments = __webpack_require__(/*! ./comments/inheritInnerComments */ "./node_modules/@babel/types/lib/comments/inheritInnerComments.js");

var _inheritLeadingComments = __webpack_require__(/*! ./comments/inheritLeadingComments */ "./node_modules/@babel/types/lib/comments/inheritLeadingComments.js");

var _inheritsComments = __webpack_require__(/*! ./comments/inheritsComments */ "./node_modules/@babel/types/lib/comments/inheritsComments.js");

var _inheritTrailingComments = __webpack_require__(/*! ./comments/inheritTrailingComments */ "./node_modules/@babel/types/lib/comments/inheritTrailingComments.js");

var _removeComments = __webpack_require__(/*! ./comments/removeComments */ "./node_modules/@babel/types/lib/comments/removeComments.js");

var _generated3 = __webpack_require__(/*! ./constants/generated */ "./node_modules/@babel/types/lib/constants/generated/index.js");

Object.keys(_generated3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generated3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generated3[key];
    }
  });
});

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/@babel/types/lib/constants/index.js");

Object.keys(_constants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _constants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constants[key];
    }
  });
});

var _ensureBlock = __webpack_require__(/*! ./converters/ensureBlock */ "./node_modules/@babel/types/lib/converters/ensureBlock.js");

var _toBindingIdentifierName = __webpack_require__(/*! ./converters/toBindingIdentifierName */ "./node_modules/@babel/types/lib/converters/toBindingIdentifierName.js");

var _toBlock = __webpack_require__(/*! ./converters/toBlock */ "./node_modules/@babel/types/lib/converters/toBlock.js");

var _toComputedKey = __webpack_require__(/*! ./converters/toComputedKey */ "./node_modules/@babel/types/lib/converters/toComputedKey.js");

var _toExpression = __webpack_require__(/*! ./converters/toExpression */ "./node_modules/@babel/types/lib/converters/toExpression.js");

var _toIdentifier = __webpack_require__(/*! ./converters/toIdentifier */ "./node_modules/@babel/types/lib/converters/toIdentifier.js");

var _toKeyAlias = __webpack_require__(/*! ./converters/toKeyAlias */ "./node_modules/@babel/types/lib/converters/toKeyAlias.js");

var _toSequenceExpression = __webpack_require__(/*! ./converters/toSequenceExpression */ "./node_modules/@babel/types/lib/converters/toSequenceExpression.js");

var _toStatement = __webpack_require__(/*! ./converters/toStatement */ "./node_modules/@babel/types/lib/converters/toStatement.js");

var _valueToNode = __webpack_require__(/*! ./converters/valueToNode */ "./node_modules/@babel/types/lib/converters/valueToNode.js");

var _definitions = __webpack_require__(/*! ./definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

Object.keys(_definitions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _definitions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _definitions[key];
    }
  });
});

var _appendToMemberExpression = __webpack_require__(/*! ./modifications/appendToMemberExpression */ "./node_modules/@babel/types/lib/modifications/appendToMemberExpression.js");

var _inherits = __webpack_require__(/*! ./modifications/inherits */ "./node_modules/@babel/types/lib/modifications/inherits.js");

var _prependToMemberExpression = __webpack_require__(/*! ./modifications/prependToMemberExpression */ "./node_modules/@babel/types/lib/modifications/prependToMemberExpression.js");

var _removeProperties = __webpack_require__(/*! ./modifications/removeProperties */ "./node_modules/@babel/types/lib/modifications/removeProperties.js");

var _removePropertiesDeep = __webpack_require__(/*! ./modifications/removePropertiesDeep */ "./node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");

var _removeTypeDuplicates = __webpack_require__(/*! ./modifications/flow/removeTypeDuplicates */ "./node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");

var _getBindingIdentifiers = __webpack_require__(/*! ./retrievers/getBindingIdentifiers */ "./node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");

var _getOuterBindingIdentifiers = __webpack_require__(/*! ./retrievers/getOuterBindingIdentifiers */ "./node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js");

var _traverse = __webpack_require__(/*! ./traverse/traverse */ "./node_modules/@babel/types/lib/traverse/traverse.js");

Object.keys(_traverse).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _traverse[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _traverse[key];
    }
  });
});

var _traverseFast = __webpack_require__(/*! ./traverse/traverseFast */ "./node_modules/@babel/types/lib/traverse/traverseFast.js");

var _shallowEqual = __webpack_require__(/*! ./utils/shallowEqual */ "./node_modules/@babel/types/lib/utils/shallowEqual.js");

var _is = __webpack_require__(/*! ./validators/is */ "./node_modules/@babel/types/lib/validators/is.js");

var _isBinding = __webpack_require__(/*! ./validators/isBinding */ "./node_modules/@babel/types/lib/validators/isBinding.js");

var _isBlockScoped = __webpack_require__(/*! ./validators/isBlockScoped */ "./node_modules/@babel/types/lib/validators/isBlockScoped.js");

var _isImmutable = __webpack_require__(/*! ./validators/isImmutable */ "./node_modules/@babel/types/lib/validators/isImmutable.js");

var _isLet = __webpack_require__(/*! ./validators/isLet */ "./node_modules/@babel/types/lib/validators/isLet.js");

var _isNode = __webpack_require__(/*! ./validators/isNode */ "./node_modules/@babel/types/lib/validators/isNode.js");

var _isNodesEquivalent = __webpack_require__(/*! ./validators/isNodesEquivalent */ "./node_modules/@babel/types/lib/validators/isNodesEquivalent.js");

var _isPlaceholderType = __webpack_require__(/*! ./validators/isPlaceholderType */ "./node_modules/@babel/types/lib/validators/isPlaceholderType.js");

var _isReferenced = __webpack_require__(/*! ./validators/isReferenced */ "./node_modules/@babel/types/lib/validators/isReferenced.js");

var _isScope = __webpack_require__(/*! ./validators/isScope */ "./node_modules/@babel/types/lib/validators/isScope.js");

var _isSpecifierDefault = __webpack_require__(/*! ./validators/isSpecifierDefault */ "./node_modules/@babel/types/lib/validators/isSpecifierDefault.js");

var _isType = __webpack_require__(/*! ./validators/isType */ "./node_modules/@babel/types/lib/validators/isType.js");

var _isValidES3Identifier = __webpack_require__(/*! ./validators/isValidES3Identifier */ "./node_modules/@babel/types/lib/validators/isValidES3Identifier.js");

var _isValidIdentifier = __webpack_require__(/*! ./validators/isValidIdentifier */ "./node_modules/@babel/types/lib/validators/isValidIdentifier.js");

var _isVar = __webpack_require__(/*! ./validators/isVar */ "./node_modules/@babel/types/lib/validators/isVar.js");

var _matchesPattern = __webpack_require__(/*! ./validators/matchesPattern */ "./node_modules/@babel/types/lib/validators/matchesPattern.js");

var _validate = __webpack_require__(/*! ./validators/validate */ "./node_modules/@babel/types/lib/validators/validate.js");

var _buildMatchMemberExpression = __webpack_require__(/*! ./validators/buildMatchMemberExpression */ "./node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js");

var _generated4 = __webpack_require__(/*! ./validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

Object.keys(_generated4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generated4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generated4[key];
    }
  });
});

var _generated5 = __webpack_require__(/*! ./ast-types/generated */ "./node_modules/@babel/types/lib/ast-types/generated/index.js");

Object.keys(_generated5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generated5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generated5[key];
    }
  });
});
const react = {
  isReactComponent: _isReactComponent.default,
  isCompatTag: _isCompatTag.default,
  buildChildren: _buildChildren.default
};
exports.react = react;

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/appendToMemberExpression.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/appendToMemberExpression.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = appendToMemberExpression;

var _generated = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

function appendToMemberExpression(member, append, computed = false) {
  member.object = (0, _generated.memberExpression)(member.object, member.property, member.computed);
  member.property = append;
  member.computed = !!computed;
  return member;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = removeTypeDuplicates;

var _generated = __webpack_require__(/*! ../../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function getQualifiedName(node) {
  return (0, _generated.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
}

function removeTypeDuplicates(nodes) {
  const generics = {};
  const bases = {};
  const typeGroups = [];
  const types = [];

  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (!node) continue;

    if (types.indexOf(node) >= 0) {
      continue;
    }

    if ((0, _generated.isAnyTypeAnnotation)(node)) {
      return [node];
    }

    if ((0, _generated.isFlowBaseAnnotation)(node)) {
      bases[node.type] = node;
      continue;
    }

    if ((0, _generated.isUnionTypeAnnotation)(node)) {
      if (typeGroups.indexOf(node.types) < 0) {
        nodes = nodes.concat(node.types);
        typeGroups.push(node.types);
      }

      continue;
    }

    if ((0, _generated.isGenericTypeAnnotation)(node)) {
      const name = getQualifiedName(node.id);

      if (generics[name]) {
        let existing = generics[name];

        if (existing.typeParameters) {
          if (node.typeParameters) {
            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
          }
        } else {
          existing = node.typeParameters;
        }
      } else {
        generics[name] = node;
      }

      continue;
    }

    types.push(node);
  }

  for (const type of Object.keys(bases)) {
    types.push(bases[type]);
  }

  for (const name of Object.keys(generics)) {
    types.push(generics[name]);
  }

  return types;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/inherits.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/inherits.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = inherits;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/@babel/types/lib/constants/index.js");

var _inheritsComments = __webpack_require__(/*! ../comments/inheritsComments */ "./node_modules/@babel/types/lib/comments/inheritsComments.js");

function inherits(child, parent) {
  if (!child || !parent) return child;

  for (const key of _constants.INHERIT_KEYS.optional) {
    if (child[key] == null) {
      child[key] = parent[key];
    }
  }

  for (const key of Object.keys(parent)) {
    if (key[0] === "_" && key !== "__clone") child[key] = parent[key];
  }

  for (const key of _constants.INHERIT_KEYS.force) {
    child[key] = parent[key];
  }

  (0, _inheritsComments.default)(child, parent);
  return child;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/prependToMemberExpression.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/prependToMemberExpression.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = prependToMemberExpression;

var _generated = __webpack_require__(/*! ../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

function prependToMemberExpression(member, prepend) {
  member.object = (0, _generated.memberExpression)(prepend, member.object);
  return member;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/removeProperties.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/removeProperties.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = removeProperties;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/@babel/types/lib/constants/index.js");

const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];

const CLEAR_KEYS_PLUS_COMMENTS = _constants.COMMENT_KEYS.concat(["comments"]).concat(CLEAR_KEYS);

function removeProperties(node, opts = {}) {
  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;

  for (const key of map) {
    if (node[key] != null) node[key] = undefined;
  }

  for (const key of Object.keys(node)) {
    if (key[0] === "_" && node[key] != null) node[key] = undefined;
  }

  const symbols = Object.getOwnPropertySymbols(node);

  for (const sym of symbols) {
    node[sym] = null;
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/removePropertiesDeep.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/removePropertiesDeep.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = removePropertiesDeep;

var _traverseFast = __webpack_require__(/*! ../traverse/traverseFast */ "./node_modules/@babel/types/lib/traverse/traverseFast.js");

var _removeProperties = __webpack_require__(/*! ./removeProperties */ "./node_modules/@babel/types/lib/modifications/removeProperties.js");

function removePropertiesDeep(tree, opts) {
  (0, _traverseFast.default)(tree, _removeProperties.default, opts);
  return tree;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = removeTypeDuplicates;

var _generated = __webpack_require__(/*! ../../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function removeTypeDuplicates(nodes) {
  const generics = {};
  const bases = {};
  const typeGroups = [];
  const types = [];

  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (!node) continue;

    if (types.indexOf(node) >= 0) {
      continue;
    }

    if ((0, _generated.isTSAnyKeyword)(node)) {
      return [node];
    }

    if ((0, _generated.isTSBaseType)(node)) {
      bases[node.type] = node;
      continue;
    }

    if ((0, _generated.isTSUnionType)(node)) {
      if (typeGroups.indexOf(node.types) < 0) {
        nodes = nodes.concat(node.types);
        typeGroups.push(node.types);
      }

      continue;
    }

    types.push(node);
  }

  for (const type of Object.keys(bases)) {
    types.push(bases[type]);
  }

  for (const name of Object.keys(generics)) {
    types.push(generics[name]);
  }

  return types;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = getBindingIdentifiers;

var _generated = __webpack_require__(/*! ../validators/generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function getBindingIdentifiers(node, duplicates, outerOnly) {
  let search = [].concat(node);
  const ids = Object.create(null);

  while (search.length) {
    const id = search.shift();
    if (!id) continue;
    const keys = getBindingIdentifiers.keys[id.type];

    if ((0, _generated.isIdentifier)(id)) {
      if (duplicates) {
        const _ids = ids[id.name] = ids[id.name] || [];

        _ids.push(id);
      } else {
        ids[id.name] = id;
      }

      continue;
    }

    if ((0, _generated.isExportDeclaration)(id) && !(0, _generated.isExportAllDeclaration)(id)) {
      if ((0, _generated.isDeclaration)(id.declaration)) {
        search.push(id.declaration);
      }

      continue;
    }

    if (outerOnly) {
      if ((0, _generated.isFunctionDeclaration)(id)) {
        search.push(id.id);
        continue;
      }

      if ((0, _generated.isFunctionExpression)(id)) {
        continue;
      }
    }

    if (keys) {
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];

        if (id[key]) {
          search = search.concat(id[key]);
        }
      }
    }
  }

  return ids;
}

getBindingIdentifiers.keys = {
  DeclareClass: ["id"],
  DeclareFunction: ["id"],
  DeclareModule: ["id"],
  DeclareVariable: ["id"],
  DeclareInterface: ["id"],
  DeclareTypeAlias: ["id"],
  DeclareOpaqueType: ["id"],
  InterfaceDeclaration: ["id"],
  TypeAlias: ["id"],
  OpaqueType: ["id"],
  CatchClause: ["param"],
  LabeledStatement: ["label"],
  UnaryExpression: ["argument"],
  AssignmentExpression: ["left"],
  ImportSpecifier: ["local"],
  ImportNamespaceSpecifier: ["local"],
  ImportDefaultSpecifier: ["local"],
  ImportDeclaration: ["specifiers"],
  ExportSpecifier: ["exported"],
  ExportNamespaceSpecifier: ["exported"],
  ExportDefaultSpecifier: ["exported"],
  FunctionDeclaration: ["id", "params"],
  FunctionExpression: ["id", "params"],
  ArrowFunctionExpression: ["params"],
  ObjectMethod: ["params"],
  ClassMethod: ["params"],
  ForInStatement: ["left"],
  ForOfStatement: ["left"],
  ClassDeclaration: ["id"],
  ClassExpression: ["id"],
  RestElement: ["argument"],
  UpdateExpression: ["argument"],
  ObjectProperty: ["value"],
  AssignmentPattern: ["left"],
  ArrayPattern: ["elements"],
  ObjectPattern: ["properties"],
  VariableDeclaration: ["declarations"],
  VariableDeclarator: ["id"]
};

/***/ }),

/***/ "./node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _getBindingIdentifiers = __webpack_require__(/*! ./getBindingIdentifiers */ "./node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");

var _default = getOuterBindingIdentifiers;
exports.default = _default;

function getOuterBindingIdentifiers(node, duplicates) {
  return (0, _getBindingIdentifiers.default)(node, duplicates, true);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/traverse/traverse.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/types/lib/traverse/traverse.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = traverse;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function traverse(node, handlers, state) {
  if (typeof handlers === "function") {
    handlers = {
      enter: handlers
    };
  }

  const {
    enter,
    exit
  } = handlers;
  traverseSimpleImpl(node, enter, exit, state, []);
}

function traverseSimpleImpl(node, enter, exit, state, ancestors) {
  const keys = _definitions.VISITOR_KEYS[node.type];
  if (!keys) return;
  if (enter) enter(node, ancestors, state);

  for (const key of keys) {
    const subNode = node[key];

    if (Array.isArray(subNode)) {
      for (let i = 0; i < subNode.length; i++) {
        const child = subNode[i];
        if (!child) continue;
        ancestors.push({
          node,
          key,
          index: i
        });
        traverseSimpleImpl(child, enter, exit, state, ancestors);
        ancestors.pop();
      }
    } else if (subNode) {
      ancestors.push({
        node,
        key
      });
      traverseSimpleImpl(subNode, enter, exit, state, ancestors);
      ancestors.pop();
    }
  }

  if (exit) exit(node, ancestors, state);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/traverse/traverseFast.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/traverse/traverseFast.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = traverseFast;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function traverseFast(node, enter, opts) {
  if (!node) return;
  const keys = _definitions.VISITOR_KEYS[node.type];
  if (!keys) return;
  opts = opts || {};
  enter(node, opts);

  for (const key of keys) {
    const subNode = node[key];

    if (Array.isArray(subNode)) {
      for (const node of subNode) {
        traverseFast(node, enter, opts);
      }
    } else {
      traverseFast(subNode, enter, opts);
    }
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/utils/inherit.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/types/lib/utils/inherit.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = inherit;

function inherit(key, child, parent) {
  if (child && parent) {
    child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = cleanJSXElementLiteralChild;

var _generated = __webpack_require__(/*! ../../builders/generated */ "./node_modules/@babel/types/lib/builders/generated/index.js");

function cleanJSXElementLiteralChild(child, args) {
  const lines = child.value.split(/\r\n|\n|\r/);
  let lastNonEmptyLine = 0;

  for (let i = 0; i < lines.length; i++) {
    if (lines[i].match(/[^ \t]/)) {
      lastNonEmptyLine = i;
    }
  }

  let str = "";

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const isFirstLine = i === 0;
    const isLastLine = i === lines.length - 1;
    const isLastNonEmptyLine = i === lastNonEmptyLine;
    let trimmedLine = line.replace(/\t/g, " ");

    if (!isFirstLine) {
      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
    }

    if (!isLastLine) {
      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
    }

    if (trimmedLine) {
      if (!isLastNonEmptyLine) {
        trimmedLine += " ";
      }

      str += trimmedLine;
    }
  }

  if (str) args.push((0, _generated.stringLiteral)(str));
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/utils/shallowEqual.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/types/lib/utils/shallowEqual.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = shallowEqual;

function shallowEqual(actual, expected) {
  const keys = Object.keys(expected);

  for (const key of keys) {
    if (actual[key] !== expected[key]) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildMatchMemberExpression;

var _matchesPattern = __webpack_require__(/*! ./matchesPattern */ "./node_modules/@babel/types/lib/validators/matchesPattern.js");

function buildMatchMemberExpression(match, allowPartial) {
  const parts = match.split(".");
  return member => (0, _matchesPattern.default)(member, parts, allowPartial);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/generated/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/generated/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isArrayExpression = isArrayExpression;
exports.isAssignmentExpression = isAssignmentExpression;
exports.isBinaryExpression = isBinaryExpression;
exports.isInterpreterDirective = isInterpreterDirective;
exports.isDirective = isDirective;
exports.isDirectiveLiteral = isDirectiveLiteral;
exports.isBlockStatement = isBlockStatement;
exports.isBreakStatement = isBreakStatement;
exports.isCallExpression = isCallExpression;
exports.isCatchClause = isCatchClause;
exports.isConditionalExpression = isConditionalExpression;
exports.isContinueStatement = isContinueStatement;
exports.isDebuggerStatement = isDebuggerStatement;
exports.isDoWhileStatement = isDoWhileStatement;
exports.isEmptyStatement = isEmptyStatement;
exports.isExpressionStatement = isExpressionStatement;
exports.isFile = isFile;
exports.isForInStatement = isForInStatement;
exports.isForStatement = isForStatement;
exports.isFunctionDeclaration = isFunctionDeclaration;
exports.isFunctionExpression = isFunctionExpression;
exports.isIdentifier = isIdentifier;
exports.isIfStatement = isIfStatement;
exports.isLabeledStatement = isLabeledStatement;
exports.isStringLiteral = isStringLiteral;
exports.isNumericLiteral = isNumericLiteral;
exports.isNullLiteral = isNullLiteral;
exports.isBooleanLiteral = isBooleanLiteral;
exports.isRegExpLiteral = isRegExpLiteral;
exports.isLogicalExpression = isLogicalExpression;
exports.isMemberExpression = isMemberExpression;
exports.isNewExpression = isNewExpression;
exports.isProgram = isProgram;
exports.isObjectExpression = isObjectExpression;
exports.isObjectMethod = isObjectMethod;
exports.isObjectProperty = isObjectProperty;
exports.isRestElement = isRestElement;
exports.isReturnStatement = isReturnStatement;
exports.isSequenceExpression = isSequenceExpression;
exports.isParenthesizedExpression = isParenthesizedExpression;
exports.isSwitchCase = isSwitchCase;
exports.isSwitchStatement = isSwitchStatement;
exports.isThisExpression = isThisExpression;
exports.isThrowStatement = isThrowStatement;
exports.isTryStatement = isTryStatement;
exports.isUnaryExpression = isUnaryExpression;
exports.isUpdateExpression = isUpdateExpression;
exports.isVariableDeclaration = isVariableDeclaration;
exports.isVariableDeclarator = isVariableDeclarator;
exports.isWhileStatement = isWhileStatement;
exports.isWithStatement = isWithStatement;
exports.isAssignmentPattern = isAssignmentPattern;
exports.isArrayPattern = isArrayPattern;
exports.isArrowFunctionExpression = isArrowFunctionExpression;
exports.isClassBody = isClassBody;
exports.isClassExpression = isClassExpression;
exports.isClassDeclaration = isClassDeclaration;
exports.isExportAllDeclaration = isExportAllDeclaration;
exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
exports.isExportNamedDeclaration = isExportNamedDeclaration;
exports.isExportSpecifier = isExportSpecifier;
exports.isForOfStatement = isForOfStatement;
exports.isImportDeclaration = isImportDeclaration;
exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
exports.isImportSpecifier = isImportSpecifier;
exports.isMetaProperty = isMetaProperty;
exports.isClassMethod = isClassMethod;
exports.isObjectPattern = isObjectPattern;
exports.isSpreadElement = isSpreadElement;
exports.isSuper = isSuper;
exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
exports.isTemplateElement = isTemplateElement;
exports.isTemplateLiteral = isTemplateLiteral;
exports.isYieldExpression = isYieldExpression;
exports.isAwaitExpression = isAwaitExpression;
exports.isImport = isImport;
exports.isBigIntLiteral = isBigIntLiteral;
exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
exports.isOptionalMemberExpression = isOptionalMemberExpression;
exports.isOptionalCallExpression = isOptionalCallExpression;
exports.isClassProperty = isClassProperty;
exports.isClassPrivateProperty = isClassPrivateProperty;
exports.isClassPrivateMethod = isClassPrivateMethod;
exports.isPrivateName = isPrivateName;
exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
exports.isClassImplements = isClassImplements;
exports.isDeclareClass = isDeclareClass;
exports.isDeclareFunction = isDeclareFunction;
exports.isDeclareInterface = isDeclareInterface;
exports.isDeclareModule = isDeclareModule;
exports.isDeclareModuleExports = isDeclareModuleExports;
exports.isDeclareTypeAlias = isDeclareTypeAlias;
exports.isDeclareOpaqueType = isDeclareOpaqueType;
exports.isDeclareVariable = isDeclareVariable;
exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
exports.isDeclaredPredicate = isDeclaredPredicate;
exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
exports.isFunctionTypeParam = isFunctionTypeParam;
exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
exports.isInferredPredicate = isInferredPredicate;
exports.isInterfaceExtends = isInterfaceExtends;
exports.isInterfaceDeclaration = isInterfaceDeclaration;
exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
exports.isObjectTypeIndexer = isObjectTypeIndexer;
exports.isObjectTypeProperty = isObjectTypeProperty;
exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
exports.isOpaqueType = isOpaqueType;
exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
exports.isStringTypeAnnotation = isStringTypeAnnotation;
exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
exports.isThisTypeAnnotation = isThisTypeAnnotation;
exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
exports.isTypeAlias = isTypeAlias;
exports.isTypeAnnotation = isTypeAnnotation;
exports.isTypeCastExpression = isTypeCastExpression;
exports.isTypeParameter = isTypeParameter;
exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
exports.isVariance = isVariance;
exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
exports.isEnumDeclaration = isEnumDeclaration;
exports.isEnumBooleanBody = isEnumBooleanBody;
exports.isEnumNumberBody = isEnumNumberBody;
exports.isEnumStringBody = isEnumStringBody;
exports.isEnumSymbolBody = isEnumSymbolBody;
exports.isEnumBooleanMember = isEnumBooleanMember;
exports.isEnumNumberMember = isEnumNumberMember;
exports.isEnumStringMember = isEnumStringMember;
exports.isEnumDefaultedMember = isEnumDefaultedMember;
exports.isIndexedAccessType = isIndexedAccessType;
exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
exports.isJSXAttribute = isJSXAttribute;
exports.isJSXClosingElement = isJSXClosingElement;
exports.isJSXElement = isJSXElement;
exports.isJSXEmptyExpression = isJSXEmptyExpression;
exports.isJSXExpressionContainer = isJSXExpressionContainer;
exports.isJSXSpreadChild = isJSXSpreadChild;
exports.isJSXIdentifier = isJSXIdentifier;
exports.isJSXMemberExpression = isJSXMemberExpression;
exports.isJSXNamespacedName = isJSXNamespacedName;
exports.isJSXOpeningElement = isJSXOpeningElement;
exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
exports.isJSXText = isJSXText;
exports.isJSXFragment = isJSXFragment;
exports.isJSXOpeningFragment = isJSXOpeningFragment;
exports.isJSXClosingFragment = isJSXClosingFragment;
exports.isNoop = isNoop;
exports.isPlaceholder = isPlaceholder;
exports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
exports.isArgumentPlaceholder = isArgumentPlaceholder;
exports.isBindExpression = isBindExpression;
exports.isImportAttribute = isImportAttribute;
exports.isDecorator = isDecorator;
exports.isDoExpression = isDoExpression;
exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
exports.isRecordExpression = isRecordExpression;
exports.isTupleExpression = isTupleExpression;
exports.isDecimalLiteral = isDecimalLiteral;
exports.isStaticBlock = isStaticBlock;
exports.isModuleExpression = isModuleExpression;
exports.isTopicReference = isTopicReference;
exports.isPipelineTopicExpression = isPipelineTopicExpression;
exports.isPipelineBareFunction = isPipelineBareFunction;
exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
exports.isTSParameterProperty = isTSParameterProperty;
exports.isTSDeclareFunction = isTSDeclareFunction;
exports.isTSDeclareMethod = isTSDeclareMethod;
exports.isTSQualifiedName = isTSQualifiedName;
exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
exports.isTSPropertySignature = isTSPropertySignature;
exports.isTSMethodSignature = isTSMethodSignature;
exports.isTSIndexSignature = isTSIndexSignature;
exports.isTSAnyKeyword = isTSAnyKeyword;
exports.isTSBooleanKeyword = isTSBooleanKeyword;
exports.isTSBigIntKeyword = isTSBigIntKeyword;
exports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
exports.isTSNeverKeyword = isTSNeverKeyword;
exports.isTSNullKeyword = isTSNullKeyword;
exports.isTSNumberKeyword = isTSNumberKeyword;
exports.isTSObjectKeyword = isTSObjectKeyword;
exports.isTSStringKeyword = isTSStringKeyword;
exports.isTSSymbolKeyword = isTSSymbolKeyword;
exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
exports.isTSUnknownKeyword = isTSUnknownKeyword;
exports.isTSVoidKeyword = isTSVoidKeyword;
exports.isTSThisType = isTSThisType;
exports.isTSFunctionType = isTSFunctionType;
exports.isTSConstructorType = isTSConstructorType;
exports.isTSTypeReference = isTSTypeReference;
exports.isTSTypePredicate = isTSTypePredicate;
exports.isTSTypeQuery = isTSTypeQuery;
exports.isTSTypeLiteral = isTSTypeLiteral;
exports.isTSArrayType = isTSArrayType;
exports.isTSTupleType = isTSTupleType;
exports.isTSOptionalType = isTSOptionalType;
exports.isTSRestType = isTSRestType;
exports.isTSNamedTupleMember = isTSNamedTupleMember;
exports.isTSUnionType = isTSUnionType;
exports.isTSIntersectionType = isTSIntersectionType;
exports.isTSConditionalType = isTSConditionalType;
exports.isTSInferType = isTSInferType;
exports.isTSParenthesizedType = isTSParenthesizedType;
exports.isTSTypeOperator = isTSTypeOperator;
exports.isTSIndexedAccessType = isTSIndexedAccessType;
exports.isTSMappedType = isTSMappedType;
exports.isTSLiteralType = isTSLiteralType;
exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
exports.isTSInterfaceBody = isTSInterfaceBody;
exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
exports.isTSAsExpression = isTSAsExpression;
exports.isTSTypeAssertion = isTSTypeAssertion;
exports.isTSEnumDeclaration = isTSEnumDeclaration;
exports.isTSEnumMember = isTSEnumMember;
exports.isTSModuleDeclaration = isTSModuleDeclaration;
exports.isTSModuleBlock = isTSModuleBlock;
exports.isTSImportType = isTSImportType;
exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
exports.isTSExternalModuleReference = isTSExternalModuleReference;
exports.isTSNonNullExpression = isTSNonNullExpression;
exports.isTSExportAssignment = isTSExportAssignment;
exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
exports.isTSTypeAnnotation = isTSTypeAnnotation;
exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
exports.isTSTypeParameter = isTSTypeParameter;
exports.isExpression = isExpression;
exports.isBinary = isBinary;
exports.isScopable = isScopable;
exports.isBlockParent = isBlockParent;
exports.isBlock = isBlock;
exports.isStatement = isStatement;
exports.isTerminatorless = isTerminatorless;
exports.isCompletionStatement = isCompletionStatement;
exports.isConditional = isConditional;
exports.isLoop = isLoop;
exports.isWhile = isWhile;
exports.isExpressionWrapper = isExpressionWrapper;
exports.isFor = isFor;
exports.isForXStatement = isForXStatement;
exports.isFunction = isFunction;
exports.isFunctionParent = isFunctionParent;
exports.isPureish = isPureish;
exports.isDeclaration = isDeclaration;
exports.isPatternLike = isPatternLike;
exports.isLVal = isLVal;
exports.isTSEntityName = isTSEntityName;
exports.isLiteral = isLiteral;
exports.isImmutable = isImmutable;
exports.isUserWhitespacable = isUserWhitespacable;
exports.isMethod = isMethod;
exports.isObjectMember = isObjectMember;
exports.isProperty = isProperty;
exports.isUnaryLike = isUnaryLike;
exports.isPattern = isPattern;
exports.isClass = isClass;
exports.isModuleDeclaration = isModuleDeclaration;
exports.isExportDeclaration = isExportDeclaration;
exports.isModuleSpecifier = isModuleSpecifier;
exports.isPrivate = isPrivate;
exports.isFlow = isFlow;
exports.isFlowType = isFlowType;
exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
exports.isFlowDeclaration = isFlowDeclaration;
exports.isFlowPredicate = isFlowPredicate;
exports.isEnumBody = isEnumBody;
exports.isEnumMember = isEnumMember;
exports.isJSX = isJSX;
exports.isTSTypeElement = isTSTypeElement;
exports.isTSType = isTSType;
exports.isTSBaseType = isTSBaseType;
exports.isNumberLiteral = isNumberLiteral;
exports.isRegexLiteral = isRegexLiteral;
exports.isRestProperty = isRestProperty;
exports.isSpreadProperty = isSpreadProperty;

var _shallowEqual = __webpack_require__(/*! ../../utils/shallowEqual */ "./node_modules/@babel/types/lib/utils/shallowEqual.js");

function isArrayExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ArrayExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isAssignmentExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "AssignmentExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBinaryExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BinaryExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isInterpreterDirective(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "InterpreterDirective") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDirective(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Directive") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDirectiveLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DirectiveLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBlockStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BlockStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBreakStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BreakStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isCallExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "CallExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isCatchClause(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "CatchClause") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isConditionalExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ConditionalExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isContinueStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ContinueStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDebuggerStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DebuggerStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDoWhileStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DoWhileStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEmptyStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EmptyStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExpressionStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExpressionStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFile(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "File") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isForInStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ForInStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isForStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ForStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFunctionDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "FunctionDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFunctionExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "FunctionExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isIdentifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Identifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isIfStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "IfStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isLabeledStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "LabeledStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isStringLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "StringLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNumericLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NumericLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNullLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NullLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBooleanLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BooleanLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isRegExpLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "RegExpLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isLogicalExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "LogicalExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isMemberExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "MemberExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNewExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NewExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isProgram(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Program") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectMethod(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectMethod") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isRestElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "RestElement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isReturnStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ReturnStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSequenceExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "SequenceExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isParenthesizedExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ParenthesizedExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSwitchCase(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "SwitchCase") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSwitchStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "SwitchStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isThisExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ThisExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isThrowStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ThrowStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTryStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TryStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isUnaryExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "UnaryExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isUpdateExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "UpdateExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isVariableDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "VariableDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isVariableDeclarator(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "VariableDeclarator") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isWhileStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "WhileStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isWithStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "WithStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isAssignmentPattern(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "AssignmentPattern") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isArrayPattern(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ArrayPattern") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isArrowFunctionExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ArrowFunctionExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassBody") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportAllDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExportAllDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportDefaultDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExportDefaultDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportNamedDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExportNamedDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExportSpecifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isForOfStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ForOfStatement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImportDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ImportDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImportDefaultSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ImportDefaultSpecifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImportNamespaceSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ImportNamespaceSpecifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImportSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ImportSpecifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isMetaProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "MetaProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassMethod(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassMethod") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectPattern(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectPattern") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSpreadElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "SpreadElement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSuper(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Super") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTaggedTemplateExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TaggedTemplateExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTemplateElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TemplateElement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTemplateLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TemplateLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isYieldExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "YieldExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isAwaitExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "AwaitExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImport(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Import") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBigIntLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BigIntLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportNamespaceSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExportNamespaceSpecifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isOptionalMemberExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "OptionalMemberExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isOptionalCallExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "OptionalCallExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassPrivateProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassPrivateProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassPrivateMethod(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassPrivateMethod") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPrivateName(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "PrivateName") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isAnyTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "AnyTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isArrayTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ArrayTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBooleanTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BooleanTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBooleanLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BooleanLiteralTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNullLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NullLiteralTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClassImplements(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ClassImplements") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareClass(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareClass") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareFunction(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareFunction") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareInterface(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareInterface") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareModule(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareModule") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareModuleExports(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareModuleExports") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareTypeAlias(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareTypeAlias") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareOpaqueType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareOpaqueType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareVariable(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareVariable") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareExportDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareExportDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclareExportAllDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclareExportAllDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclaredPredicate(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DeclaredPredicate") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExistsTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExistsTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFunctionTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "FunctionTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFunctionTypeParam(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "FunctionTypeParam") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isGenericTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "GenericTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isInferredPredicate(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "InferredPredicate") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isInterfaceExtends(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "InterfaceExtends") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isInterfaceDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "InterfaceDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isInterfaceTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "InterfaceTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isIntersectionTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "IntersectionTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isMixedTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "MixedTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEmptyTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EmptyTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNullableTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NullableTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNumberLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NumberLiteralTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNumberTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NumberTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectTypeInternalSlot(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectTypeInternalSlot") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectTypeCallProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectTypeCallProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectTypeIndexer(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectTypeIndexer") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectTypeProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectTypeProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectTypeSpreadProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ObjectTypeSpreadProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isOpaqueType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "OpaqueType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isQualifiedTypeIdentifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "QualifiedTypeIdentifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isStringLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "StringLiteralTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isStringTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "StringTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSymbolTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "SymbolTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isThisTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ThisTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTupleTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TupleTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeofTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeofTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeAlias(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeAlias") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeCastExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeCastExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeParameter(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeParameter") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeParameterDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeParameterDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTypeParameterInstantiation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TypeParameterInstantiation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isUnionTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "UnionTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isVariance(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Variance") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isVoidTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "VoidTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumBooleanBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumBooleanBody") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumNumberBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumNumberBody") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumStringBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumStringBody") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumSymbolBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumSymbolBody") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumBooleanMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumBooleanMember") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumNumberMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumNumberMember") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumStringMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumStringMember") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumDefaultedMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "EnumDefaultedMember") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isIndexedAccessType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "IndexedAccessType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isOptionalIndexedAccessType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "OptionalIndexedAccessType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXAttribute(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXAttribute") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXClosingElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXClosingElement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXElement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXEmptyExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXEmptyExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXExpressionContainer(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXExpressionContainer") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXSpreadChild(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXSpreadChild") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXIdentifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXIdentifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXMemberExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXMemberExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXNamespacedName(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXNamespacedName") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXOpeningElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXOpeningElement") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXSpreadAttribute(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXSpreadAttribute") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXText(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXText") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXFragment(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXFragment") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXOpeningFragment(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXOpeningFragment") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSXClosingFragment(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "JSXClosingFragment") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNoop(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Noop") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPlaceholder(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Placeholder") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isV8IntrinsicIdentifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "V8IntrinsicIdentifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isArgumentPlaceholder(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ArgumentPlaceholder") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBindExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "BindExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImportAttribute(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ImportAttribute") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDecorator(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "Decorator") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDoExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DoExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportDefaultSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ExportDefaultSpecifier") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isRecordExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "RecordExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTupleExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TupleExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDecimalLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "DecimalLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isStaticBlock(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "StaticBlock") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isModuleExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "ModuleExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTopicReference(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TopicReference") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPipelineTopicExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "PipelineTopicExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPipelineBareFunction(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "PipelineBareFunction") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPipelinePrimaryTopicReference(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "PipelinePrimaryTopicReference") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSParameterProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSParameterProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSDeclareFunction(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSDeclareFunction") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSDeclareMethod(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSDeclareMethod") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSQualifiedName(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSQualifiedName") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSCallSignatureDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSCallSignatureDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSConstructSignatureDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSConstructSignatureDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSPropertySignature(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSPropertySignature") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSMethodSignature(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSMethodSignature") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSIndexSignature(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSIndexSignature") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSAnyKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSAnyKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSBooleanKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSBooleanKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSBigIntKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSBigIntKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSIntrinsicKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSIntrinsicKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSNeverKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSNeverKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSNullKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSNullKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSNumberKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSNumberKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSObjectKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSObjectKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSStringKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSStringKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSSymbolKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSSymbolKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSUndefinedKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSUndefinedKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSUnknownKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSUnknownKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSVoidKeyword(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSVoidKeyword") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSThisType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSThisType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSFunctionType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSFunctionType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSConstructorType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSConstructorType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeReference(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeReference") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypePredicate(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypePredicate") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeQuery(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeQuery") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSArrayType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSArrayType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTupleType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTupleType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSOptionalType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSOptionalType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSRestType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSRestType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSNamedTupleMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSNamedTupleMember") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSUnionType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSUnionType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSIntersectionType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSIntersectionType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSConditionalType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSConditionalType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSInferType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSInferType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSParenthesizedType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSParenthesizedType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeOperator(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeOperator") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSIndexedAccessType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSIndexedAccessType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSMappedType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSMappedType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSLiteralType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSLiteralType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSExpressionWithTypeArguments(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSExpressionWithTypeArguments") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSInterfaceDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSInterfaceDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSInterfaceBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSInterfaceBody") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeAliasDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeAliasDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSAsExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSAsExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeAssertion(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeAssertion") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSEnumDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSEnumDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSEnumMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSEnumMember") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSModuleDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSModuleDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSModuleBlock(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSModuleBlock") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSImportType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSImportType") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSImportEqualsDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSImportEqualsDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSExternalModuleReference(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSExternalModuleReference") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSNonNullExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSNonNullExpression") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSExportAssignment(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSExportAssignment") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSNamespaceExportDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSNamespaceExportDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeAnnotation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeParameterInstantiation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeParameterInstantiation") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeParameterDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeParameterDeclaration") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeParameter(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "TSTypeParameter") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExpression(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ArrayExpression" === nodeType || "AssignmentExpression" === nodeType || "BinaryExpression" === nodeType || "CallExpression" === nodeType || "ConditionalExpression" === nodeType || "FunctionExpression" === nodeType || "Identifier" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "LogicalExpression" === nodeType || "MemberExpression" === nodeType || "NewExpression" === nodeType || "ObjectExpression" === nodeType || "SequenceExpression" === nodeType || "ParenthesizedExpression" === nodeType || "ThisExpression" === nodeType || "UnaryExpression" === nodeType || "UpdateExpression" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "MetaProperty" === nodeType || "Super" === nodeType || "TaggedTemplateExpression" === nodeType || "TemplateLiteral" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType || "Import" === nodeType || "BigIntLiteral" === nodeType || "OptionalMemberExpression" === nodeType || "OptionalCallExpression" === nodeType || "TypeCastExpression" === nodeType || "JSXElement" === nodeType || "JSXFragment" === nodeType || "BindExpression" === nodeType || "DoExpression" === nodeType || "RecordExpression" === nodeType || "TupleExpression" === nodeType || "DecimalLiteral" === nodeType || "ModuleExpression" === nodeType || "TopicReference" === nodeType || "PipelineTopicExpression" === nodeType || "PipelineBareFunction" === nodeType || "PipelinePrimaryTopicReference" === nodeType || "TSAsExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || nodeType === "Placeholder" && ("Expression" === node.expectedNode || "Identifier" === node.expectedNode || "StringLiteral" === node.expectedNode)) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBinary(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BinaryExpression" === nodeType || "LogicalExpression" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isScopable(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "ClassDeclaration" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || nodeType === "Placeholder" && "BlockStatement" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBlockParent(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || nodeType === "Placeholder" && "BlockStatement" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isBlock(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BlockStatement" === nodeType || "Program" === nodeType || "TSModuleBlock" === nodeType || nodeType === "Placeholder" && "BlockStatement" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BlockStatement" === nodeType || "BreakStatement" === nodeType || "ContinueStatement" === nodeType || "DebuggerStatement" === nodeType || "DoWhileStatement" === nodeType || "EmptyStatement" === nodeType || "ExpressionStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "IfStatement" === nodeType || "LabeledStatement" === nodeType || "ReturnStatement" === nodeType || "SwitchStatement" === nodeType || "ThrowStatement" === nodeType || "TryStatement" === nodeType || "VariableDeclaration" === nodeType || "WhileStatement" === nodeType || "WithStatement" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ForOfStatement" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || "TSImportEqualsDeclaration" === nodeType || "TSExportAssignment" === nodeType || "TSNamespaceExportDeclaration" === nodeType || nodeType === "Placeholder" && ("Statement" === node.expectedNode || "Declaration" === node.expectedNode || "BlockStatement" === node.expectedNode)) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTerminatorless(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isCompletionStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isConditional(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ConditionalExpression" === nodeType || "IfStatement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isLoop(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "WhileStatement" === nodeType || "ForOfStatement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isWhile(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("DoWhileStatement" === nodeType || "WhileStatement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExpressionWrapper(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ExpressionStatement" === nodeType || "ParenthesizedExpression" === nodeType || "TypeCastExpression" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFor(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ForInStatement" === nodeType || "ForStatement" === nodeType || "ForOfStatement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isForXStatement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ForInStatement" === nodeType || "ForOfStatement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFunction(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFunctionParent(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPureish(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "ArrowFunctionExpression" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || nodeType === "Placeholder" && "StringLiteral" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("FunctionDeclaration" === nodeType || "VariableDeclaration" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || nodeType === "Placeholder" && "Declaration" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPatternLike(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("Identifier" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || nodeType === "Placeholder" && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode)) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isLVal(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("Identifier" === nodeType || "MemberExpression" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "TSParameterProperty" === nodeType || nodeType === "Placeholder" && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode)) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSEntityName(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("Identifier" === nodeType || "TSQualifiedName" === nodeType || nodeType === "Placeholder" && "Identifier" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isLiteral(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "TemplateLiteral" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || nodeType === "Placeholder" && "StringLiteral" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isImmutable(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "BigIntLiteral" === nodeType || "JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXOpeningElement" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType || "DecimalLiteral" === nodeType || nodeType === "Placeholder" && "StringLiteral" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isUserWhitespacable(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isMethod(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ObjectMethod" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isObjectMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isProperty(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ObjectProperty" === nodeType || "ClassProperty" === nodeType || "ClassPrivateProperty" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isUnaryLike(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("UnaryExpression" === nodeType || "SpreadElement" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPattern(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || nodeType === "Placeholder" && "Pattern" === node.expectedNode) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isClass(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ClassExpression" === nodeType || "ClassDeclaration" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isModuleDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isExportDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isModuleSpecifier(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ExportSpecifier" === nodeType || "ImportDefaultSpecifier" === nodeType || "ImportNamespaceSpecifier" === nodeType || "ImportSpecifier" === nodeType || "ExportNamespaceSpecifier" === nodeType || "ExportDefaultSpecifier" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isPrivate(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("ClassPrivateProperty" === nodeType || "ClassPrivateMethod" === nodeType || "PrivateName" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFlow(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ClassImplements" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "DeclaredPredicate" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "FunctionTypeParam" === nodeType || "GenericTypeAnnotation" === nodeType || "InferredPredicate" === nodeType || "InterfaceExtends" === nodeType || "InterfaceDeclaration" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType || "OpaqueType" === nodeType || "QualifiedTypeIdentifier" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "TypeAlias" === nodeType || "TypeAnnotation" === nodeType || "TypeCastExpression" === nodeType || "TypeParameter" === nodeType || "TypeParameterDeclaration" === nodeType || "TypeParameterInstantiation" === nodeType || "UnionTypeAnnotation" === nodeType || "Variance" === nodeType || "VoidTypeAnnotation" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFlowType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "GenericTypeAnnotation" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "UnionTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFlowBaseAnnotation(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("AnyTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFlowDeclaration(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isFlowPredicate(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("DeclaredPredicate" === nodeType || "InferredPredicate" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumBody(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("EnumBooleanBody" === nodeType || "EnumNumberBody" === nodeType || "EnumStringBody" === nodeType || "EnumSymbolBody" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isEnumMember(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("EnumBooleanMember" === nodeType || "EnumNumberMember" === nodeType || "EnumStringMember" === nodeType || "EnumDefaultedMember" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isJSX(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXEmptyExpression" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXIdentifier" === nodeType || "JSXMemberExpression" === nodeType || "JSXNamespacedName" === nodeType || "JSXOpeningElement" === nodeType || "JSXSpreadAttribute" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSTypeElement(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("TSCallSignatureDeclaration" === nodeType || "TSConstructSignatureDeclaration" === nodeType || "TSPropertySignature" === nodeType || "TSMethodSignature" === nodeType || "TSIndexSignature" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSFunctionType" === nodeType || "TSConstructorType" === nodeType || "TSTypeReference" === nodeType || "TSTypePredicate" === nodeType || "TSTypeQuery" === nodeType || "TSTypeLiteral" === nodeType || "TSArrayType" === nodeType || "TSTupleType" === nodeType || "TSOptionalType" === nodeType || "TSRestType" === nodeType || "TSUnionType" === nodeType || "TSIntersectionType" === nodeType || "TSConditionalType" === nodeType || "TSInferType" === nodeType || "TSParenthesizedType" === nodeType || "TSTypeOperator" === nodeType || "TSIndexedAccessType" === nodeType || "TSMappedType" === nodeType || "TSLiteralType" === nodeType || "TSExpressionWithTypeArguments" === nodeType || "TSImportType" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isTSBaseType(node, opts) {
  if (!node) return false;
  const nodeType = node.type;

  if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSLiteralType" === nodeType) {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isNumberLiteral(node, opts) {
  console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "NumberLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isRegexLiteral(node, opts) {
  console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "RegexLiteral") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isRestProperty(node, opts) {
  console.trace("The node type RestProperty has been renamed to RestElement");
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "RestProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

function isSpreadProperty(node, opts) {
  console.trace("The node type SpreadProperty has been renamed to SpreadElement");
  if (!node) return false;
  const nodeType = node.type;

  if (nodeType === "SpreadProperty") {
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }

  return false;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/is.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/is.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = is;

var _shallowEqual = __webpack_require__(/*! ../utils/shallowEqual */ "./node_modules/@babel/types/lib/utils/shallowEqual.js");

var _isType = __webpack_require__(/*! ./isType */ "./node_modules/@babel/types/lib/validators/isType.js");

var _isPlaceholderType = __webpack_require__(/*! ./isPlaceholderType */ "./node_modules/@babel/types/lib/validators/isPlaceholderType.js");

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function is(type, node, opts) {
  if (!node) return false;
  const matches = (0, _isType.default)(node.type, type);

  if (!matches) {
    if (!opts && node.type === "Placeholder" && type in _definitions.FLIPPED_ALIAS_KEYS) {
      return (0, _isPlaceholderType.default)(node.expectedNode, type);
    }

    return false;
  }

  if (typeof opts === "undefined") {
    return true;
  } else {
    return (0, _shallowEqual.default)(node, opts);
  }
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isBinding.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isBinding.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isBinding;

var _getBindingIdentifiers = __webpack_require__(/*! ../retrievers/getBindingIdentifiers */ "./node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");

function isBinding(node, parent, grandparent) {
  if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
    return false;
  }

  const keys = _getBindingIdentifiers.default.keys[parent.type];

  if (keys) {
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const val = parent[key];

      if (Array.isArray(val)) {
        if (val.indexOf(node) >= 0) return true;
      } else {
        if (val === node) return true;
      }
    }
  }

  return false;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isBlockScoped.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isBlockScoped.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isBlockScoped;

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _isLet = __webpack_require__(/*! ./isLet */ "./node_modules/@babel/types/lib/validators/isLet.js");

function isBlockScoped(node) {
  return (0, _generated.isFunctionDeclaration)(node) || (0, _generated.isClassDeclaration)(node) || (0, _isLet.default)(node);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isImmutable.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isImmutable.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isImmutable;

var _isType = __webpack_require__(/*! ./isType */ "./node_modules/@babel/types/lib/validators/isType.js");

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function isImmutable(node) {
  if ((0, _isType.default)(node.type, "Immutable")) return true;

  if ((0, _generated.isIdentifier)(node)) {
    if (node.name === "undefined") {
      return true;
    } else {
      return false;
    }
  }

  return false;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isLet.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isLet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isLet;

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/@babel/types/lib/constants/index.js");

function isLet(node) {
  return (0, _generated.isVariableDeclaration)(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isNode.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isNode.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isNode;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function isNode(node) {
  return !!(node && _definitions.VISITOR_KEYS[node.type]);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isNodesEquivalent.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isNodesEquivalent.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isNodesEquivalent;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function isNodesEquivalent(a, b) {
  if (typeof a !== "object" || typeof b !== "object" || a == null || b == null) {
    return a === b;
  }

  if (a.type !== b.type) {
    return false;
  }

  const fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type);
  const visitorKeys = _definitions.VISITOR_KEYS[a.type];

  for (const field of fields) {
    if (typeof a[field] !== typeof b[field]) {
      return false;
    }

    if (a[field] == null && b[field] == null) {
      continue;
    } else if (a[field] == null || b[field] == null) {
      return false;
    }

    if (Array.isArray(a[field])) {
      if (!Array.isArray(b[field])) {
        return false;
      }

      if (a[field].length !== b[field].length) {
        return false;
      }

      for (let i = 0; i < a[field].length; i++) {
        if (!isNodesEquivalent(a[field][i], b[field][i])) {
          return false;
        }
      }

      continue;
    }

    if (typeof a[field] === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
      for (const key of Object.keys(a[field])) {
        if (a[field][key] !== b[field][key]) {
          return false;
        }
      }

      continue;
    }

    if (!isNodesEquivalent(a[field], b[field])) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isPlaceholderType.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isPlaceholderType.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isPlaceholderType;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function isPlaceholderType(placeholderType, targetType) {
  if (placeholderType === targetType) return true;
  const aliases = _definitions.PLACEHOLDERS_ALIAS[placeholderType];

  if (aliases) {
    for (const alias of aliases) {
      if (targetType === alias) return true;
    }
  }

  return false;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isReferenced.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isReferenced.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isReferenced;

function isReferenced(node, parent, grandparent) {
  switch (parent.type) {
    case "MemberExpression":
    case "JSXMemberExpression":
    case "OptionalMemberExpression":
      if (parent.property === node) {
        return !!parent.computed;
      }

      return parent.object === node;

    case "VariableDeclarator":
      return parent.init === node;

    case "ArrowFunctionExpression":
      return parent.body === node;

    case "PrivateName":
      return false;

    case "ClassMethod":
    case "ClassPrivateMethod":
    case "ObjectMethod":
      if (parent.params.includes(node)) {
        return false;
      }

    case "ObjectProperty":
    case "ClassProperty":
    case "ClassPrivateProperty":
      if (parent.key === node) {
        return !!parent.computed;
      }

      if (parent.value === node) {
        return !grandparent || grandparent.type !== "ObjectPattern";
      }

      return true;

    case "ClassDeclaration":
    case "ClassExpression":
      return parent.superClass === node;

    case "AssignmentExpression":
      return parent.right === node;

    case "AssignmentPattern":
      return parent.right === node;

    case "LabeledStatement":
      return false;

    case "CatchClause":
      return false;

    case "RestElement":
      return false;

    case "BreakStatement":
    case "ContinueStatement":
      return false;

    case "FunctionDeclaration":
    case "FunctionExpression":
      return false;

    case "ExportNamespaceSpecifier":
    case "ExportDefaultSpecifier":
      return false;

    case "ExportSpecifier":
      if (grandparent != null && grandparent.source) {
        return false;
      }

      return parent.local === node;

    case "ImportDefaultSpecifier":
    case "ImportNamespaceSpecifier":
    case "ImportSpecifier":
      return false;

    case "JSXAttribute":
      return false;

    case "ObjectPattern":
    case "ArrayPattern":
      return false;

    case "MetaProperty":
      return false;

    case "ObjectTypeProperty":
      return parent.key !== node;

    case "TSEnumMember":
      return parent.id !== node;

    case "TSPropertySignature":
      if (parent.key === node) {
        return !!parent.computed;
      }

      return true;
  }

  return true;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isScope.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isScope.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isScope;

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function isScope(node, parent) {
  if ((0, _generated.isBlockStatement)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent))) {
    return false;
  }

  if ((0, _generated.isPattern)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent))) {
    return true;
  }

  return (0, _generated.isScopable)(node);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isSpecifierDefault.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isSpecifierDefault.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isSpecifierDefault;

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function isSpecifierDefault(specifier) {
  return (0, _generated.isImportDefaultSpecifier)(specifier) || (0, _generated.isIdentifier)(specifier.imported || specifier.exported, {
    name: "default"
  });
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isType.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isType.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isType;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function isType(nodeType, targetType) {
  if (nodeType === targetType) return true;
  if (_definitions.ALIAS_KEYS[targetType]) return false;
  const aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];

  if (aliases) {
    if (aliases[0] === nodeType) return true;

    for (const alias of aliases) {
      if (nodeType === alias) return true;
    }
  }

  return false;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isValidES3Identifier.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isValidES3Identifier.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isValidES3Identifier;

var _isValidIdentifier = __webpack_require__(/*! ./isValidIdentifier */ "./node_modules/@babel/types/lib/validators/isValidIdentifier.js");

const RESERVED_WORDS_ES3_ONLY = new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);

function isValidES3Identifier(name) {
  return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isValidIdentifier.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isValidIdentifier.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isValidIdentifier;

var _helperValidatorIdentifier = __webpack_require__(/*! @babel/helper-validator-identifier */ "./node_modules/@babel/helper-validator-identifier/lib/index.js");

function isValidIdentifier(name, reserved = true) {
  if (typeof name !== "string") return false;

  if (reserved) {
    if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {
      return false;
    }
  }

  return (0, _helperValidatorIdentifier.isIdentifierName)(name);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/isVar.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/isVar.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isVar;

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/@babel/types/lib/constants/index.js");

function isVar(node) {
  return (0, _generated.isVariableDeclaration)(node, {
    kind: "var"
  }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/matchesPattern.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/matchesPattern.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = matchesPattern;

var _generated = __webpack_require__(/*! ./generated */ "./node_modules/@babel/types/lib/validators/generated/index.js");

function matchesPattern(member, match, allowPartial) {
  if (!(0, _generated.isMemberExpression)(member)) return false;
  const parts = Array.isArray(match) ? match : match.split(".");
  const nodes = [];
  let node;

  for (node = member; (0, _generated.isMemberExpression)(node); node = node.object) {
    nodes.push(node.property);
  }

  nodes.push(node);
  if (nodes.length < parts.length) return false;
  if (!allowPartial && nodes.length > parts.length) return false;

  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
    const node = nodes[j];
    let value;

    if ((0, _generated.isIdentifier)(node)) {
      value = node.name;
    } else if ((0, _generated.isStringLiteral)(node)) {
      value = node.value;
    } else if ((0, _generated.isThisExpression)(node)) {
      value = "this";
    } else {
      return false;
    }

    if (parts[i] !== value) return false;
  }

  return true;
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/react/isCompatTag.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/react/isCompatTag.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = isCompatTag;

function isCompatTag(tagName) {
  return !!tagName && /^[a-z]/.test(tagName);
}

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/react/isReactComponent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/react/isReactComponent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _buildMatchMemberExpression = __webpack_require__(/*! ../buildMatchMemberExpression */ "./node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js");

const isReactComponent = (0, _buildMatchMemberExpression.default)("React.Component");
var _default = isReactComponent;
exports.default = _default;

/***/ }),

/***/ "./node_modules/@babel/types/lib/validators/validate.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/types/lib/validators/validate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = validate;
exports.validateField = validateField;
exports.validateChild = validateChild;

var _definitions = __webpack_require__(/*! ../definitions */ "./node_modules/@babel/types/lib/definitions/index.js");

function validate(node, key, val) {
  if (!node) return;
  const fields = _definitions.NODE_FIELDS[node.type];
  if (!fields) return;
  const field = fields[key];
  validateField(node, key, val, field);
  validateChild(node, key, val);
}

function validateField(node, key, val, field) {
  if (!(field != null && field.validate)) return;
  if (field.optional && val == null) return;
  field.validate(node, key, val);
}

function validateChild(node, key, val) {
  if (val == null) return;
  const validate = _definitions.NODE_PARENT_VALIDATIONS[val.type];
  if (!validate) return;
  validate(node, key, val);
}

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/to-fast-properties/index.js":
/*!**************************************************!*\
  !*** ./node_modules/to-fast-properties/index.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


let fastProto = null;

// Creates an object with permanently fast properties in V8. See Toon Verwaest's
// post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62
// for more details. Use %HasFastProperties(object) and the Node.js flag
// --allow-natives-syntax to check whether an object has fast properties.
function FastObject(o) {
	// A prototype object will have "fast properties" enabled once it is checked
	// against the inline property cache of a function, e.g. fastProto.property:
	// https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63
	if (fastProto !== null && typeof fastProto.property) {
		const result = fastProto;
		fastProto = FastObject.prototype = null;
		return result;
	}
	fastProto = FastObject.prototype = o == null ? Object.create(null) : o;
	return new FastObject;
}

// Initialize the inline property cache of FastObject
FastObject();

module.exports = function toFastproperties(o) {
	return FastObject(o);
};


/***/ }),

/***/ "./src/code/newGameboard.js":
/*!**********************************!*\
  !*** ./src/code/newGameboard.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/types */ "./node_modules/@babel/types/lib/index.js");
/* harmony import */ var _babel_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _newShip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./newShip */ "./src/code/newShip.js");



// eslint-disable-next-line no-unused-vars
class Gameboard {
  constructor(val = 100) {
    this.val = val;
    this.board = [];
    this.fleet = [];
    this.lastHit = {
      hit: false,
      location: null,
    };
  }

  initialiseBoard() {
    for (let i = 0; i < this.val; i += 1) {
      this.board.push({
        hasShip: false, shipType: null, hit: false, miss: false,
      });
    }
  }

  clearBoard() {
    this.board = [];
    this.fleet = [];
  }

  renderToDOM(DOMBoard) {
    this.board.forEach((index) => {
      const i = this.board.indexOf(index);
      if (index.hit) DOMBoard[i].classList.add('hit');
      // eslint-disable-next-line no-param-reassign
      if (index.miss) DOMBoard[i].innerText = 'X';
    });
  }

  revealShips(DOMBoard) {
    this.board.forEach((index) => {
      const i = this.board.indexOf(index);
      if (index.hasShip === true) {
        DOMBoard[i].classList.add('reveal-cell');
      }
    });
  }

  static randomNumber(val) {
    return Math.floor(Math.random() * val);
  }

  callRandomNumber(val) {
    return this.constructor.randomNumber(val);
  }

  generateFleet() {
    Object.keys(_newShip__WEBPACK_IMPORTED_MODULE_1__.type).forEach((shipObj) => {
      const ship = new _newShip__WEBPACK_IMPORTED_MODULE_1__.Ship(_newShip__WEBPACK_IMPORTED_MODULE_1__.type[shipObj]);
      this.fleet.push(ship);
    });
    console.log(this.fleet);
  }

  grabShip(shipType) {
    const findCorrectShip = this.fleet.filter((ship) => ship.type === shipType);
    console.log(findCorrectShip);
    // switch (shipType) {
    //   case 'carrier':
    //     ship = new Ship(type.carrier);
    //     break;
    //   case 'battleship':
    //     ship = new Ship(type.battleship);
    //     break;
    //   case 'cruiser':
    //     ship = new Ship(type.cruiser);
    //     break;
    //   case 'submarine':
    //     ship = new Ship(type.submarine);
    //     break;
    //   case 'destroyer':
    //     ship = new Ship(type.destroyer);
    //     break;
    //   default:
    //     return false;
    // }
    // return ship;
  }

  placeShip(ship, startCoord) {
    if (this.validPlacement(ship, startCoord)) {
      return true;
    }
    for (let i = 0; i < ship.length; i += 1) {
      this.board[startCoord + i].shipType = ship.type;
      this.board[startCoord + i].hasShip = true;
      // console.log(this.board[startCoord + i]);
    }
    return null;
  }

  randomShipPlacement() {
    // console.log(this.fleet);
    for (let i = 0; i < this.fleet.length; i += 1) {
      if (this.callRandomNumber(2) === 0) {
        this.fleet[i].isVertical = false;
      } else {
        this.fleet[i].isVertical = true;
      }
    }
    for (let i = 0; i < this.fleet.length; i += 1) {
      if (this.placeShip(this.fleet[i], this.callRandomNumber(this.val)) === true) {
        this.clearBoard();
        this.initialiseBoard();
        this.generateFleet();
        return this.randomShipPlacement();
      }
    }
    // console.log(this.board);
    return null;
    // console.log(this.fleet[0]);
    // this.placeShip(this.fleet[0], this.callRandomNumber(this.val));
  }

  receiveAttack(coord) {
    if (this.board[coord].miss || this.board[coord].hit === true) return false;
    if (this.board[coord].hasShip) {
      this.board[coord].hit = true;
      this.lastHit.hit = true;
      this.lastHit.location = coord;
    }
    if (this.board[coord].hasShip === false) this.board[coord].miss = true;
    return true;
  }

  getNameOfShip(coord) {
    if (this.board[coord].hasShip) return this.board[coord].shipType;
    return false;
  }

  hpHit(name) {
    const shipArr = this.board.filter((coord) => coord.shipType === name);
    const findCorrectShip = this.fleet.filter((ship) => ship.type === name);
    for (let i = 0; i < shipArr.length; i += 1) {
      if (shipArr[i].hit) findCorrectShip[0].hit(i);
    }
  }

  filterByShipType(name) {
    const shipArr = this.board.filter((index) => index.shipType === name);
    return shipArr;
  }

  validPlacement(ship, startCoord) {
    if (ship.isVertical === true) {
      for (let i = 0; i < ship.length; i += 1) {
        if (this.isOutOfBounds(startCoord + i * 10)) {
          console.log('Out of bounds!');
          return true;
        }
        if (this.board[startCoord + i * 10].hasShip === true) {
          console.log('Error! Placement clashes with another placed ship!');
          return true;
        }
      }
      for (let i = 0; i < ship.length; i += 1) {
        this.board[startCoord + i * 10].shipType = ship.type;
        this.board[startCoord + i * 10].hasShip = true;
        console.log(this.board[startCoord + i * 10]);
      }
    }
    if (ship.isVertical === false) {
      for (let i = 0; i < ship.length; i += 1) {
        if (this.isOutOfBounds(startCoord + i)) {
          console.log('Out of bounds!');
          return true;
        }
        if (i >= 1) {
          const rounded = Math.ceil(startCoord / 10) * 10;
          if (startCoord + i >= rounded) {
            console.log('continues on next line!');
            return true;
          }
        }
        if (this.board[startCoord + i].hasShip === true) {
          console.log('Error! Placement clashes with another placed ship!');
          return true;
        }
      }
    }
    return false;
  }

  isOutOfBounds(coord) {
    if (coord < 0 || coord > this.board.length - 1) return true;
    return false;
  }

  allShipsSunk() {
    // console.log(this.fleet);
    // console.log(this.fleet.every((ship) => ship.isDestroyed()));
    return this.fleet.every((ship) => ship.isDestroyed());
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gameboard);


/***/ }),

/***/ "./src/code/newPlayer.js":
/*!*******************************!*\
  !*** ./src/code/newPlayer.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line no-unused-vars
class Player {
  constructor(name) {
    this.name = name;
    this.pastHits = [];
    this.currentMove = null;
  }

  static randomNumber(val) {
    return Math.floor(Math.random() * val);
  }

  callRandomNumber(val) {
    return this.constructor.randomNumber(val);
  }

  randomMove() {
    const coord = this.callRandomNumber(100);
    if (this.pastHits.some((pastHit) => pastHit === coord)) {
      console.log(this.pastHits);
      return this.randomMove();
    }
    console.log(this.pastHits);
    this.pastHits.push(coord);
    this.currentMove = coord;
    return coord;
  }

  clearPastHits() {
    this.pastHits = [];
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);


/***/ }),

/***/ "./src/code/newShip.js":
/*!*****************************!*\
  !*** ./src/code/newShip.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "type": () => (/* binding */ type),
/* harmony export */   "Ship": () => (/* binding */ Ship)
/* harmony export */ });
// eslint-disable-next-line no-unused-vars
const type = {
  carrier: {
    type: 'carrier',
    length: 5,
  },
  battleship: {
    type: 'battleship',
    length: 4,
  },
  cruiser: {
    type: 'cruiser',
    length: 3,
  },
  submarine: {
    type: 'submarine',
    length: 3,
  },
  destroyer: {
    type: 'destroyer',
    length: 2,
  },
};

class Ship {
  constructor(ship, vertical = true) {
    this.type = ship.type;
    this.length = ship.length;
    this.hp = Array(this.length).fill(null);
    this.isVertical = vertical;
  }

  hit(index) {
    this.hp[index] = true;
    if (this.isDestroyed()) {
      console.log(`${this.type} has been destroyed!`);
    }
    return this.hp;
  }

  isDestroyed() {
    return this.hp.every((hp) => hp === true);
  }
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!***************************!*\
  !*** ./src/code/index.js ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOM": () => (/* binding */ DOM),
/* harmony export */   "game": () => (/* binding */ game)
/* harmony export */ });
/* harmony import */ var _newShip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./newShip */ "./src/code/newShip.js");
/* harmony import */ var _newPlayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./newPlayer */ "./src/code/newPlayer.js");
/* harmony import */ var _newGameboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./newGameboard */ "./src/code/newGameboard.js");
/* eslint-disable no-use-before-define */




// eslint-disable-next-line func-names
const DOM = (function () {
  const playerGameboard = document.querySelector('#player');
  const enemyGameboard = document.querySelector('#enemy');
  const playerGameboardArr = Array.from(playerGameboard.children);
  const enemyGameboardArr = Array.from(enemyGameboard.children);
  const restartButton = document.querySelector('#restart');

  const ships = document.querySelectorAll('.ship');
  const placeShipsGameboard = document.querySelector('#placeShips-gameboard');
  const placeShipsCells = placeShipsGameboard.children;
  const placeShipsGameboardArr = Array.from(placeShipsGameboard.children);
  const placeRandomButton = document.querySelector('#place-random');
  const startButton = document.querySelector('#start');
  let currentShipType = null;
  let currentCell = null;

  ships.forEach((ship) => {
    ship.addEventListener('dragstart', (e) => {
      currentShipType = e.currentTarget.id;
      e.target.style.opacity = 0.4;
    }, false);
    ship.addEventListener('dragend', (e) => {
      currentShipType = null;
      e.target.style.opacity = 1;
      currentShipType = '';
    }, false);
    ship.addEventListener('dragend', (e) => {
      console.log(e.target);
      console.log(currentCell);
      e.currentTarget.removeAttribute('draggable');
    });
  });

  placeShipsGameboard.addEventListener('dragenter', (e) => {
    if (e.target.parentNode === placeShipsGameboard) {
      if (e.target.classList.contains('cell')) {
        // console.log(placeShipsGameboardArr.indexOf(e.target));
        // console.log(currentShipType);
        const i = placeShipsGameboardArr.indexOf(e.target);
        currentCell = i;
        e.target.classList.add('over');
      }
    }
  }, false);

  placeShipsGameboard.addEventListener('dragleave', (e) => {
    if (e.target.parentNode === placeShipsGameboard) {
      if (e.target.classList.contains('cell')) {
        e.target.classList.remove('over');
      }
    }
  }, false);

  enemyGameboard.addEventListener('click', (e) => {
    if (e.target.classList.contains('cell')) {
      game.gameLoop(enemyGameboardArr.indexOf(e.target));
      console.log(enemyGameboardArr.indexOf(e.target));
    }
  });

  restartButton.addEventListener('click', () => {
    game.restartGame();
  });

  function clearBoard() {
    playerGameboardArr.forEach((cell) => {
      cell.classList.remove('hit');
      cell.innerText = '';
    });
    enemyGameboardArr.forEach((cell) => {
      cell.classList.remove('hit');
      cell.innerText = '';
    });
  }

  function setMessage(str) {
    const messageEl = document.querySelector('#message');
    messageEl.innerText = str;
  }

  function toggleClicks(boolean) {
    if (boolean) {
      return enemyGameboard.classList.add('disable');
    }
    enemyGameboard.classList.remove('disable');
    return false;
  }

  function toggleCells(gameboard) {
    gameboard.classList.toggle('reveal-cell');
  }

  return {
    setMessage,
    placeShipsGameboardArr,
    playerGameboardArr,
    enemyGameboardArr,
    toggleClicks,
    clearBoard,
  };
}());

const game = (function () {
  const player = new _newPlayer__WEBPACK_IMPORTED_MODULE_1__.default('player');
  const computer = new _newPlayer__WEBPACK_IMPORTED_MODULE_1__.default('Computer');
  const playerGameboard = new _newGameboard__WEBPACK_IMPORTED_MODULE_2__.default();
  const enemyGameboard = new _newGameboard__WEBPACK_IMPORTED_MODULE_2__.default();
  const placeShipsGameboard = new _newGameboard__WEBPACK_IMPORTED_MODULE_2__.default();

  function initialiseGame() {
    placeShipsGameboard.clearBoard();
    playerGameboard.clearBoard();
    enemyGameboard.clearBoard();
    placeShipsGameboard.initialiseBoard();
    playerGameboard.initialiseBoard();
    enemyGameboard.initialiseBoard();
    placeShipsGameboard.generateFleet();
  }

  function placeShip(ship, index) {
    const shipObj = placeShipsGameboard.generateShip(ship);
    if (placeShipsGameboard.validPlacement(shipObj, index)) {
      placeShipsGameboard.placeShip(shipObj, index);
      placeShipsGameboard.renderToDOM(DOM.placeShipsGameboardArr);
      return true;
    }
    console.log('something went wrong!');
    return false;
  }
  placeShipsGameboard.grabShip('carrier');

  function randomShipPlacement(boolean) {
    if (boolean === true) playerGameboard.randomShipPlacement();
    enemyGameboard.randomShipPlacement();
  }

  function gameLoop(coord) {
    if (enemyGameboard.receiveAttack(coord) === true) {
      enemyGameboard.hpHit(enemyGameboard.getNameOfShip(coord));
      enemyGameboard.renderToDOM(DOM.enemyGameboardArr);
      if (enemyGameboard.allShipsSunk()) {
        console.log('enemy all ships sunk');
        DOM.toggleClicks(true);
      }
      computer.randomMove();
      playerGameboard.receiveAttack(computer.currentMove);
      playerGameboard.renderToDOM(DOM.playerGameboardArr);
      if (playerGameboard.allShipsSunk()) {
        console.log('player ships all sunk');
      }
      return true;
    }
    return console.log('attack did not occur due to clicking on a miss or already hit target');
  }

  function restartGame() {
    DOM.clearBoard();
    initialiseGame();
    randomShipPlacement(true);
    player.clearPastHits();
    computer.clearPastHits();
    DOM.toggleClicks();
  }

  return {
    gameLoop,
    randomShipPlacement,
    playerGameboard,
    enemyGameboard,
    initialiseGame,
    restartGame,
    placeShip,
  };
}());
game.initialiseGame();


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtB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QTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDNXVDYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQ0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnRUFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrREFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrREFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrREFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0Q0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNB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QUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtB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QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7O0FDcmpEWTs7QUFFYixhQUFhLG1CQUFPLENBQUMscUVBQVM7O0FBRTlCLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0EsT0FBTztBQUNQO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7Ozs7OztBQzdJWTs7QUFFYixhQUFhLG1CQUFPLENBQUMscUVBQVM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7O0FDaGVZOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdEQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDhDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHNEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGdEQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLG1EQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGdEQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHNEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDhEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGFBQWE7O0FBRWIsd0JBQXdCLG1CQUFPLENBQUMsc0VBQW9COztBQUVwRCxtQkFBTyxDQUFDLG1FQUFROztBQUVoQixtQkFBTyxDQUFDLG1FQUFROztBQUVoQixtQkFBTyxDQUFDLGlFQUFPOztBQUVmLG1CQUFPLENBQUMsbUVBQVE7O0FBRWhCLG1CQUFPLENBQUMsbUZBQWdCOztBQUV4QixtQkFBTyxDQUFDLCtFQUFjOztBQUV0QixhQUFhLG1CQUFPLENBQUMscUVBQVM7O0FBRTlCLG9CQUFvQixtQkFBTyxDQUFDLG1GQUFnQjs7QUFFNUM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSxhQUFhOzs7Ozs7Ozs7OztBQ3RHQTs7QUFFYixhQUFhLG1CQUFPLENBQUMscUVBQVM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7QUNoS1k7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLHFFQUFTOztBQUU5QixvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBZ0I7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7O0FDOUJZOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtDQUFrQyxHQUFHLDBCQUEwQixHQUFHLG9CQUFvQjs7QUFFdEYsYUFBYSxtQkFBTyxDQUFDLHFFQUFTOztBQUU5QjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSCxDQUFDOzs7Ozs7Ozs7OztBQ2hDWTs7QUFFYixhQUFhLG1CQUFPLENBQUMscUVBQVM7O0FBRTlCLFlBQVksbUJBQU8sQ0FBQyxtRUFBUTs7QUFFNUIsVUFBVSxtQkFBTyxDQUFDLDBFQUFrQjs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLENBQUM7QUFDRDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQSxDQUFDO0FBQ0QseURBQXlEO0FBQ3pELDBCQUEwQjtBQUMxQjtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwREFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0REFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0Q0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0Q0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQ0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQ0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix5Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0Q0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixhQUFhOztBQUViLHdCQUF3QixtQkFBTyxDQUFDLGlIQUFxQzs7QUFFckUsbUJBQW1CLG1CQUFPLENBQUMsdUdBQWdDOztBQUUzRCxxQkFBcUIsbUJBQU8sQ0FBQyx1R0FBZ0M7O0FBRTdELGtCQUFrQixtQkFBTyxDQUFDLG1GQUFzQjs7QUFFaEQsaUJBQWlCLG1CQUFPLENBQUMsdUZBQXFCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCx5Q0FBeUMsbUJBQU8sQ0FBQyw2SUFBbUQ7O0FBRXBHLDJCQUEyQixtQkFBTyxDQUFDLGlIQUFxQzs7QUFFeEUseUJBQXlCLG1CQUFPLENBQUMseUhBQXlDOztBQUUxRSxrQkFBa0IsbUJBQU8sQ0FBQyx5RkFBc0I7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVELGlCQUFpQixtQkFBTyxDQUFDLHVHQUFnQzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQsaUJBQWlCLG1CQUFPLENBQUMsNkVBQW1COztBQUU1QyxhQUFhLG1CQUFPLENBQUMscUVBQWU7O0FBRXBDLGlCQUFpQixtQkFBTyxDQUFDLDZFQUFtQjs7QUFFNUMsMkJBQTJCLG1CQUFPLENBQUMsaUdBQTZCOztBQUVoRSx1QkFBdUIsbUJBQU8sQ0FBQyx5RkFBeUI7O0FBRXhELGtCQUFrQixtQkFBTyxDQUFDLHFGQUF1Qjs7QUFFakQsbUJBQW1CLG1CQUFPLENBQUMsdUZBQXdCOztBQUVuRCw0QkFBNEIsbUJBQU8sQ0FBQyx5R0FBaUM7O0FBRXJFLDhCQUE4QixtQkFBTyxDQUFDLDZHQUFtQzs7QUFFekUsd0JBQXdCLG1CQUFPLENBQUMsaUdBQTZCOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQywrR0FBb0M7O0FBRTNFLHNCQUFzQixtQkFBTyxDQUFDLDZGQUEyQjs7QUFFekQsa0JBQWtCLG1CQUFPLENBQUMsMkZBQXVCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCxpQkFBaUIsbUJBQU8sQ0FBQyx1RUFBYTs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQsbUJBQW1CLG1CQUFPLENBQUMsMkZBQTBCOztBQUVyRCwrQkFBK0IsbUJBQU8sQ0FBQyxtSEFBc0M7O0FBRTdFLGVBQWUsbUJBQU8sQ0FBQyxtRkFBc0I7O0FBRTdDLHFCQUFxQixtQkFBTyxDQUFDLCtGQUE0Qjs7QUFFekQsb0JBQW9CLG1CQUFPLENBQUMsNkZBQTJCOztBQUV2RCxvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBMkI7O0FBRXZELGtCQUFrQixtQkFBTyxDQUFDLHlGQUF5Qjs7QUFFbkQsNEJBQTRCLG1CQUFPLENBQUMsNkdBQW1DOztBQUV2RSxtQkFBbUIsbUJBQU8sQ0FBQywyRkFBMEI7O0FBRXJELG1CQUFtQixtQkFBTyxDQUFDLDJGQUEwQjs7QUFFckQsbUJBQW1CLG1CQUFPLENBQUMsMkVBQWU7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVELGdDQUFnQyxtQkFBTyxDQUFDLDJIQUEwQzs7QUFFbEYsZ0JBQWdCLG1CQUFPLENBQUMsMkZBQTBCOztBQUVsRCxpQ0FBaUMsbUJBQU8sQ0FBQyw2SEFBMkM7O0FBRXBGLHdCQUF3QixtQkFBTyxDQUFDLDJHQUFrQzs7QUFFbEUsNEJBQTRCLG1CQUFPLENBQUMsbUhBQXNDOztBQUUxRSw0QkFBNEIsbUJBQU8sQ0FBQyw2SEFBMkM7O0FBRS9FLDZCQUE2QixtQkFBTyxDQUFDLCtHQUFvQzs7QUFFekUsa0NBQWtDLG1CQUFPLENBQUMseUhBQXlDOztBQUVuRixnQkFBZ0IsbUJBQU8sQ0FBQyxpRkFBcUI7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVELG9CQUFvQixtQkFBTyxDQUFDLHlGQUF5Qjs7QUFFckQsb0JBQW9CLG1CQUFPLENBQUMsbUZBQXNCOztBQUVsRCxVQUFVLG1CQUFPLENBQUMseUVBQWlCOztBQUVuQyxpQkFBaUIsbUJBQU8sQ0FBQyx1RkFBd0I7O0FBRWpELHFCQUFxQixtQkFBTyxDQUFDLCtGQUE0Qjs7QUFFekQsbUJBQW1CLG1CQUFPLENBQUMsMkZBQTBCOztBQUVyRCxhQUFhLG1CQUFPLENBQUMsK0VBQW9COztBQUV6QyxjQUFjLG1CQUFPLENBQUMsaUZBQXFCOztBQUUzQyx5QkFBeUIsbUJBQU8sQ0FBQyx1R0FBZ0M7O0FBRWpFLHlCQUF5QixtQkFBTyxDQUFDLHVHQUFnQzs7QUFFakUsb0JBQW9CLG1CQUFPLENBQUMsNkZBQTJCOztBQUV2RCxlQUFlLG1CQUFPLENBQUMsbUZBQXNCOztBQUU3QywwQkFBMEIsbUJBQU8sQ0FBQyx5R0FBaUM7O0FBRW5FLGNBQWMsbUJBQU8sQ0FBQyxpRkFBcUI7O0FBRTNDLDRCQUE0QixtQkFBTyxDQUFDLDZHQUFtQzs7QUFFdkUseUJBQXlCLG1CQUFPLENBQUMsdUdBQWdDOztBQUVqRSxhQUFhLG1CQUFPLENBQUMsK0VBQW9COztBQUV6QyxzQkFBc0IsbUJBQU8sQ0FBQyxpR0FBNkI7O0FBRTNELGdCQUFnQixtQkFBTyxDQUFDLHFGQUF1Qjs7QUFFL0Msa0NBQWtDLG1CQUFPLENBQUMseUhBQXlDOztBQUVuRixrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBd0I7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVELGtCQUFrQixtQkFBTyxDQUFDLDJGQUF1Qjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7Ozs7Ozs7Ozs7QUN0b0JBOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWYsaUJBQWlCLG1CQUFPLENBQUMsMEZBQXVCOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZGE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZixpQkFBaUIsbUJBQU8sQ0FBQyxpR0FBNEI7O0FBRXJEO0FBQ0EsNkRBQTZELGFBQWEsR0FBRyxxQ0FBcUM7QUFDbEg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQzdFYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLGlCQUFpQixtQkFBTyxDQUFDLHdFQUFjOztBQUV2Qyx3QkFBd0IsbUJBQU8sQ0FBQyxrR0FBOEI7O0FBRTlEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM5QmE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZixpQkFBaUIsbUJBQU8sQ0FBQywwRkFBdUI7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1phOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWYsaUJBQWlCLG1CQUFPLENBQUMsd0VBQWM7O0FBRXZDOztBQUVBOztBQUVBLHlDQUF5QztBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzdCYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLG9CQUFvQixtQkFBTyxDQUFDLDBGQUEwQjs7QUFFdEQsd0JBQXdCLG1CQUFPLENBQUMsNkZBQW9COztBQUVwRDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLGlCQUFpQixtQkFBTyxDQUFDLGlHQUE0Qjs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckRhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWYsaUJBQWlCLG1CQUFPLENBQUMsOEZBQXlCOztBQUVsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsaUJBQWlCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3RHYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLDZCQUE2QixtQkFBTyxDQUFDLG9HQUF5Qjs7QUFFOUQ7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLG1CQUFtQixtQkFBTyxDQUFDLDRFQUFnQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdERhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWYsbUJBQW1CLG1CQUFPLENBQUMsNEVBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMzQmE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWYsaUJBQWlCLG1CQUFPLENBQUMsNkZBQTBCOztBQUVuRDtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7QUM5Q2E7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7QUNqQmE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZixzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBa0I7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1phOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFDOUIsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5QixtQkFBbUI7QUFDbkIsMEJBQTBCO0FBQzFCLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQiwrQkFBK0I7QUFDL0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLDZCQUE2QjtBQUM3QixjQUFjO0FBQ2Qsd0JBQXdCO0FBQ3hCLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCLG9CQUFvQjtBQUNwQixxQkFBcUI7QUFDckIsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIscUJBQXFCO0FBQ3JCLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQix1QkFBdUI7QUFDdkIsaUJBQWlCO0FBQ2pCLDBCQUEwQjtBQUMxQixzQkFBc0I7QUFDdEIsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLGlDQUFpQztBQUNqQyxvQkFBb0I7QUFDcEIseUJBQXlCO0FBQ3pCLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIsc0JBQXNCO0FBQ3RCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCLDJCQUEyQjtBQUMzQixzQkFBc0I7QUFDdEIsaUNBQWlDO0FBQ2pDLG1CQUFtQjtBQUNuQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5QixrQ0FBa0M7QUFDbEMsZ0NBQWdDO0FBQ2hDLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCLGdDQUFnQztBQUNoQyxrQ0FBa0M7QUFDbEMseUJBQXlCO0FBQ3pCLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixlQUFlO0FBQ2Ysa0NBQWtDO0FBQ2xDLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixnQkFBZ0I7QUFDaEIsdUJBQXVCO0FBQ3ZCLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFDbEMsZ0NBQWdDO0FBQ2hDLHVCQUF1QjtBQUN2Qiw4QkFBOEI7QUFDOUIsNEJBQTRCO0FBQzVCLHFCQUFxQjtBQUNyQiwyQkFBMkI7QUFDM0IsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQixzQ0FBc0M7QUFDdEMsbUNBQW1DO0FBQ25DLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQix1QkFBdUI7QUFDdkIsOEJBQThCO0FBQzlCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckMsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUM5QixnQ0FBZ0M7QUFDaEMsMkJBQTJCO0FBQzNCLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5QixpQ0FBaUM7QUFDakMsb0NBQW9DO0FBQ3BDLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsZ0NBQWdDO0FBQ2hDLHFDQUFxQztBQUNyQyw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsMkJBQTJCO0FBQzNCLDRCQUE0QjtBQUM1QixrQ0FBa0M7QUFDbEMsb0JBQW9CO0FBQ3BCLGlDQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLDhCQUE4QjtBQUM5QixtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCLDRCQUE0QjtBQUM1Qix1QkFBdUI7QUFDdkIsa0NBQWtDO0FBQ2xDLG9DQUFvQztBQUNwQyw2QkFBNkI7QUFDN0Isa0JBQWtCO0FBQ2xCLDRCQUE0QjtBQUM1Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IsbUNBQW1DO0FBQ25DLHNCQUFzQjtBQUN0QiwyQkFBMkI7QUFDM0Isb0JBQW9CO0FBQ3BCLDRCQUE0QjtBQUM1QixnQ0FBZ0M7QUFDaEMsd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2Qiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiw0QkFBNEI7QUFDNUIsaUJBQWlCO0FBQ2pCLHFCQUFxQjtBQUNyQiw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLGNBQWM7QUFDZCxxQkFBcUI7QUFDckIsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsZ0NBQWdDO0FBQ2hDLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQiwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLGlDQUFpQztBQUNqQyw4QkFBOEI7QUFDOUIsdUNBQXVDO0FBQ3ZDLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixvQ0FBb0M7QUFDcEMseUNBQXlDO0FBQ3pDLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6Qiw0QkFBNEI7QUFDNUIsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQix1QkFBdUI7QUFDdkIscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQix3QkFBd0I7QUFDeEIsb0JBQW9CO0FBQ3BCLDRCQUE0QjtBQUM1QixxQkFBcUI7QUFDckIsNEJBQTRCO0FBQzVCLDJCQUEyQjtBQUMzQixxQkFBcUI7QUFDckIsNkJBQTZCO0FBQzdCLHdCQUF3QjtBQUN4Qiw2QkFBNkI7QUFDN0Isc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2Qix1Q0FBdUM7QUFDdkMsZ0NBQWdDO0FBQ2hDLHlCQUF5QjtBQUN6QixnQ0FBZ0M7QUFDaEMsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0Isc0JBQXNCO0FBQ3RCLDZCQUE2QjtBQUM3Qix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFDbkMsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QixzQ0FBc0M7QUFDdEMsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0QyxvQ0FBb0M7QUFDcEMseUJBQXlCO0FBQ3pCLG9CQUFvQjtBQUNwQixnQkFBZ0I7QUFDaEIsa0JBQWtCO0FBQ2xCLHFCQUFxQjtBQUNyQixlQUFlO0FBQ2YsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4Qiw2QkFBNkI7QUFDN0IscUJBQXFCO0FBQ3JCLGNBQWM7QUFDZCxlQUFlO0FBQ2YsMkJBQTJCO0FBQzNCLGFBQWE7QUFDYix1QkFBdUI7QUFDdkIsa0JBQWtCO0FBQ2xCLHdCQUF3QjtBQUN4QixpQkFBaUI7QUFDakIscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQixjQUFjO0FBQ2Qsc0JBQXNCO0FBQ3RCLGlCQUFpQjtBQUNqQixtQkFBbUI7QUFDbkIsMkJBQTJCO0FBQzNCLGdCQUFnQjtBQUNoQixzQkFBc0I7QUFDdEIsa0JBQWtCO0FBQ2xCLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsZUFBZTtBQUNmLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQixjQUFjO0FBQ2Qsa0JBQWtCO0FBQ2xCLDRCQUE0QjtBQUM1Qix5QkFBeUI7QUFDekIsdUJBQXVCO0FBQ3ZCLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIsYUFBYTtBQUNiLHVCQUF1QjtBQUN2QixnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLHdCQUF3Qjs7QUFFeEIsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTBCOztBQUV0RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNB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dHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9oZWxwZXItdmFsaWRhdG9yLWlkZW50aWZpZXIvbGliL2lkZW50aWZpZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllci9saWIva2V5d29yZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2Fzc2VydHMvYXNzZXJ0Tm9kZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2Fzc2VydHMvZ2VuZXJhdGVkL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvYnVpbGRlcnMvYnVpbGRlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2J1aWxkZXJzL2Zsb3cvY3JlYXRlRmxvd1VuaW9uVHlwZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2J1aWxkZXJzL2Zsb3cvY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvYnVpbGRlcnMvZ2VuZXJhdGVkL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvYnVpbGRlcnMvZ2VuZXJhdGVkL3VwcGVyY2FzZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2J1aWxkZXJzL3JlYWN0L2J1aWxkQ2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9idWlsZGVycy90eXBlc2NyaXB0L2NyZWF0ZVRTVW5pb25UeXBlLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY2xvbmUvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jbG9uZS9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jbG9uZS9jbG9uZURlZXBXaXRob3V0TG9jLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY2xvbmUvY2xvbmVOb2RlLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY2xvbmUvY2xvbmVXaXRob3V0TG9jLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvYWRkQ29tbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbW1lbnRzL2FkZENvbW1lbnRzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvaW5oZXJpdElubmVyQ29tbWVudHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb21tZW50cy9pbmhlcml0TGVhZGluZ0NvbW1lbnRzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb21tZW50cy9pbmhlcml0c0NvbW1lbnRzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvcmVtb3ZlQ29tbWVudHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb25zdGFudHMvZ2VuZXJhdGVkL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29udmVydGVycy9lbnN1cmVCbG9jay5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9CaW5kaW5nSWRlbnRpZmllck5hbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3RvQmxvY2suanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3RvQ29tcHV0ZWRLZXkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3RvRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9JZGVudGlmaWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29udmVydGVycy90b0tleUFsaWFzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29udmVydGVycy90b1NlcXVlbmNlRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9TdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3ZhbHVlVG9Ob2RlLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvZGVmaW5pdGlvbnMvY29yZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2RlZmluaXRpb25zL2V4cGVyaW1lbnRhbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2RlZmluaXRpb25zL2Zsb3cuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9kZWZpbml0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2RlZmluaXRpb25zL2pzeC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2RlZmluaXRpb25zL21pc2MuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9kZWZpbml0aW9ucy9wbGFjZWhvbGRlcnMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9kZWZpbml0aW9ucy90eXBlc2NyaXB0LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvZGVmaW5pdGlvbnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvbW9kaWZpY2F0aW9ucy9mbG93L3JlbW92ZVR5cGVEdXBsaWNhdGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvbW9kaWZpY2F0aW9ucy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvcHJlcGVuZFRvTWVtYmVyRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvcmVtb3ZlUHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvcmVtb3ZlUHJvcGVydGllc0RlZXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9tb2RpZmljYXRpb25zL3R5cGVzY3JpcHQvcmVtb3ZlVHlwZUR1cGxpY2F0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9yZXRyaWV2ZXJzL2dldEJpbmRpbmdJZGVudGlmaWVycy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3JldHJpZXZlcnMvZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi90cmF2ZXJzZS90cmF2ZXJzZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3RyYXZlcnNlL3RyYXZlcnNlRmFzdC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3V0aWxzL2luaGVyaXQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi91dGlscy9yZWFjdC9jbGVhbkpTWEVsZW1lbnRMaXRlcmFsQ2hpbGQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2J1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9nZW5lcmF0ZWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc0JpbmRpbmcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzQmxvY2tTY29wZWQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzSW1tdXRhYmxlLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc0xldC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNOb2RlLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc05vZGVzRXF1aXZhbGVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNQbGFjZWhvbGRlclR5cGUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzUmVmZXJlbmNlZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNTY29wZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNTcGVjaWZpZXJEZWZhdWx0LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc1R5cGUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzVmFsaWRFUzNJZGVudGlmaWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc1ZhbGlkSWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNWYXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL21hdGNoZXNQYXR0ZXJuLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9yZWFjdC9pc0NvbXBhdFRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvcmVhY3QvaXNSZWFjdENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vbm9kZV9tb2R1bGVzL3RvLWZhc3QtcHJvcGVydGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jb2RlL25ld0dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jb2RlL25ld1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jb2RlL25ld1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXBzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jb2RlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc0lkZW50aWZpZXJTdGFydCA9IGlzSWRlbnRpZmllclN0YXJ0O1xuZXhwb3J0cy5pc0lkZW50aWZpZXJDaGFyID0gaXNJZGVudGlmaWVyQ2hhcjtcbmV4cG9ydHMuaXNJZGVudGlmaWVyTmFtZSA9IGlzSWRlbnRpZmllck5hbWU7XG5sZXQgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IFwiXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM3ZlxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTJmXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1ZDAtXFx1MDVlYVxcdTA1ZWYtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NmFcXHUwOGEwLVxcdTA4YjRcXHUwOGI2LVxcdTA4YzdcXHUwOTA0LVxcdTA5MzlcXHUwOTNkXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Y1xcdTA5OGZcXHUwOTkwXFx1MDk5My1cXHUwOWE4XFx1MDlhYS1cXHUwOWIwXFx1MDliMlxcdTA5YjYtXFx1MDliOVxcdTA5YmRcXHUwOWNlXFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTFcXHUwOWYwXFx1MDlmMVxcdTA5ZmNcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYWY5XFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2RcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2MVxcdTBiNzFcXHUwYjgzXFx1MGI4NS1cXHUwYjhhXFx1MGI4ZS1cXHUwYjkwXFx1MGI5Mi1cXHUwYjk1XFx1MGI5OVxcdTBiOWFcXHUwYjljXFx1MGI5ZVxcdTBiOWZcXHUwYmEzXFx1MGJhNFxcdTBiYTgtXFx1MGJhYVxcdTBiYWUtXFx1MGJiOVxcdTBiZDBcXHUwYzA1LVxcdTBjMGNcXHUwYzBlLVxcdTBjMTBcXHUwYzEyLVxcdTBjMjhcXHUwYzJhLVxcdTBjMzlcXHUwYzNkXFx1MGM1OC1cXHUwYzVhXFx1MGM2MFxcdTBjNjFcXHUwYzgwXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNC1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDU0LVxcdTBkNTZcXHUwZDVmLVxcdTBkNjFcXHUwZDdhLVxcdTBkN2ZcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGUwMS1cXHUwZTMwXFx1MGUzMlxcdTBlMzNcXHUwZTQwLVxcdTBlNDZcXHUwZTgxXFx1MGU4MlxcdTBlODRcXHUwZTg2LVxcdTBlOGFcXHUwZThjLVxcdTBlYTNcXHUwZWE1XFx1MGVhNy1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjVcXHUxM2Y4LVxcdTEzZmRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjhcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWVcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWIwLVxcdTE5YzlcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxYzgwLVxcdTFjODhcXHUxYzkwLVxcdTFjYmFcXHUxY2JkLVxcdTFjYmZcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjNcXHUxY2Y1XFx1MWNmNlxcdTFjZmFcXHUxZDAwLVxcdTFkYmZcXHUxZTAwLVxcdTFmMTVcXHUxZjE4LVxcdTFmMWRcXHUxZjIwLVxcdTFmNDVcXHUxZjQ4LVxcdTFmNGRcXHUxZjUwLVxcdTFmNTdcXHUxZjU5XFx1MWY1YlxcdTFmNWRcXHUxZjVmLVxcdTFmN2RcXHUxZjgwLVxcdTFmYjRcXHUxZmI2LVxcdTFmYmNcXHUxZmJlXFx1MWZjMi1cXHUxZmM0XFx1MWZjNi1cXHUxZmNjXFx1MWZkMC1cXHUxZmQzXFx1MWZkNi1cXHUxZmRiXFx1MWZlMC1cXHUxZmVjXFx1MWZmMi1cXHUxZmY0XFx1MWZmNi1cXHUxZmZjXFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMTAyXFx1MjEwN1xcdTIxMGEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMWRcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJhLVxcdTIxMzlcXHUyMTNjLVxcdTIxM2ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRlXFx1MjE2MC1cXHUyMTg4XFx1MmMwMC1cXHUyYzJlXFx1MmMzMC1cXHUyYzVlXFx1MmM2MC1cXHUyY2U0XFx1MmNlYi1cXHUyY2VlXFx1MmNmMlxcdTJjZjNcXHUyZDAwLVxcdTJkMjVcXHUyZDI3XFx1MmQyZFxcdTJkMzAtXFx1MmQ2N1xcdTJkNmZcXHUyZDgwLVxcdTJkOTZcXHUyZGEwLVxcdTJkYTZcXHUyZGE4LVxcdTJkYWVcXHUyZGIwLVxcdTJkYjZcXHUyZGI4LVxcdTJkYmVcXHUyZGMwLVxcdTJkYzZcXHUyZGM4LVxcdTJkY2VcXHUyZGQwLVxcdTJkZDZcXHUyZGQ4LVxcdTJkZGVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDliLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmZcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmZcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYmZcXHU0ZTAwLVxcdTlmZmNcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5ZFxcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTdiZlxcdWE3YzItXFx1YTdjYVxcdWE3ZjUtXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOGZkXFx1YThmZVxcdWE5MGEtXFx1YTkyNVxcdWE5MzAtXFx1YTk0NlxcdWE5NjAtXFx1YTk3Y1xcdWE5ODQtXFx1YTliMlxcdWE5Y2ZcXHVhOWUwLVxcdWE5ZTRcXHVhOWU2LVxcdWE5ZWZcXHVhOWZhLVxcdWE5ZmVcXHVhYTAwLVxcdWFhMjhcXHVhYTQwLVxcdWFhNDJcXHVhYTQ0LVxcdWFhNGJcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE3ZS1cXHVhYWFmXFx1YWFiMVxcdWFhYjVcXHVhYWI2XFx1YWFiOS1cXHVhYWJkXFx1YWFjMFxcdWFhYzJcXHVhYWRiLVxcdWFhZGRcXHVhYWUwLVxcdWFhZWFcXHVhYWYyLVxcdWFhZjRcXHVhYjAxLVxcdWFiMDZcXHVhYjA5LVxcdWFiMGVcXHVhYjExLVxcdWFiMTZcXHVhYjIwLVxcdWFiMjZcXHVhYjI4LVxcdWFiMmVcXHVhYjMwLVxcdWFiNWFcXHVhYjVjLVxcdWFiNjlcXHVhYjcwLVxcdWFiZTJcXHVhYzAwLVxcdWQ3YTNcXHVkN2IwLVxcdWQ3YzZcXHVkN2NiLVxcdWQ3ZmJcXHVmOTAwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjAwLVxcdWZiMDZcXHVmYjEzLVxcdWZiMTdcXHVmYjFkXFx1ZmIxZi1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTcwLVxcdWZlNzRcXHVmZTc2LVxcdWZlZmNcXHVmZjIxLVxcdWZmM2FcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNcIjtcbmxldCBub25BU0NJSWlkZW50aWZpZXJDaGFycyA9IFwiXFx1MjAwY1xcdTIwMGRcXHhiN1xcdTAzMDAtXFx1MDM2ZlxcdTAzODdcXHUwNDgzLVxcdTA0ODdcXHUwNTkxLVxcdTA1YmRcXHUwNWJmXFx1MDVjMVxcdTA1YzJcXHUwNWM0XFx1MDVjNVxcdTA1YzdcXHUwNjEwLVxcdTA2MWFcXHUwNjRiLVxcdTA2NjlcXHUwNjcwXFx1MDZkNi1cXHUwNmRjXFx1MDZkZi1cXHUwNmU0XFx1MDZlN1xcdTA2ZThcXHUwNmVhLVxcdTA2ZWRcXHUwNmYwLVxcdTA2ZjlcXHUwNzExXFx1MDczMC1cXHUwNzRhXFx1MDdhNi1cXHUwN2IwXFx1MDdjMC1cXHUwN2M5XFx1MDdlYi1cXHUwN2YzXFx1MDdmZFxcdTA4MTYtXFx1MDgxOVxcdTA4MWItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyZFxcdTA4NTktXFx1MDg1YlxcdTA4ZDMtXFx1MDhlMVxcdTA4ZTMtXFx1MDkwM1xcdTA5M2EtXFx1MDkzY1xcdTA5M2UtXFx1MDk0ZlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk4MS1cXHUwOTgzXFx1MDliY1xcdTA5YmUtXFx1MDljNFxcdTA5YzdcXHUwOWM4XFx1MDljYi1cXHUwOWNkXFx1MDlkN1xcdTA5ZTJcXHUwOWUzXFx1MDllNi1cXHUwOWVmXFx1MDlmZVxcdTBhMDEtXFx1MGEwM1xcdTBhM2NcXHUwYTNlLVxcdTBhNDJcXHUwYTQ3XFx1MGE0OFxcdTBhNGItXFx1MGE0ZFxcdTBhNTFcXHUwYTY2LVxcdTBhNzFcXHUwYTc1XFx1MGE4MS1cXHUwYTgzXFx1MGFiY1xcdTBhYmUtXFx1MGFjNVxcdTBhYzctXFx1MGFjOVxcdTBhY2ItXFx1MGFjZFxcdTBhZTJcXHUwYWUzXFx1MGFlNi1cXHUwYWVmXFx1MGFmYS1cXHUwYWZmXFx1MGIwMS1cXHUwYjAzXFx1MGIzY1xcdTBiM2UtXFx1MGI0NFxcdTBiNDdcXHUwYjQ4XFx1MGI0Yi1cXHUwYjRkXFx1MGI1NS1cXHUwYjU3XFx1MGI2MlxcdTBiNjNcXHUwYjY2LVxcdTBiNmZcXHUwYjgyXFx1MGJiZS1cXHUwYmMyXFx1MGJjNi1cXHUwYmM4XFx1MGJjYS1cXHUwYmNkXFx1MGJkN1xcdTBiZTYtXFx1MGJlZlxcdTBjMDAtXFx1MGMwNFxcdTBjM2UtXFx1MGM0NFxcdTBjNDYtXFx1MGM0OFxcdTBjNGEtXFx1MGM0ZFxcdTBjNTVcXHUwYzU2XFx1MGM2MlxcdTBjNjNcXHUwYzY2LVxcdTBjNmZcXHUwYzgxLVxcdTBjODNcXHUwY2JjXFx1MGNiZS1cXHUwY2M0XFx1MGNjNi1cXHUwY2M4XFx1MGNjYS1cXHUwY2NkXFx1MGNkNVxcdTBjZDZcXHUwY2UyXFx1MGNlM1xcdTBjZTYtXFx1MGNlZlxcdTBkMDAtXFx1MGQwM1xcdTBkM2JcXHUwZDNjXFx1MGQzZS1cXHUwZDQ0XFx1MGQ0Ni1cXHUwZDQ4XFx1MGQ0YS1cXHUwZDRkXFx1MGQ1N1xcdTBkNjJcXHUwZDYzXFx1MGQ2Ni1cXHUwZDZmXFx1MGQ4MS1cXHUwZDgzXFx1MGRjYVxcdTBkY2YtXFx1MGRkNFxcdTBkZDZcXHUwZGQ4LVxcdTBkZGZcXHUwZGU2LVxcdTBkZWZcXHUwZGYyXFx1MGRmM1xcdTBlMzFcXHUwZTM0LVxcdTBlM2FcXHUwZTQ3LVxcdTBlNGVcXHUwZTUwLVxcdTBlNTlcXHUwZWIxXFx1MGViNC1cXHUwZWJjXFx1MGVjOC1cXHUwZWNkXFx1MGVkMC1cXHUwZWQ5XFx1MGYxOFxcdTBmMTlcXHUwZjIwLVxcdTBmMjlcXHUwZjM1XFx1MGYzN1xcdTBmMzlcXHUwZjNlXFx1MGYzZlxcdTBmNzEtXFx1MGY4NFxcdTBmODZcXHUwZjg3XFx1MGY4ZC1cXHUwZjk3XFx1MGY5OS1cXHUwZmJjXFx1MGZjNlxcdTEwMmItXFx1MTAzZVxcdTEwNDAtXFx1MTA0OVxcdTEwNTYtXFx1MTA1OVxcdTEwNWUtXFx1MTA2MFxcdTEwNjItXFx1MTA2NFxcdTEwNjctXFx1MTA2ZFxcdTEwNzEtXFx1MTA3NFxcdTEwODItXFx1MTA4ZFxcdTEwOGYtXFx1MTA5ZFxcdTEzNWQtXFx1MTM1ZlxcdTEzNjktXFx1MTM3MVxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN2I0LVxcdTE3ZDNcXHUxN2RkXFx1MTdlMC1cXHUxN2U5XFx1MTgwYi1cXHUxODBkXFx1MTgxMC1cXHUxODE5XFx1MThhOVxcdTE5MjAtXFx1MTkyYlxcdTE5MzAtXFx1MTkzYlxcdTE5NDYtXFx1MTk0ZlxcdTE5ZDAtXFx1MTlkYVxcdTFhMTctXFx1MWExYlxcdTFhNTUtXFx1MWE1ZVxcdTFhNjAtXFx1MWE3Y1xcdTFhN2YtXFx1MWE4OVxcdTFhOTAtXFx1MWE5OVxcdTFhYjAtXFx1MWFiZFxcdTFhYmZcXHUxYWMwXFx1MWIwMC1cXHUxYjA0XFx1MWIzNC1cXHUxYjQ0XFx1MWI1MC1cXHUxYjU5XFx1MWI2Yi1cXHUxYjczXFx1MWI4MC1cXHUxYjgyXFx1MWJhMS1cXHUxYmFkXFx1MWJiMC1cXHUxYmI5XFx1MWJlNi1cXHUxYmYzXFx1MWMyNC1cXHUxYzM3XFx1MWM0MC1cXHUxYzQ5XFx1MWM1MC1cXHUxYzU5XFx1MWNkMC1cXHUxY2QyXFx1MWNkNC1cXHUxY2U4XFx1MWNlZFxcdTFjZjRcXHUxY2Y3LVxcdTFjZjlcXHUxZGMwLVxcdTFkZjlcXHUxZGZiLVxcdTFkZmZcXHUyMDNmXFx1MjA0MFxcdTIwNTRcXHUyMGQwLVxcdTIwZGNcXHUyMGUxXFx1MjBlNS1cXHUyMGYwXFx1MmNlZi1cXHUyY2YxXFx1MmQ3ZlxcdTJkZTAtXFx1MmRmZlxcdTMwMmEtXFx1MzAyZlxcdTMwOTlcXHUzMDlhXFx1YTYyMC1cXHVhNjI5XFx1YTY2ZlxcdWE2NzQtXFx1YTY3ZFxcdWE2OWVcXHVhNjlmXFx1YTZmMFxcdWE2ZjFcXHVhODAyXFx1YTgwNlxcdWE4MGJcXHVhODIzLVxcdWE4MjdcXHVhODJjXFx1YTg4MFxcdWE4ODFcXHVhOGI0LVxcdWE4YzVcXHVhOGQwLVxcdWE4ZDlcXHVhOGUwLVxcdWE4ZjFcXHVhOGZmLVxcdWE5MDlcXHVhOTI2LVxcdWE5MmRcXHVhOTQ3LVxcdWE5NTNcXHVhOTgwLVxcdWE5ODNcXHVhOWIzLVxcdWE5YzBcXHVhOWQwLVxcdWE5ZDlcXHVhOWU1XFx1YTlmMC1cXHVhOWY5XFx1YWEyOS1cXHVhYTM2XFx1YWE0M1xcdWFhNGNcXHVhYTRkXFx1YWE1MC1cXHVhYTU5XFx1YWE3Yi1cXHVhYTdkXFx1YWFiMFxcdWFhYjItXFx1YWFiNFxcdWFhYjdcXHVhYWI4XFx1YWFiZVxcdWFhYmZcXHVhYWMxXFx1YWFlYi1cXHVhYWVmXFx1YWFmNVxcdWFhZjZcXHVhYmUzLVxcdWFiZWFcXHVhYmVjXFx1YWJlZFxcdWFiZjAtXFx1YWJmOVxcdWZiMWVcXHVmZTAwLVxcdWZlMGZcXHVmZTIwLVxcdWZlMmZcXHVmZTMzXFx1ZmUzNFxcdWZlNGQtXFx1ZmU0ZlxcdWZmMTAtXFx1ZmYxOVxcdWZmM2ZcIjtcbmNvbnN0IG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0ID0gbmV3IFJlZ0V4cChcIltcIiArIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgKyBcIl1cIik7XG5jb25zdCBub25BU0NJSWlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIpO1xubm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzID0gbnVsbDtcbmNvbnN0IGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzID0gWzAsIDExLCAyLCAyNSwgMiwgMTgsIDIsIDEsIDIsIDE0LCAzLCAxMywgMzUsIDEyMiwgNzAsIDUyLCAyNjgsIDI4LCA0LCA0OCwgNDgsIDMxLCAxNCwgMjksIDYsIDM3LCAxMSwgMjksIDMsIDM1LCA1LCA3LCAyLCA0LCA0MywgMTU3LCAxOSwgMzUsIDUsIDM1LCA1LCAzOSwgOSwgNTEsIDE1NywgMzEwLCAxMCwgMjEsIDExLCA3LCAxNTMsIDUsIDMsIDAsIDIsIDQzLCAyLCAxLCA0LCAwLCAzLCAyMiwgMTEsIDIyLCAxMCwgMzAsIDY2LCAxOCwgMiwgMSwgMTEsIDIxLCAxMSwgMjUsIDcxLCA1NSwgNywgMSwgNjUsIDAsIDE2LCAzLCAyLCAyLCAyLCAyOCwgNDMsIDI4LCA0LCAyOCwgMzYsIDcsIDIsIDI3LCAyOCwgNTMsIDExLCAyMSwgMTEsIDE4LCAxNCwgMTcsIDExMSwgNzIsIDU2LCA1MCwgMTQsIDUwLCAxNCwgMzUsIDM0OSwgNDEsIDcsIDEsIDc5LCAyOCwgMTEsIDAsIDksIDIxLCAxMDcsIDIwLCAyOCwgMjIsIDEzLCA1MiwgNzYsIDQ0LCAzMywgMjQsIDI3LCAzNSwgMzAsIDAsIDMsIDAsIDksIDM0LCA0LCAwLCAxMywgNDcsIDE1LCAzLCAyMiwgMCwgMiwgMCwgMzYsIDE3LCAyLCAyNCwgODUsIDYsIDIsIDAsIDIsIDMsIDIsIDE0LCAyLCA5LCA4LCA0NiwgMzksIDcsIDMsIDEsIDMsIDIxLCAyLCA2LCAyLCAxLCAyLCA0LCA0LCAwLCAxOSwgMCwgMTMsIDQsIDE1OSwgNTIsIDE5LCAzLCAyMSwgMiwgMzEsIDQ3LCAyMSwgMSwgMiwgMCwgMTg1LCA0NiwgNDIsIDMsIDM3LCA0NywgMjEsIDAsIDYwLCA0MiwgMTQsIDAsIDcyLCAyNiwgMjMwLCA0MywgMTE3LCA2MywgMzIsIDcsIDMsIDAsIDMsIDcsIDIsIDEsIDIsIDIzLCAxNiwgMCwgMiwgMCwgOTUsIDcsIDMsIDM4LCAxNywgMCwgMiwgMCwgMjksIDAsIDExLCAzOSwgOCwgMCwgMjIsIDAsIDEyLCA0NSwgMjAsIDAsIDM1LCA1NiwgMjY0LCA4LCAyLCAzNiwgMTgsIDAsIDUwLCAyOSwgMTEzLCA2LCAyLCAxLCAyLCAzNywgMjIsIDAsIDI2LCA1LCAyLCAxLCAyLCAzMSwgMTUsIDAsIDMyOCwgMTgsIDE5MCwgMCwgODAsIDkyMSwgMTAzLCAxMTAsIDE4LCAxOTUsIDI3NDksIDEwNzAsIDQwNTAsIDU4MiwgODYzNCwgNTY4LCA4LCAzMCwgMTE0LCAyOSwgMTksIDQ3LCAxNywgMywgMzIsIDIwLCA2LCAxOCwgNjg5LCA2MywgMTI5LCA3NCwgNiwgMCwgNjcsIDEyLCA2NSwgMSwgMiwgMCwgMjksIDYxMzUsIDksIDEyMzcsIDQzLCA4LCA4OTUyLCAyODYsIDUwLCAyLCAxOCwgMywgOSwgMzk1LCAyMzA5LCAxMDYsIDYsIDEyLCA0LCA4LCA4LCA5LCA1OTkxLCA4NCwgMiwgNzAsIDIsIDEsIDMsIDAsIDMsIDEsIDMsIDMsIDIsIDExLCAyLCAwLCAyLCA2LCAyLCA2NCwgMiwgMywgMywgNywgMiwgNiwgMiwgMjcsIDIsIDMsIDIsIDQsIDIsIDAsIDQsIDYsIDIsIDMzOSwgMywgMjQsIDIsIDI0LCAyLCAzMCwgMiwgMjQsIDIsIDMwLCAyLCAyNCwgMiwgMzAsIDIsIDI0LCAyLCAzMCwgMiwgMjQsIDIsIDcsIDIzNTcsIDQ0LCAxMSwgNiwgMTcsIDAsIDM3MCwgNDMsIDEzMDEsIDE5NiwgNjAsIDY3LCA4LCAwLCAxMjA1LCAzLCAyLCAyNiwgMiwgMSwgMiwgMCwgMywgMCwgMiwgOSwgMiwgMywgMiwgMCwgMiwgMCwgNywgMCwgNSwgMCwgMiwgMCwgMiwgMCwgMiwgMiwgMiwgMSwgMiwgMCwgMywgMCwgMiwgMCwgMiwgMCwgMiwgMCwgMiwgMCwgMiwgMSwgMiwgMCwgMywgMywgMiwgNiwgMiwgMywgMiwgMywgMiwgMCwgMiwgOSwgMiwgMTYsIDYsIDIsIDIsIDQsIDIsIDE2LCA0NDIxLCA0MjcxNywgMzUsIDQxNDgsIDEyLCAyMjEsIDMsIDU3NjEsIDE1LCA3NDcyLCAzMTA0LCA1NDEsIDE1MDcsIDQ5MzhdO1xuY29uc3QgYXN0cmFsSWRlbnRpZmllckNvZGVzID0gWzUwOSwgMCwgMjI3LCAwLCAxNTAsIDQsIDI5NCwgOSwgMTM2OCwgMiwgMiwgMSwgNiwgMywgNDEsIDIsIDUsIDAsIDE2NiwgMSwgNTc0LCAzLCA5LCA5LCAzNzAsIDEsIDE1NCwgMTAsIDE3NiwgMiwgNTQsIDE0LCAzMiwgOSwgMTYsIDMsIDQ2LCAxMCwgNTQsIDksIDcsIDIsIDM3LCAxMywgMiwgOSwgNiwgMSwgNDUsIDAsIDEzLCAyLCA0OSwgMTMsIDksIDMsIDIsIDExLCA4MywgMTEsIDcsIDAsIDE2MSwgMTEsIDYsIDksIDcsIDMsIDU2LCAxLCAyLCA2LCAzLCAxLCAzLCAyLCAxMCwgMCwgMTEsIDEsIDMsIDYsIDQsIDQsIDE5MywgMTcsIDEwLCA5LCA1LCAwLCA4MiwgMTksIDEzLCA5LCAyMTQsIDYsIDMsIDgsIDI4LCAxLCA4MywgMTYsIDE2LCA5LCA4MiwgMTIsIDksIDksIDg0LCAxNCwgNSwgOSwgMjQzLCAxNCwgMTY2LCA5LCA3MSwgNSwgMiwgMSwgMywgMywgMiwgMCwgMiwgMSwgMTMsIDksIDEyMCwgNiwgMywgNiwgNCwgMCwgMjksIDksIDQxLCA2LCAyLCAzLCA5LCAwLCAxMCwgMTAsIDQ3LCAxNSwgNDA2LCA3LCAyLCA3LCAxNywgOSwgNTcsIDIxLCAyLCAxMywgMTIzLCA1LCA0LCAwLCAyLCAxLCAyLCA2LCAyLCAwLCA5LCA5LCA0OSwgNCwgMiwgMSwgMiwgNCwgOSwgOSwgMzMwLCAzLCAxOTMwNiwgOSwgMTM1LCA0LCA2MCwgNiwgMjYsIDksIDEwMTQsIDAsIDIsIDU0LCA4LCAzLCA4MiwgMCwgMTIsIDEsIDE5NjI4LCAxLCA1MzE5LCA0LCA0LCA1LCA5LCA3LCAzLCA2LCAzMSwgMywgMTQ5LCAyLCAxNDE4LCA0OSwgNTEzLCA1NCwgNSwgNDksIDksIDAsIDE1LCAwLCAyMywgNCwgMiwgMTQsIDEzNjEsIDYsIDIsIDE2LCAzLCA2LCAyLCAxLCAyLCA0LCAyNjIsIDYsIDEwLCA5LCA0MTksIDEzLCAxNDk1LCA2LCAxMTAsIDYsIDYsIDksIDQ3NTksIDksIDc4NzcxOSwgMjM5XTtcblxuZnVuY3Rpb24gaXNJbkFzdHJhbFNldChjb2RlLCBzZXQpIHtcbiAgbGV0IHBvcyA9IDB4MTAwMDA7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNldC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMikge1xuICAgIHBvcyArPSBzZXRbaV07XG4gICAgaWYgKHBvcyA+IGNvZGUpIHJldHVybiBmYWxzZTtcbiAgICBwb3MgKz0gc2V0W2kgKyAxXTtcbiAgICBpZiAocG9zID49IGNvZGUpIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJTdGFydChjb2RlKSB7XG4gIGlmIChjb2RlIDwgNjUpIHJldHVybiBjb2RlID09PSAzNjtcbiAgaWYgKGNvZGUgPD0gOTApIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA8IDk3KSByZXR1cm4gY29kZSA9PT0gOTU7XG4gIGlmIChjb2RlIDw9IDEyMikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGNvZGUgPD0gMHhmZmZmKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gMHhhYSAmJiBub25BU0NJSWlkZW50aWZpZXJTdGFydC50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpO1xuICB9XG5cbiAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpO1xufVxuXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJDaGFyKGNvZGUpIHtcbiAgaWYgKGNvZGUgPCA0OCkgcmV0dXJuIGNvZGUgPT09IDM2O1xuICBpZiAoY29kZSA8IDU4KSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGNvZGUgPCA2NSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoY29kZSA8PSA5MCkgcmV0dXJuIHRydWU7XG4gIGlmIChjb2RlIDwgOTcpIHJldHVybiBjb2RlID09PSA5NTtcbiAgaWYgKGNvZGUgPD0gMTIyKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoY29kZSA8PSAweGZmZmYpIHtcbiAgICByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllci50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpO1xuICB9XG5cbiAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpIHx8IGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllckNvZGVzKTtcbn1cblxuZnVuY3Rpb24gaXNJZGVudGlmaWVyTmFtZShuYW1lKSB7XG4gIGxldCBpc0ZpcnN0ID0gdHJ1ZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY3AgPSBuYW1lLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBpZiAoKGNwICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIGkgKyAxIDwgbmFtZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRyYWlsID0gbmFtZS5jaGFyQ29kZUF0KCsraSk7XG5cbiAgICAgIGlmICgodHJhaWwgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgY3AgPSAweDEwMDAwICsgKChjcCAmIDB4M2ZmKSA8PCAxMCkgKyAodHJhaWwgJiAweDNmZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgIGlzRmlyc3QgPSBmYWxzZTtcblxuICAgICAgaWYgKCFpc0lkZW50aWZpZXJTdGFydChjcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzSWRlbnRpZmllckNoYXIoY3ApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICFpc0ZpcnN0O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJZGVudGlmaWVyTmFtZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaWRlbnRpZmllci5pc0lkZW50aWZpZXJOYW1lO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSWRlbnRpZmllckNoYXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lkZW50aWZpZXIuaXNJZGVudGlmaWVyQ2hhcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0lkZW50aWZpZXJTdGFydFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaWRlbnRpZmllci5pc0lkZW50aWZpZXJTdGFydDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1Jlc2VydmVkV29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfa2V5d29yZC5pc1Jlc2VydmVkV29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9rZXl3b3JkLmlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9rZXl3b3JkLmlzU3RyaWN0QmluZFJlc2VydmVkV29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1N0cmljdFJlc2VydmVkV29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfa2V5d29yZC5pc1N0cmljdFJlc2VydmVkV29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0tleXdvcmRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2tleXdvcmQuaXNLZXl3b3JkO1xuICB9XG59KTtcblxudmFyIF9pZGVudGlmaWVyID0gcmVxdWlyZShcIi4vaWRlbnRpZmllclwiKTtcblxudmFyIF9rZXl3b3JkID0gcmVxdWlyZShcIi4va2V5d29yZFwiKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNSZXNlcnZlZFdvcmQgPSBpc1Jlc2VydmVkV29yZDtcbmV4cG9ydHMuaXNTdHJpY3RSZXNlcnZlZFdvcmQgPSBpc1N0cmljdFJlc2VydmVkV29yZDtcbmV4cG9ydHMuaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCA9IGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQ7XG5leHBvcnRzLmlzU3RyaWN0QmluZFJlc2VydmVkV29yZCA9IGlzU3RyaWN0QmluZFJlc2VydmVkV29yZDtcbmV4cG9ydHMuaXNLZXl3b3JkID0gaXNLZXl3b3JkO1xuY29uc3QgcmVzZXJ2ZWRXb3JkcyA9IHtcbiAga2V5d29yZDogW1wiYnJlYWtcIiwgXCJjYXNlXCIsIFwiY2F0Y2hcIiwgXCJjb250aW51ZVwiLCBcImRlYnVnZ2VyXCIsIFwiZGVmYXVsdFwiLCBcImRvXCIsIFwiZWxzZVwiLCBcImZpbmFsbHlcIiwgXCJmb3JcIiwgXCJmdW5jdGlvblwiLCBcImlmXCIsIFwicmV0dXJuXCIsIFwic3dpdGNoXCIsIFwidGhyb3dcIiwgXCJ0cnlcIiwgXCJ2YXJcIiwgXCJjb25zdFwiLCBcIndoaWxlXCIsIFwid2l0aFwiLCBcIm5ld1wiLCBcInRoaXNcIiwgXCJzdXBlclwiLCBcImNsYXNzXCIsIFwiZXh0ZW5kc1wiLCBcImV4cG9ydFwiLCBcImltcG9ydFwiLCBcIm51bGxcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIiwgXCJpblwiLCBcImluc3RhbmNlb2ZcIiwgXCJ0eXBlb2ZcIiwgXCJ2b2lkXCIsIFwiZGVsZXRlXCJdLFxuICBzdHJpY3Q6IFtcImltcGxlbWVudHNcIiwgXCJpbnRlcmZhY2VcIiwgXCJsZXRcIiwgXCJwYWNrYWdlXCIsIFwicHJpdmF0ZVwiLCBcInByb3RlY3RlZFwiLCBcInB1YmxpY1wiLCBcInN0YXRpY1wiLCBcInlpZWxkXCJdLFxuICBzdHJpY3RCaW5kOiBbXCJldmFsXCIsIFwiYXJndW1lbnRzXCJdXG59O1xuY29uc3Qga2V5d29yZHMgPSBuZXcgU2V0KHJlc2VydmVkV29yZHMua2V5d29yZCk7XG5jb25zdCByZXNlcnZlZFdvcmRzU3RyaWN0U2V0ID0gbmV3IFNldChyZXNlcnZlZFdvcmRzLnN0cmljdCk7XG5jb25zdCByZXNlcnZlZFdvcmRzU3RyaWN0QmluZFNldCA9IG5ldyBTZXQocmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcblxuZnVuY3Rpb24gaXNSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHtcbiAgcmV0dXJuIGluTW9kdWxlICYmIHdvcmQgPT09IFwiYXdhaXRcIiB8fCB3b3JkID09PSBcImVudW1cIjtcbn1cblxuZnVuY3Rpb24gaXNTdHJpY3RSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHtcbiAgcmV0dXJuIGlzUmVzZXJ2ZWRXb3JkKHdvcmQsIGluTW9kdWxlKSB8fCByZXNlcnZlZFdvcmRzU3RyaWN0U2V0Lmhhcyh3b3JkKTtcbn1cblxuZnVuY3Rpb24gaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCh3b3JkKSB7XG4gIHJldHVybiByZXNlcnZlZFdvcmRzU3RyaWN0QmluZFNldC5oYXMod29yZCk7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaWN0QmluZFJlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkge1xuICByZXR1cm4gaXNTdHJpY3RSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHx8IGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQod29yZCk7XG59XG5cbmZ1bmN0aW9uIGlzS2V5d29yZCh3b3JkKSB7XG4gIHJldHVybiBrZXl3b3Jkcy5oYXMod29yZCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NlcnROb2RlO1xuXG52YXIgX2lzTm9kZSA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2lzTm9kZVwiKTtcblxuZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlKSB7XG4gIGlmICghKDAsIF9pc05vZGUuZGVmYXVsdCkobm9kZSkpIHtcbiAgICB2YXIgX25vZGUkdHlwZTtcblxuICAgIGNvbnN0IHR5cGUgPSAoX25vZGUkdHlwZSA9IG5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IG5vZGUudHlwZSkgIT0gbnVsbCA/IF9ub2RlJHR5cGUgOiBKU09OLnN0cmluZ2lmeShub2RlKTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBOb3QgYSB2YWxpZCBub2RlIG9mIHR5cGUgXCIke3R5cGV9XCJgKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hc3NlcnRBcnJheUV4cHJlc3Npb24gPSBhc3NlcnRBcnJheUV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydEFzc2lnbm1lbnRFeHByZXNzaW9uID0gYXNzZXJ0QXNzaWdubWVudEV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydEJpbmFyeUV4cHJlc3Npb24gPSBhc3NlcnRCaW5hcnlFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRJbnRlcnByZXRlckRpcmVjdGl2ZSA9IGFzc2VydEludGVycHJldGVyRGlyZWN0aXZlO1xuZXhwb3J0cy5hc3NlcnREaXJlY3RpdmUgPSBhc3NlcnREaXJlY3RpdmU7XG5leHBvcnRzLmFzc2VydERpcmVjdGl2ZUxpdGVyYWwgPSBhc3NlcnREaXJlY3RpdmVMaXRlcmFsO1xuZXhwb3J0cy5hc3NlcnRCbG9ja1N0YXRlbWVudCA9IGFzc2VydEJsb2NrU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRCcmVha1N0YXRlbWVudCA9IGFzc2VydEJyZWFrU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRDYWxsRXhwcmVzc2lvbiA9IGFzc2VydENhbGxFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRDYXRjaENsYXVzZSA9IGFzc2VydENhdGNoQ2xhdXNlO1xuZXhwb3J0cy5hc3NlcnRDb25kaXRpb25hbEV4cHJlc3Npb24gPSBhc3NlcnRDb25kaXRpb25hbEV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydENvbnRpbnVlU3RhdGVtZW50ID0gYXNzZXJ0Q29udGludWVTdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydERlYnVnZ2VyU3RhdGVtZW50ID0gYXNzZXJ0RGVidWdnZXJTdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydERvV2hpbGVTdGF0ZW1lbnQgPSBhc3NlcnREb1doaWxlU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRFbXB0eVN0YXRlbWVudCA9IGFzc2VydEVtcHR5U3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRFeHByZXNzaW9uU3RhdGVtZW50ID0gYXNzZXJ0RXhwcmVzc2lvblN0YXRlbWVudDtcbmV4cG9ydHMuYXNzZXJ0RmlsZSA9IGFzc2VydEZpbGU7XG5leHBvcnRzLmFzc2VydEZvckluU3RhdGVtZW50ID0gYXNzZXJ0Rm9ySW5TdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydEZvclN0YXRlbWVudCA9IGFzc2VydEZvclN0YXRlbWVudDtcbmV4cG9ydHMuYXNzZXJ0RnVuY3Rpb25EZWNsYXJhdGlvbiA9IGFzc2VydEZ1bmN0aW9uRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydEZ1bmN0aW9uRXhwcmVzc2lvbiA9IGFzc2VydEZ1bmN0aW9uRXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0SWRlbnRpZmllciA9IGFzc2VydElkZW50aWZpZXI7XG5leHBvcnRzLmFzc2VydElmU3RhdGVtZW50ID0gYXNzZXJ0SWZTdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydExhYmVsZWRTdGF0ZW1lbnQgPSBhc3NlcnRMYWJlbGVkU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRTdHJpbmdMaXRlcmFsID0gYXNzZXJ0U3RyaW5nTGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0TnVtZXJpY0xpdGVyYWwgPSBhc3NlcnROdW1lcmljTGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0TnVsbExpdGVyYWwgPSBhc3NlcnROdWxsTGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0Qm9vbGVhbkxpdGVyYWwgPSBhc3NlcnRCb29sZWFuTGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0UmVnRXhwTGl0ZXJhbCA9IGFzc2VydFJlZ0V4cExpdGVyYWw7XG5leHBvcnRzLmFzc2VydExvZ2ljYWxFeHByZXNzaW9uID0gYXNzZXJ0TG9naWNhbEV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydE1lbWJlckV4cHJlc3Npb24gPSBhc3NlcnRNZW1iZXJFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnROZXdFeHByZXNzaW9uID0gYXNzZXJ0TmV3RXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0UHJvZ3JhbSA9IGFzc2VydFByb2dyYW07XG5leHBvcnRzLmFzc2VydE9iamVjdEV4cHJlc3Npb24gPSBhc3NlcnRPYmplY3RFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRPYmplY3RNZXRob2QgPSBhc3NlcnRPYmplY3RNZXRob2Q7XG5leHBvcnRzLmFzc2VydE9iamVjdFByb3BlcnR5ID0gYXNzZXJ0T2JqZWN0UHJvcGVydHk7XG5leHBvcnRzLmFzc2VydFJlc3RFbGVtZW50ID0gYXNzZXJ0UmVzdEVsZW1lbnQ7XG5leHBvcnRzLmFzc2VydFJldHVyblN0YXRlbWVudCA9IGFzc2VydFJldHVyblN0YXRlbWVudDtcbmV4cG9ydHMuYXNzZXJ0U2VxdWVuY2VFeHByZXNzaW9uID0gYXNzZXJ0U2VxdWVuY2VFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiA9IGFzc2VydFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRTd2l0Y2hDYXNlID0gYXNzZXJ0U3dpdGNoQ2FzZTtcbmV4cG9ydHMuYXNzZXJ0U3dpdGNoU3RhdGVtZW50ID0gYXNzZXJ0U3dpdGNoU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRUaGlzRXhwcmVzc2lvbiA9IGFzc2VydFRoaXNFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRUaHJvd1N0YXRlbWVudCA9IGFzc2VydFRocm93U3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRUcnlTdGF0ZW1lbnQgPSBhc3NlcnRUcnlTdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydFVuYXJ5RXhwcmVzc2lvbiA9IGFzc2VydFVuYXJ5RXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0VXBkYXRlRXhwcmVzc2lvbiA9IGFzc2VydFVwZGF0ZUV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydFZhcmlhYmxlRGVjbGFyYXRpb24gPSBhc3NlcnRWYXJpYWJsZURlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnRWYXJpYWJsZURlY2xhcmF0b3IgPSBhc3NlcnRWYXJpYWJsZURlY2xhcmF0b3I7XG5leHBvcnRzLmFzc2VydFdoaWxlU3RhdGVtZW50ID0gYXNzZXJ0V2hpbGVTdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydFdpdGhTdGF0ZW1lbnQgPSBhc3NlcnRXaXRoU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRBc3NpZ25tZW50UGF0dGVybiA9IGFzc2VydEFzc2lnbm1lbnRQYXR0ZXJuO1xuZXhwb3J0cy5hc3NlcnRBcnJheVBhdHRlcm4gPSBhc3NlcnRBcnJheVBhdHRlcm47XG5leHBvcnRzLmFzc2VydEFycm93RnVuY3Rpb25FeHByZXNzaW9uID0gYXNzZXJ0QXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydENsYXNzQm9keSA9IGFzc2VydENsYXNzQm9keTtcbmV4cG9ydHMuYXNzZXJ0Q2xhc3NFeHByZXNzaW9uID0gYXNzZXJ0Q2xhc3NFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRDbGFzc0RlY2xhcmF0aW9uID0gYXNzZXJ0Q2xhc3NEZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0RXhwb3J0QWxsRGVjbGFyYXRpb24gPSBhc3NlcnRFeHBvcnRBbGxEZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0RXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uID0gYXNzZXJ0RXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnRFeHBvcnROYW1lZERlY2xhcmF0aW9uID0gYXNzZXJ0RXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0RXhwb3J0U3BlY2lmaWVyID0gYXNzZXJ0RXhwb3J0U3BlY2lmaWVyO1xuZXhwb3J0cy5hc3NlcnRGb3JPZlN0YXRlbWVudCA9IGFzc2VydEZvck9mU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRJbXBvcnREZWNsYXJhdGlvbiA9IGFzc2VydEltcG9ydERlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnRJbXBvcnREZWZhdWx0U3BlY2lmaWVyID0gYXNzZXJ0SW1wb3J0RGVmYXVsdFNwZWNpZmllcjtcbmV4cG9ydHMuYXNzZXJ0SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gYXNzZXJ0SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyO1xuZXhwb3J0cy5hc3NlcnRJbXBvcnRTcGVjaWZpZXIgPSBhc3NlcnRJbXBvcnRTcGVjaWZpZXI7XG5leHBvcnRzLmFzc2VydE1ldGFQcm9wZXJ0eSA9IGFzc2VydE1ldGFQcm9wZXJ0eTtcbmV4cG9ydHMuYXNzZXJ0Q2xhc3NNZXRob2QgPSBhc3NlcnRDbGFzc01ldGhvZDtcbmV4cG9ydHMuYXNzZXJ0T2JqZWN0UGF0dGVybiA9IGFzc2VydE9iamVjdFBhdHRlcm47XG5leHBvcnRzLmFzc2VydFNwcmVhZEVsZW1lbnQgPSBhc3NlcnRTcHJlYWRFbGVtZW50O1xuZXhwb3J0cy5hc3NlcnRTdXBlciA9IGFzc2VydFN1cGVyO1xuZXhwb3J0cy5hc3NlcnRUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24gPSBhc3NlcnRUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydFRlbXBsYXRlRWxlbWVudCA9IGFzc2VydFRlbXBsYXRlRWxlbWVudDtcbmV4cG9ydHMuYXNzZXJ0VGVtcGxhdGVMaXRlcmFsID0gYXNzZXJ0VGVtcGxhdGVMaXRlcmFsO1xuZXhwb3J0cy5hc3NlcnRZaWVsZEV4cHJlc3Npb24gPSBhc3NlcnRZaWVsZEV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydEF3YWl0RXhwcmVzc2lvbiA9IGFzc2VydEF3YWl0RXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0SW1wb3J0ID0gYXNzZXJ0SW1wb3J0O1xuZXhwb3J0cy5hc3NlcnRCaWdJbnRMaXRlcmFsID0gYXNzZXJ0QmlnSW50TGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0RXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gYXNzZXJ0RXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyO1xuZXhwb3J0cy5hc3NlcnRPcHRpb25hbE1lbWJlckV4cHJlc3Npb24gPSBhc3NlcnRPcHRpb25hbE1lbWJlckV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydE9wdGlvbmFsQ2FsbEV4cHJlc3Npb24gPSBhc3NlcnRPcHRpb25hbENhbGxFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRDbGFzc1Byb3BlcnR5ID0gYXNzZXJ0Q2xhc3NQcm9wZXJ0eTtcbmV4cG9ydHMuYXNzZXJ0Q2xhc3NQcml2YXRlUHJvcGVydHkgPSBhc3NlcnRDbGFzc1ByaXZhdGVQcm9wZXJ0eTtcbmV4cG9ydHMuYXNzZXJ0Q2xhc3NQcml2YXRlTWV0aG9kID0gYXNzZXJ0Q2xhc3NQcml2YXRlTWV0aG9kO1xuZXhwb3J0cy5hc3NlcnRQcml2YXRlTmFtZSA9IGFzc2VydFByaXZhdGVOYW1lO1xuZXhwb3J0cy5hc3NlcnRBbnlUeXBlQW5ub3RhdGlvbiA9IGFzc2VydEFueVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnRBcnJheVR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0QXJyYXlUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0Qm9vbGVhblR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0Qm9vbGVhblR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnRCb29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0Qm9vbGVhbkxpdGVyYWxUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0TnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvbiA9IGFzc2VydE51bGxMaXRlcmFsVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydENsYXNzSW1wbGVtZW50cyA9IGFzc2VydENsYXNzSW1wbGVtZW50cztcbmV4cG9ydHMuYXNzZXJ0RGVjbGFyZUNsYXNzID0gYXNzZXJ0RGVjbGFyZUNsYXNzO1xuZXhwb3J0cy5hc3NlcnREZWNsYXJlRnVuY3Rpb24gPSBhc3NlcnREZWNsYXJlRnVuY3Rpb247XG5leHBvcnRzLmFzc2VydERlY2xhcmVJbnRlcmZhY2UgPSBhc3NlcnREZWNsYXJlSW50ZXJmYWNlO1xuZXhwb3J0cy5hc3NlcnREZWNsYXJlTW9kdWxlID0gYXNzZXJ0RGVjbGFyZU1vZHVsZTtcbmV4cG9ydHMuYXNzZXJ0RGVjbGFyZU1vZHVsZUV4cG9ydHMgPSBhc3NlcnREZWNsYXJlTW9kdWxlRXhwb3J0cztcbmV4cG9ydHMuYXNzZXJ0RGVjbGFyZVR5cGVBbGlhcyA9IGFzc2VydERlY2xhcmVUeXBlQWxpYXM7XG5leHBvcnRzLmFzc2VydERlY2xhcmVPcGFxdWVUeXBlID0gYXNzZXJ0RGVjbGFyZU9wYXF1ZVR5cGU7XG5leHBvcnRzLmFzc2VydERlY2xhcmVWYXJpYWJsZSA9IGFzc2VydERlY2xhcmVWYXJpYWJsZTtcbmV4cG9ydHMuYXNzZXJ0RGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uID0gYXNzZXJ0RGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnREZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb24gPSBhc3NlcnREZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydERlY2xhcmVkUHJlZGljYXRlID0gYXNzZXJ0RGVjbGFyZWRQcmVkaWNhdGU7XG5leHBvcnRzLmFzc2VydEV4aXN0c1R5cGVBbm5vdGF0aW9uID0gYXNzZXJ0RXhpc3RzVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydEZ1bmN0aW9uVHlwZUFubm90YXRpb24gPSBhc3NlcnRGdW5jdGlvblR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnRGdW5jdGlvblR5cGVQYXJhbSA9IGFzc2VydEZ1bmN0aW9uVHlwZVBhcmFtO1xuZXhwb3J0cy5hc3NlcnRHZW5lcmljVHlwZUFubm90YXRpb24gPSBhc3NlcnRHZW5lcmljVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydEluZmVycmVkUHJlZGljYXRlID0gYXNzZXJ0SW5mZXJyZWRQcmVkaWNhdGU7XG5leHBvcnRzLmFzc2VydEludGVyZmFjZUV4dGVuZHMgPSBhc3NlcnRJbnRlcmZhY2VFeHRlbmRzO1xuZXhwb3J0cy5hc3NlcnRJbnRlcmZhY2VEZWNsYXJhdGlvbiA9IGFzc2VydEludGVyZmFjZURlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnRJbnRlcmZhY2VUeXBlQW5ub3RhdGlvbiA9IGFzc2VydEludGVyZmFjZVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnRJbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvbiA9IGFzc2VydEludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnRNaXhlZFR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0TWl4ZWRUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0RW1wdHlUeXBlQW5ub3RhdGlvbiA9IGFzc2VydEVtcHR5VHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydE51bGxhYmxlVHlwZUFubm90YXRpb24gPSBhc3NlcnROdWxsYWJsZVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnROdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb24gPSBhc3NlcnROdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydE51bWJlclR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0TnVtYmVyVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydE9iamVjdFR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0T2JqZWN0VHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydE9iamVjdFR5cGVJbnRlcm5hbFNsb3QgPSBhc3NlcnRPYmplY3RUeXBlSW50ZXJuYWxTbG90O1xuZXhwb3J0cy5hc3NlcnRPYmplY3RUeXBlQ2FsbFByb3BlcnR5ID0gYXNzZXJ0T2JqZWN0VHlwZUNhbGxQcm9wZXJ0eTtcbmV4cG9ydHMuYXNzZXJ0T2JqZWN0VHlwZUluZGV4ZXIgPSBhc3NlcnRPYmplY3RUeXBlSW5kZXhlcjtcbmV4cG9ydHMuYXNzZXJ0T2JqZWN0VHlwZVByb3BlcnR5ID0gYXNzZXJ0T2JqZWN0VHlwZVByb3BlcnR5O1xuZXhwb3J0cy5hc3NlcnRPYmplY3RUeXBlU3ByZWFkUHJvcGVydHkgPSBhc3NlcnRPYmplY3RUeXBlU3ByZWFkUHJvcGVydHk7XG5leHBvcnRzLmFzc2VydE9wYXF1ZVR5cGUgPSBhc3NlcnRPcGFxdWVUeXBlO1xuZXhwb3J0cy5hc3NlcnRRdWFsaWZpZWRUeXBlSWRlbnRpZmllciA9IGFzc2VydFF1YWxpZmllZFR5cGVJZGVudGlmaWVyO1xuZXhwb3J0cy5hc3NlcnRTdHJpbmdMaXRlcmFsVHlwZUFubm90YXRpb24gPSBhc3NlcnRTdHJpbmdMaXRlcmFsVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydFN0cmluZ1R5cGVBbm5vdGF0aW9uID0gYXNzZXJ0U3RyaW5nVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydFN5bWJvbFR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0U3ltYm9sVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydFRoaXNUeXBlQW5ub3RhdGlvbiA9IGFzc2VydFRoaXNUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VHVwbGVUeXBlQW5ub3RhdGlvbiA9IGFzc2VydFR1cGxlVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydFR5cGVvZlR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0VHlwZW9mVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydFR5cGVBbGlhcyA9IGFzc2VydFR5cGVBbGlhcztcbmV4cG9ydHMuYXNzZXJ0VHlwZUFubm90YXRpb24gPSBhc3NlcnRUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VHlwZUNhc3RFeHByZXNzaW9uID0gYXNzZXJ0VHlwZUNhc3RFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRUeXBlUGFyYW1ldGVyID0gYXNzZXJ0VHlwZVBhcmFtZXRlcjtcbmV4cG9ydHMuYXNzZXJ0VHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uID0gYXNzZXJ0VHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnRUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbiA9IGFzc2VydFR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uO1xuZXhwb3J0cy5hc3NlcnRVbmlvblR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0VW5pb25UeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VmFyaWFuY2UgPSBhc3NlcnRWYXJpYW5jZTtcbmV4cG9ydHMuYXNzZXJ0Vm9pZFR5cGVBbm5vdGF0aW9uID0gYXNzZXJ0Vm9pZFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5hc3NlcnRFbnVtRGVjbGFyYXRpb24gPSBhc3NlcnRFbnVtRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydEVudW1Cb29sZWFuQm9keSA9IGFzc2VydEVudW1Cb29sZWFuQm9keTtcbmV4cG9ydHMuYXNzZXJ0RW51bU51bWJlckJvZHkgPSBhc3NlcnRFbnVtTnVtYmVyQm9keTtcbmV4cG9ydHMuYXNzZXJ0RW51bVN0cmluZ0JvZHkgPSBhc3NlcnRFbnVtU3RyaW5nQm9keTtcbmV4cG9ydHMuYXNzZXJ0RW51bVN5bWJvbEJvZHkgPSBhc3NlcnRFbnVtU3ltYm9sQm9keTtcbmV4cG9ydHMuYXNzZXJ0RW51bUJvb2xlYW5NZW1iZXIgPSBhc3NlcnRFbnVtQm9vbGVhbk1lbWJlcjtcbmV4cG9ydHMuYXNzZXJ0RW51bU51bWJlck1lbWJlciA9IGFzc2VydEVudW1OdW1iZXJNZW1iZXI7XG5leHBvcnRzLmFzc2VydEVudW1TdHJpbmdNZW1iZXIgPSBhc3NlcnRFbnVtU3RyaW5nTWVtYmVyO1xuZXhwb3J0cy5hc3NlcnRFbnVtRGVmYXVsdGVkTWVtYmVyID0gYXNzZXJ0RW51bURlZmF1bHRlZE1lbWJlcjtcbmV4cG9ydHMuYXNzZXJ0SW5kZXhlZEFjY2Vzc1R5cGUgPSBhc3NlcnRJbmRleGVkQWNjZXNzVHlwZTtcbmV4cG9ydHMuYXNzZXJ0T3B0aW9uYWxJbmRleGVkQWNjZXNzVHlwZSA9IGFzc2VydE9wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGU7XG5leHBvcnRzLmFzc2VydEpTWEF0dHJpYnV0ZSA9IGFzc2VydEpTWEF0dHJpYnV0ZTtcbmV4cG9ydHMuYXNzZXJ0SlNYQ2xvc2luZ0VsZW1lbnQgPSBhc3NlcnRKU1hDbG9zaW5nRWxlbWVudDtcbmV4cG9ydHMuYXNzZXJ0SlNYRWxlbWVudCA9IGFzc2VydEpTWEVsZW1lbnQ7XG5leHBvcnRzLmFzc2VydEpTWEVtcHR5RXhwcmVzc2lvbiA9IGFzc2VydEpTWEVtcHR5RXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0SlNYRXhwcmVzc2lvbkNvbnRhaW5lciA9IGFzc2VydEpTWEV4cHJlc3Npb25Db250YWluZXI7XG5leHBvcnRzLmFzc2VydEpTWFNwcmVhZENoaWxkID0gYXNzZXJ0SlNYU3ByZWFkQ2hpbGQ7XG5leHBvcnRzLmFzc2VydEpTWElkZW50aWZpZXIgPSBhc3NlcnRKU1hJZGVudGlmaWVyO1xuZXhwb3J0cy5hc3NlcnRKU1hNZW1iZXJFeHByZXNzaW9uID0gYXNzZXJ0SlNYTWVtYmVyRXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0SlNYTmFtZXNwYWNlZE5hbWUgPSBhc3NlcnRKU1hOYW1lc3BhY2VkTmFtZTtcbmV4cG9ydHMuYXNzZXJ0SlNYT3BlbmluZ0VsZW1lbnQgPSBhc3NlcnRKU1hPcGVuaW5nRWxlbWVudDtcbmV4cG9ydHMuYXNzZXJ0SlNYU3ByZWFkQXR0cmlidXRlID0gYXNzZXJ0SlNYU3ByZWFkQXR0cmlidXRlO1xuZXhwb3J0cy5hc3NlcnRKU1hUZXh0ID0gYXNzZXJ0SlNYVGV4dDtcbmV4cG9ydHMuYXNzZXJ0SlNYRnJhZ21lbnQgPSBhc3NlcnRKU1hGcmFnbWVudDtcbmV4cG9ydHMuYXNzZXJ0SlNYT3BlbmluZ0ZyYWdtZW50ID0gYXNzZXJ0SlNYT3BlbmluZ0ZyYWdtZW50O1xuZXhwb3J0cy5hc3NlcnRKU1hDbG9zaW5nRnJhZ21lbnQgPSBhc3NlcnRKU1hDbG9zaW5nRnJhZ21lbnQ7XG5leHBvcnRzLmFzc2VydE5vb3AgPSBhc3NlcnROb29wO1xuZXhwb3J0cy5hc3NlcnRQbGFjZWhvbGRlciA9IGFzc2VydFBsYWNlaG9sZGVyO1xuZXhwb3J0cy5hc3NlcnRWOEludHJpbnNpY0lkZW50aWZpZXIgPSBhc3NlcnRWOEludHJpbnNpY0lkZW50aWZpZXI7XG5leHBvcnRzLmFzc2VydEFyZ3VtZW50UGxhY2Vob2xkZXIgPSBhc3NlcnRBcmd1bWVudFBsYWNlaG9sZGVyO1xuZXhwb3J0cy5hc3NlcnRCaW5kRXhwcmVzc2lvbiA9IGFzc2VydEJpbmRFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRJbXBvcnRBdHRyaWJ1dGUgPSBhc3NlcnRJbXBvcnRBdHRyaWJ1dGU7XG5leHBvcnRzLmFzc2VydERlY29yYXRvciA9IGFzc2VydERlY29yYXRvcjtcbmV4cG9ydHMuYXNzZXJ0RG9FeHByZXNzaW9uID0gYXNzZXJ0RG9FeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRFeHBvcnREZWZhdWx0U3BlY2lmaWVyID0gYXNzZXJ0RXhwb3J0RGVmYXVsdFNwZWNpZmllcjtcbmV4cG9ydHMuYXNzZXJ0UmVjb3JkRXhwcmVzc2lvbiA9IGFzc2VydFJlY29yZEV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydFR1cGxlRXhwcmVzc2lvbiA9IGFzc2VydFR1cGxlRXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0RGVjaW1hbExpdGVyYWwgPSBhc3NlcnREZWNpbWFsTGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0U3RhdGljQmxvY2sgPSBhc3NlcnRTdGF0aWNCbG9jaztcbmV4cG9ydHMuYXNzZXJ0TW9kdWxlRXhwcmVzc2lvbiA9IGFzc2VydE1vZHVsZUV4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydFRvcGljUmVmZXJlbmNlID0gYXNzZXJ0VG9waWNSZWZlcmVuY2U7XG5leHBvcnRzLmFzc2VydFBpcGVsaW5lVG9waWNFeHByZXNzaW9uID0gYXNzZXJ0UGlwZWxpbmVUb3BpY0V4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydFBpcGVsaW5lQmFyZUZ1bmN0aW9uID0gYXNzZXJ0UGlwZWxpbmVCYXJlRnVuY3Rpb247XG5leHBvcnRzLmFzc2VydFBpcGVsaW5lUHJpbWFyeVRvcGljUmVmZXJlbmNlID0gYXNzZXJ0UGlwZWxpbmVQcmltYXJ5VG9waWNSZWZlcmVuY2U7XG5leHBvcnRzLmFzc2VydFRTUGFyYW1ldGVyUHJvcGVydHkgPSBhc3NlcnRUU1BhcmFtZXRlclByb3BlcnR5O1xuZXhwb3J0cy5hc3NlcnRUU0RlY2xhcmVGdW5jdGlvbiA9IGFzc2VydFRTRGVjbGFyZUZ1bmN0aW9uO1xuZXhwb3J0cy5hc3NlcnRUU0RlY2xhcmVNZXRob2QgPSBhc3NlcnRUU0RlY2xhcmVNZXRob2Q7XG5leHBvcnRzLmFzc2VydFRTUXVhbGlmaWVkTmFtZSA9IGFzc2VydFRTUXVhbGlmaWVkTmFtZTtcbmV4cG9ydHMuYXNzZXJ0VFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb24gPSBhc3NlcnRUU0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VFNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvbiA9IGFzc2VydFRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydFRTUHJvcGVydHlTaWduYXR1cmUgPSBhc3NlcnRUU1Byb3BlcnR5U2lnbmF0dXJlO1xuZXhwb3J0cy5hc3NlcnRUU01ldGhvZFNpZ25hdHVyZSA9IGFzc2VydFRTTWV0aG9kU2lnbmF0dXJlO1xuZXhwb3J0cy5hc3NlcnRUU0luZGV4U2lnbmF0dXJlID0gYXNzZXJ0VFNJbmRleFNpZ25hdHVyZTtcbmV4cG9ydHMuYXNzZXJ0VFNBbnlLZXl3b3JkID0gYXNzZXJ0VFNBbnlLZXl3b3JkO1xuZXhwb3J0cy5hc3NlcnRUU0Jvb2xlYW5LZXl3b3JkID0gYXNzZXJ0VFNCb29sZWFuS2V5d29yZDtcbmV4cG9ydHMuYXNzZXJ0VFNCaWdJbnRLZXl3b3JkID0gYXNzZXJ0VFNCaWdJbnRLZXl3b3JkO1xuZXhwb3J0cy5hc3NlcnRUU0ludHJpbnNpY0tleXdvcmQgPSBhc3NlcnRUU0ludHJpbnNpY0tleXdvcmQ7XG5leHBvcnRzLmFzc2VydFRTTmV2ZXJLZXl3b3JkID0gYXNzZXJ0VFNOZXZlcktleXdvcmQ7XG5leHBvcnRzLmFzc2VydFRTTnVsbEtleXdvcmQgPSBhc3NlcnRUU051bGxLZXl3b3JkO1xuZXhwb3J0cy5hc3NlcnRUU051bWJlcktleXdvcmQgPSBhc3NlcnRUU051bWJlcktleXdvcmQ7XG5leHBvcnRzLmFzc2VydFRTT2JqZWN0S2V5d29yZCA9IGFzc2VydFRTT2JqZWN0S2V5d29yZDtcbmV4cG9ydHMuYXNzZXJ0VFNTdHJpbmdLZXl3b3JkID0gYXNzZXJ0VFNTdHJpbmdLZXl3b3JkO1xuZXhwb3J0cy5hc3NlcnRUU1N5bWJvbEtleXdvcmQgPSBhc3NlcnRUU1N5bWJvbEtleXdvcmQ7XG5leHBvcnRzLmFzc2VydFRTVW5kZWZpbmVkS2V5d29yZCA9IGFzc2VydFRTVW5kZWZpbmVkS2V5d29yZDtcbmV4cG9ydHMuYXNzZXJ0VFNVbmtub3duS2V5d29yZCA9IGFzc2VydFRTVW5rbm93bktleXdvcmQ7XG5leHBvcnRzLmFzc2VydFRTVm9pZEtleXdvcmQgPSBhc3NlcnRUU1ZvaWRLZXl3b3JkO1xuZXhwb3J0cy5hc3NlcnRUU1RoaXNUeXBlID0gYXNzZXJ0VFNUaGlzVHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNGdW5jdGlvblR5cGUgPSBhc3NlcnRUU0Z1bmN0aW9uVHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNDb25zdHJ1Y3RvclR5cGUgPSBhc3NlcnRUU0NvbnN0cnVjdG9yVHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNUeXBlUmVmZXJlbmNlID0gYXNzZXJ0VFNUeXBlUmVmZXJlbmNlO1xuZXhwb3J0cy5hc3NlcnRUU1R5cGVQcmVkaWNhdGUgPSBhc3NlcnRUU1R5cGVQcmVkaWNhdGU7XG5leHBvcnRzLmFzc2VydFRTVHlwZVF1ZXJ5ID0gYXNzZXJ0VFNUeXBlUXVlcnk7XG5leHBvcnRzLmFzc2VydFRTVHlwZUxpdGVyYWwgPSBhc3NlcnRUU1R5cGVMaXRlcmFsO1xuZXhwb3J0cy5hc3NlcnRUU0FycmF5VHlwZSA9IGFzc2VydFRTQXJyYXlUeXBlO1xuZXhwb3J0cy5hc3NlcnRUU1R1cGxlVHlwZSA9IGFzc2VydFRTVHVwbGVUeXBlO1xuZXhwb3J0cy5hc3NlcnRUU09wdGlvbmFsVHlwZSA9IGFzc2VydFRTT3B0aW9uYWxUeXBlO1xuZXhwb3J0cy5hc3NlcnRUU1Jlc3RUeXBlID0gYXNzZXJ0VFNSZXN0VHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNOYW1lZFR1cGxlTWVtYmVyID0gYXNzZXJ0VFNOYW1lZFR1cGxlTWVtYmVyO1xuZXhwb3J0cy5hc3NlcnRUU1VuaW9uVHlwZSA9IGFzc2VydFRTVW5pb25UeXBlO1xuZXhwb3J0cy5hc3NlcnRUU0ludGVyc2VjdGlvblR5cGUgPSBhc3NlcnRUU0ludGVyc2VjdGlvblR5cGU7XG5leHBvcnRzLmFzc2VydFRTQ29uZGl0aW9uYWxUeXBlID0gYXNzZXJ0VFNDb25kaXRpb25hbFR5cGU7XG5leHBvcnRzLmFzc2VydFRTSW5mZXJUeXBlID0gYXNzZXJ0VFNJbmZlclR5cGU7XG5leHBvcnRzLmFzc2VydFRTUGFyZW50aGVzaXplZFR5cGUgPSBhc3NlcnRUU1BhcmVudGhlc2l6ZWRUeXBlO1xuZXhwb3J0cy5hc3NlcnRUU1R5cGVPcGVyYXRvciA9IGFzc2VydFRTVHlwZU9wZXJhdG9yO1xuZXhwb3J0cy5hc3NlcnRUU0luZGV4ZWRBY2Nlc3NUeXBlID0gYXNzZXJ0VFNJbmRleGVkQWNjZXNzVHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNNYXBwZWRUeXBlID0gYXNzZXJ0VFNNYXBwZWRUeXBlO1xuZXhwb3J0cy5hc3NlcnRUU0xpdGVyYWxUeXBlID0gYXNzZXJ0VFNMaXRlcmFsVHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMgPSBhc3NlcnRUU0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cztcbmV4cG9ydHMuYXNzZXJ0VFNJbnRlcmZhY2VEZWNsYXJhdGlvbiA9IGFzc2VydFRTSW50ZXJmYWNlRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydFRTSW50ZXJmYWNlQm9keSA9IGFzc2VydFRTSW50ZXJmYWNlQm9keTtcbmV4cG9ydHMuYXNzZXJ0VFNUeXBlQWxpYXNEZWNsYXJhdGlvbiA9IGFzc2VydFRTVHlwZUFsaWFzRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydFRTQXNFeHByZXNzaW9uID0gYXNzZXJ0VFNBc0V4cHJlc3Npb247XG5leHBvcnRzLmFzc2VydFRTVHlwZUFzc2VydGlvbiA9IGFzc2VydFRTVHlwZUFzc2VydGlvbjtcbmV4cG9ydHMuYXNzZXJ0VFNFbnVtRGVjbGFyYXRpb24gPSBhc3NlcnRUU0VudW1EZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VFNFbnVtTWVtYmVyID0gYXNzZXJ0VFNFbnVtTWVtYmVyO1xuZXhwb3J0cy5hc3NlcnRUU01vZHVsZURlY2xhcmF0aW9uID0gYXNzZXJ0VFNNb2R1bGVEZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VFNNb2R1bGVCbG9jayA9IGFzc2VydFRTTW9kdWxlQmxvY2s7XG5leHBvcnRzLmFzc2VydFRTSW1wb3J0VHlwZSA9IGFzc2VydFRTSW1wb3J0VHlwZTtcbmV4cG9ydHMuYXNzZXJ0VFNJbXBvcnRFcXVhbHNEZWNsYXJhdGlvbiA9IGFzc2VydFRTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydFRTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2UgPSBhc3NlcnRUU0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlO1xuZXhwb3J0cy5hc3NlcnRUU05vbk51bGxFeHByZXNzaW9uID0gYXNzZXJ0VFNOb25OdWxsRXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzZXJ0VFNFeHBvcnRBc3NpZ25tZW50ID0gYXNzZXJ0VFNFeHBvcnRBc3NpZ25tZW50O1xuZXhwb3J0cy5hc3NlcnRUU05hbWVzcGFjZUV4cG9ydERlY2xhcmF0aW9uID0gYXNzZXJ0VFNOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0VFNUeXBlQW5ub3RhdGlvbiA9IGFzc2VydFRTVHlwZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydFRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb24gPSBhc3NlcnRUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uO1xuZXhwb3J0cy5hc3NlcnRUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IGFzc2VydFRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uO1xuZXhwb3J0cy5hc3NlcnRUU1R5cGVQYXJhbWV0ZXIgPSBhc3NlcnRUU1R5cGVQYXJhbWV0ZXI7XG5leHBvcnRzLmFzc2VydEV4cHJlc3Npb24gPSBhc3NlcnRFeHByZXNzaW9uO1xuZXhwb3J0cy5hc3NlcnRCaW5hcnkgPSBhc3NlcnRCaW5hcnk7XG5leHBvcnRzLmFzc2VydFNjb3BhYmxlID0gYXNzZXJ0U2NvcGFibGU7XG5leHBvcnRzLmFzc2VydEJsb2NrUGFyZW50ID0gYXNzZXJ0QmxvY2tQYXJlbnQ7XG5leHBvcnRzLmFzc2VydEJsb2NrID0gYXNzZXJ0QmxvY2s7XG5leHBvcnRzLmFzc2VydFN0YXRlbWVudCA9IGFzc2VydFN0YXRlbWVudDtcbmV4cG9ydHMuYXNzZXJ0VGVybWluYXRvcmxlc3MgPSBhc3NlcnRUZXJtaW5hdG9ybGVzcztcbmV4cG9ydHMuYXNzZXJ0Q29tcGxldGlvblN0YXRlbWVudCA9IGFzc2VydENvbXBsZXRpb25TdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2VydENvbmRpdGlvbmFsID0gYXNzZXJ0Q29uZGl0aW9uYWw7XG5leHBvcnRzLmFzc2VydExvb3AgPSBhc3NlcnRMb29wO1xuZXhwb3J0cy5hc3NlcnRXaGlsZSA9IGFzc2VydFdoaWxlO1xuZXhwb3J0cy5hc3NlcnRFeHByZXNzaW9uV3JhcHBlciA9IGFzc2VydEV4cHJlc3Npb25XcmFwcGVyO1xuZXhwb3J0cy5hc3NlcnRGb3IgPSBhc3NlcnRGb3I7XG5leHBvcnRzLmFzc2VydEZvclhTdGF0ZW1lbnQgPSBhc3NlcnRGb3JYU3RhdGVtZW50O1xuZXhwb3J0cy5hc3NlcnRGdW5jdGlvbiA9IGFzc2VydEZ1bmN0aW9uO1xuZXhwb3J0cy5hc3NlcnRGdW5jdGlvblBhcmVudCA9IGFzc2VydEZ1bmN0aW9uUGFyZW50O1xuZXhwb3J0cy5hc3NlcnRQdXJlaXNoID0gYXNzZXJ0UHVyZWlzaDtcbmV4cG9ydHMuYXNzZXJ0RGVjbGFyYXRpb24gPSBhc3NlcnREZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0UGF0dGVybkxpa2UgPSBhc3NlcnRQYXR0ZXJuTGlrZTtcbmV4cG9ydHMuYXNzZXJ0TFZhbCA9IGFzc2VydExWYWw7XG5leHBvcnRzLmFzc2VydFRTRW50aXR5TmFtZSA9IGFzc2VydFRTRW50aXR5TmFtZTtcbmV4cG9ydHMuYXNzZXJ0TGl0ZXJhbCA9IGFzc2VydExpdGVyYWw7XG5leHBvcnRzLmFzc2VydEltbXV0YWJsZSA9IGFzc2VydEltbXV0YWJsZTtcbmV4cG9ydHMuYXNzZXJ0VXNlcldoaXRlc3BhY2FibGUgPSBhc3NlcnRVc2VyV2hpdGVzcGFjYWJsZTtcbmV4cG9ydHMuYXNzZXJ0TWV0aG9kID0gYXNzZXJ0TWV0aG9kO1xuZXhwb3J0cy5hc3NlcnRPYmplY3RNZW1iZXIgPSBhc3NlcnRPYmplY3RNZW1iZXI7XG5leHBvcnRzLmFzc2VydFByb3BlcnR5ID0gYXNzZXJ0UHJvcGVydHk7XG5leHBvcnRzLmFzc2VydFVuYXJ5TGlrZSA9IGFzc2VydFVuYXJ5TGlrZTtcbmV4cG9ydHMuYXNzZXJ0UGF0dGVybiA9IGFzc2VydFBhdHRlcm47XG5leHBvcnRzLmFzc2VydENsYXNzID0gYXNzZXJ0Q2xhc3M7XG5leHBvcnRzLmFzc2VydE1vZHVsZURlY2xhcmF0aW9uID0gYXNzZXJ0TW9kdWxlRGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydEV4cG9ydERlY2xhcmF0aW9uID0gYXNzZXJ0RXhwb3J0RGVjbGFyYXRpb247XG5leHBvcnRzLmFzc2VydE1vZHVsZVNwZWNpZmllciA9IGFzc2VydE1vZHVsZVNwZWNpZmllcjtcbmV4cG9ydHMuYXNzZXJ0UHJpdmF0ZSA9IGFzc2VydFByaXZhdGU7XG5leHBvcnRzLmFzc2VydEZsb3cgPSBhc3NlcnRGbG93O1xuZXhwb3J0cy5hc3NlcnRGbG93VHlwZSA9IGFzc2VydEZsb3dUeXBlO1xuZXhwb3J0cy5hc3NlcnRGbG93QmFzZUFubm90YXRpb24gPSBhc3NlcnRGbG93QmFzZUFubm90YXRpb247XG5leHBvcnRzLmFzc2VydEZsb3dEZWNsYXJhdGlvbiA9IGFzc2VydEZsb3dEZWNsYXJhdGlvbjtcbmV4cG9ydHMuYXNzZXJ0Rmxvd1ByZWRpY2F0ZSA9IGFzc2VydEZsb3dQcmVkaWNhdGU7XG5leHBvcnRzLmFzc2VydEVudW1Cb2R5ID0gYXNzZXJ0RW51bUJvZHk7XG5leHBvcnRzLmFzc2VydEVudW1NZW1iZXIgPSBhc3NlcnRFbnVtTWVtYmVyO1xuZXhwb3J0cy5hc3NlcnRKU1ggPSBhc3NlcnRKU1g7XG5leHBvcnRzLmFzc2VydFRTVHlwZUVsZW1lbnQgPSBhc3NlcnRUU1R5cGVFbGVtZW50O1xuZXhwb3J0cy5hc3NlcnRUU1R5cGUgPSBhc3NlcnRUU1R5cGU7XG5leHBvcnRzLmFzc2VydFRTQmFzZVR5cGUgPSBhc3NlcnRUU0Jhc2VUeXBlO1xuZXhwb3J0cy5hc3NlcnROdW1iZXJMaXRlcmFsID0gYXNzZXJ0TnVtYmVyTGl0ZXJhbDtcbmV4cG9ydHMuYXNzZXJ0UmVnZXhMaXRlcmFsID0gYXNzZXJ0UmVnZXhMaXRlcmFsO1xuZXhwb3J0cy5hc3NlcnRSZXN0UHJvcGVydHkgPSBhc3NlcnRSZXN0UHJvcGVydHk7XG5leHBvcnRzLmFzc2VydFNwcmVhZFByb3BlcnR5ID0gYXNzZXJ0U3ByZWFkUHJvcGVydHk7XG5cbnZhciBfaXMgPSByZXF1aXJlKFwiLi4vLi4vdmFsaWRhdG9ycy9pc1wiKTtcblxuZnVuY3Rpb24gYXNzZXJ0KHR5cGUsIG5vZGUsIG9wdHMpIHtcbiAgaWYgKCEoMCwgX2lzLmRlZmF1bHQpKHR5cGUsIG5vZGUsIG9wdHMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB0eXBlIFwiJHt0eXBlfVwiIHdpdGggb3B0aW9uICR7SlNPTi5zdHJpbmdpZnkob3B0cyl9LCBgICsgYGJ1dCBpbnN0ZWFkIGdvdCBcIiR7bm9kZS50eXBlfVwiLmApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFycmF5RXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkFycmF5RXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXNzaWdubWVudEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QmluYXJ5RXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkJpbmFyeUV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEludGVycHJldGVyRGlyZWN0aXZlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSW50ZXJwcmV0ZXJEaXJlY3RpdmVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydERpcmVjdGl2ZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRpcmVjdGl2ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGlyZWN0aXZlTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRpcmVjdGl2ZUxpdGVyYWxcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEJsb2NrU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQmxvY2tTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEJyZWFrU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQnJlYWtTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydENhbGxFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQ2FsbEV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydENhdGNoQ2xhdXNlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQ2F0Y2hDbGF1c2VcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydENvbmRpdGlvbmFsRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q29udGludWVTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDb250aW51ZVN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGVidWdnZXJTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEZWJ1Z2dlclN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RG9XaGlsZVN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRvV2hpbGVTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEVtcHR5U3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRW1wdHlTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHByZXNzaW9uU3RhdGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRGaWxlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRmlsZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Rm9ySW5TdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJGb3JJblN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Rm9yU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRm9yU3RhdGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRGdW5jdGlvbkRlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RnVuY3Rpb25FeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRnVuY3Rpb25FeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJZGVudGlmaWVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSWRlbnRpZmllclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SWZTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJJZlN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TGFiZWxlZFN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkxhYmVsZWRTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFN0cmluZ0xpdGVyYWwobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTdHJpbmdMaXRlcmFsXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnROdW1lcmljTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk51bWVyaWNMaXRlcmFsXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnROdWxsTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk51bGxMaXRlcmFsXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRCb29sZWFuTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkJvb2xlYW5MaXRlcmFsXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWdFeHBMaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUmVnRXhwTGl0ZXJhbFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TG9naWNhbEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJMb2dpY2FsRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TWVtYmVyRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk1lbWJlckV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE5ld0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJOZXdFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRQcm9ncmFtKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUHJvZ3JhbVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0RXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9iamVjdEV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdE1ldGhvZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9iamVjdE1ldGhvZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0UHJvcGVydHkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJPYmplY3RQcm9wZXJ0eVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVzdEVsZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJSZXN0RWxlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmV0dXJuU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUmV0dXJuU3RhdGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRTZXF1ZW5jZUV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFN3aXRjaENhc2Uobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTd2l0Y2hDYXNlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRTd2l0Y2hTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTd2l0Y2hTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRoaXNFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVGhpc0V4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRocm93U3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVGhyb3dTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRyeVN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRyeVN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VW5hcnlFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVW5hcnlFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRVcGRhdGVFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVXBkYXRlRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VmFyaWFibGVEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlZhcmlhYmxlRGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFZhcmlhYmxlRGVjbGFyYXRvcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlZhcmlhYmxlRGVjbGFyYXRvclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0V2hpbGVTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJXaGlsZVN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0V2l0aFN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIldpdGhTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFzc2lnbm1lbnRQYXR0ZXJuKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQXNzaWdubWVudFBhdHRlcm5cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFycmF5UGF0dGVybihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkFycmF5UGF0dGVyblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXJyb3dGdW5jdGlvbkV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q2xhc3NCb2R5KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQ2xhc3NCb2R5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDbGFzc0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDbGFzc0V4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydENsYXNzRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDbGFzc0RlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFeHBvcnRBbGxEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEV4cG9ydE5hbWVkRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFeHBvcnRTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHBvcnRTcGVjaWZpZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZvck9mU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRm9yT2ZTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEltcG9ydERlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSW1wb3J0RGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEltcG9ydERlZmF1bHRTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJJbXBvcnREZWZhdWx0U3BlY2lmaWVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEltcG9ydFNwZWNpZmllcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkltcG9ydFNwZWNpZmllclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TWV0YVByb3BlcnR5KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiTWV0YVByb3BlcnR5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDbGFzc01ldGhvZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkNsYXNzTWV0aG9kXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RQYXR0ZXJuKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiT2JqZWN0UGF0dGVyblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0U3ByZWFkRWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlNwcmVhZEVsZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFN1cGVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiU3VwZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VGVtcGxhdGVFbGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVGVtcGxhdGVFbGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUZW1wbGF0ZUxpdGVyYWwobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUZW1wbGF0ZUxpdGVyYWxcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFlpZWxkRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIllpZWxkRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXdhaXRFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQXdhaXRFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJbXBvcnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJJbXBvcnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEJpZ0ludExpdGVyYWwobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJCaWdJbnRMaXRlcmFsXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9uYWxDYWxsRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9wdGlvbmFsQ2FsbEV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydENsYXNzUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDbGFzc1Byb3BlcnR5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDbGFzc1ByaXZhdGVQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkNsYXNzUHJpdmF0ZVByb3BlcnR5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDbGFzc1ByaXZhdGVNZXRob2Qobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDbGFzc1ByaXZhdGVNZXRob2RcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFByaXZhdGVOYW1lKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUHJpdmF0ZU5hbWVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFueVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQW55VHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFycmF5VHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJBcnJheVR5cGVBbm5vdGF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRCb29sZWFuVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJCb29sZWFuVHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEJvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJCb29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnROdWxsTGl0ZXJhbFR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiTnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q2xhc3NJbXBsZW1lbnRzKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQ2xhc3NJbXBsZW1lbnRzXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREZWNsYXJlQ2xhc3Mobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEZWNsYXJlQ2xhc3NcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydERlY2xhcmVGdW5jdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRlY2xhcmVGdW5jdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGVjbGFyZUludGVyZmFjZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRlY2xhcmVJbnRlcmZhY2VcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydERlY2xhcmVNb2R1bGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEZWNsYXJlTW9kdWxlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREZWNsYXJlTW9kdWxlRXhwb3J0cyhub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREZWNsYXJlVHlwZUFsaWFzKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRGVjbGFyZVR5cGVBbGlhc1wiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGVjbGFyZU9wYXF1ZVR5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEZWNsYXJlT3BhcXVlVHlwZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGVjbGFyZVZhcmlhYmxlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRGVjbGFyZVZhcmlhYmxlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREZWNsYXJlRXhwb3J0RGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydERlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGVjbGFyZWRQcmVkaWNhdGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEZWNsYXJlZFByZWRpY2F0ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RXhpc3RzVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeGlzdHNUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RnVuY3Rpb25UeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkZ1bmN0aW9uVHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZ1bmN0aW9uVHlwZVBhcmFtKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRnVuY3Rpb25UeXBlUGFyYW1cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEdlbmVyaWNUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkdlbmVyaWNUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SW5mZXJyZWRQcmVkaWNhdGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJJbmZlcnJlZFByZWRpY2F0ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SW50ZXJmYWNlRXh0ZW5kcyhub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkludGVyZmFjZUV4dGVuZHNcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEludGVyZmFjZURlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSW50ZXJmYWNlRGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEludGVyZmFjZVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSW50ZXJmYWNlVHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE1peGVkVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJNaXhlZFR5cGVBbm5vdGF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFbXB0eVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRW1wdHlUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TnVsbGFibGVUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk51bGxhYmxlVHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE51bWJlckxpdGVyYWxUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk51bWJlckxpdGVyYWxUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TnVtYmVyVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJOdW1iZXJUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJPYmplY3RUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZUludGVybmFsU2xvdChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9iamVjdFR5cGVJbnRlcm5hbFNsb3RcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGVDYWxsUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJPYmplY3RUeXBlQ2FsbFByb3BlcnR5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlSW5kZXhlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9iamVjdFR5cGVJbmRleGVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJPYmplY3RUeXBlUHJvcGVydHlcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T3BhcXVlVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9wYXF1ZVR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFF1YWxpZmllZFR5cGVJZGVudGlmaWVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUXVhbGlmaWVkVHlwZUlkZW50aWZpZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFN0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlN0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0U3RyaW5nVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTdHJpbmdUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0U3ltYm9sVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTeW1ib2xUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VGhpc1R5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVGhpc1R5cGVBbm5vdGF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUdXBsZVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVHVwbGVUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VHlwZW9mVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUeXBlb2ZUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VHlwZUFsaWFzKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVHlwZUFsaWFzXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlR5cGVBbm5vdGF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUeXBlQ2FzdEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUeXBlQ2FzdEV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGVQYXJhbWV0ZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUeXBlUGFyYW1ldGVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFVuaW9uVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJVbmlvblR5cGVBbm5vdGF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRWYXJpYW5jZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlZhcmlhbmNlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRWb2lkVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJWb2lkVHlwZUFubm90YXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEVudW1EZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1EZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RW51bUJvb2xlYW5Cb2R5KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRW51bUJvb2xlYW5Cb2R5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFbnVtTnVtYmVyQm9keShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1OdW1iZXJCb2R5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFbnVtU3RyaW5nQm9keShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1TdHJpbmdCb2R5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFbnVtU3ltYm9sQm9keShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1TeW1ib2xCb2R5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFbnVtQm9vbGVhbk1lbWJlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1Cb29sZWFuTWVtYmVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFbnVtTnVtYmVyTWVtYmVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRW51bU51bWJlck1lbWJlclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RW51bVN0cmluZ01lbWJlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1TdHJpbmdNZW1iZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEVudW1EZWZhdWx0ZWRNZW1iZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFbnVtRGVmYXVsdGVkTWVtYmVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJbmRleGVkQWNjZXNzVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkluZGV4ZWRBY2Nlc3NUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25hbEluZGV4ZWRBY2Nlc3NUeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiT3B0aW9uYWxJbmRleGVkQWNjZXNzVHlwZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SlNYQXR0cmlidXRlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSlNYQXR0cmlidXRlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hDbG9zaW5nRWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWENsb3NpbmdFbGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hFbGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSlNYRWxlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SlNYRW1wdHlFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSlNYRW1wdHlFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hFeHByZXNzaW9uQ29udGFpbmVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SlNYU3ByZWFkQ2hpbGQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJKU1hTcHJlYWRDaGlsZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SlNYSWRlbnRpZmllcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWElkZW50aWZpZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEpTWE1lbWJlckV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJKU1hNZW1iZXJFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hOYW1lc3BhY2VkTmFtZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWE5hbWVzcGFjZWROYW1lXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hPcGVuaW5nRWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWE9wZW5pbmdFbGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hTcHJlYWRBdHRyaWJ1dGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJKU1hTcHJlYWRBdHRyaWJ1dGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEpTWFRleHQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJKU1hUZXh0XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hGcmFnbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWEZyYWdtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRKU1hPcGVuaW5nRnJhZ21lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJKU1hPcGVuaW5nRnJhZ21lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEpTWENsb3NpbmdGcmFnbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWENsb3NpbmdGcmFnbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Tm9vcChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk5vb3BcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFBsYWNlaG9sZGVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUGxhY2Vob2xkZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFY4SW50cmluc2ljSWRlbnRpZmllcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlY4SW50cmluc2ljSWRlbnRpZmllclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXJndW1lbnRQbGFjZWhvbGRlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkFyZ3VtZW50UGxhY2Vob2xkZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEJpbmRFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQmluZEV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEltcG9ydEF0dHJpYnV0ZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkltcG9ydEF0dHJpYnV0ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RGVjb3JhdG9yKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRGVjb3JhdG9yXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREb0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJEb0V4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEV4cG9ydERlZmF1bHRTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHBvcnREZWZhdWx0U3BlY2lmaWVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWNvcmRFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUmVjb3JkRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VHVwbGVFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVHVwbGVFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREZWNpbWFsTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRlY2ltYWxMaXRlcmFsXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRTdGF0aWNCbG9jayhub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlN0YXRpY0Jsb2NrXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRNb2R1bGVFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiTW9kdWxlRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VG9waWNSZWZlcmVuY2Uobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUb3BpY1JlZmVyZW5jZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UGlwZWxpbmVUb3BpY0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJQaXBlbGluZVRvcGljRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UGlwZWxpbmVCYXJlRnVuY3Rpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJQaXBlbGluZUJhcmVGdW5jdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UGlwZWxpbmVQcmltYXJ5VG9waWNSZWZlcmVuY2Uobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJQaXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNQYXJhbWV0ZXJQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTUGFyYW1ldGVyUHJvcGVydHlcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTRGVjbGFyZUZ1bmN0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNEZWNsYXJlRnVuY3Rpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTRGVjbGFyZU1ldGhvZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTRGVjbGFyZU1ldGhvZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNRdWFsaWZpZWROYW1lKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNRdWFsaWZpZWROYW1lXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0NvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNQcm9wZXJ0eVNpZ25hdHVyZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTUHJvcGVydHlTaWduYXR1cmVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTTWV0aG9kU2lnbmF0dXJlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNNZXRob2RTaWduYXR1cmVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTSW5kZXhTaWduYXR1cmUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0luZGV4U2lnbmF0dXJlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0FueUtleXdvcmQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0FueUtleXdvcmRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTQm9vbGVhbktleXdvcmQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0Jvb2xlYW5LZXl3b3JkXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0JpZ0ludEtleXdvcmQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0JpZ0ludEtleXdvcmRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTSW50cmluc2ljS2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTSW50cmluc2ljS2V5d29yZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNOZXZlcktleXdvcmQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU05ldmVyS2V5d29yZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNOdWxsS2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTTnVsbEtleXdvcmRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTTnVtYmVyS2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTTnVtYmVyS2V5d29yZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNPYmplY3RLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNPYmplY3RLZXl3b3JkXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU1N0cmluZ0tleXdvcmQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU1N0cmluZ0tleXdvcmRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTU3ltYm9sS2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTU3ltYm9sS2V5d29yZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNVbmRlZmluZWRLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNVbmRlZmluZWRLZXl3b3JkXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU1Vua25vd25LZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNVbmtub3duS2V5d29yZFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNWb2lkS2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVm9pZEtleXdvcmRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVGhpc1R5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU1RoaXNUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0Z1bmN0aW9uVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTRnVuY3Rpb25UeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0NvbnN0cnVjdG9yVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTQ29uc3RydWN0b3JUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU1R5cGVSZWZlcmVuY2Uobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU1R5cGVSZWZlcmVuY2VcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVHlwZVByZWRpY2F0ZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVHlwZVByZWRpY2F0ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNUeXBlUXVlcnkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU1R5cGVRdWVyeVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNUeXBlTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVHlwZUxpdGVyYWxcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTQXJyYXlUeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNBcnJheVR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVHVwbGVUeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNUdXBsZVR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTT3B0aW9uYWxUeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNPcHRpb25hbFR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTUmVzdFR5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU1Jlc3RUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU05hbWVkVHVwbGVNZW1iZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU05hbWVkVHVwbGVNZW1iZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVW5pb25UeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNVbmlvblR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTSW50ZXJzZWN0aW9uVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTSW50ZXJzZWN0aW9uVHlwZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNDb25kaXRpb25hbFR5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0NvbmRpdGlvbmFsVHlwZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNJbmZlclR5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0luZmVyVHlwZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNQYXJlbnRoZXNpemVkVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTUGFyZW50aGVzaXplZFR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVHlwZU9wZXJhdG9yKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNUeXBlT3BlcmF0b3JcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTSW5kZXhlZEFjY2Vzc1R5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0luZGV4ZWRBY2Nlc3NUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU01hcHBlZFR5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU01hcHBlZFR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTTGl0ZXJhbFR5cGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0xpdGVyYWxUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cyhub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0ludGVyZmFjZURlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNJbnRlcmZhY2VCb2R5KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNJbnRlcmZhY2VCb2R5XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU1R5cGVBbGlhc0RlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNUeXBlQWxpYXNEZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNBc0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0FzRXhwcmVzc2lvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNUeXBlQXNzZXJ0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNUeXBlQXNzZXJ0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0VudW1EZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTRW51bURlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0VudW1NZW1iZXIobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0VudW1NZW1iZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTTW9kdWxlRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU01vZHVsZURlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU01vZHVsZUJsb2NrKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNNb2R1bGVCbG9ja1wiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNJbXBvcnRUeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNJbXBvcnRUeXBlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNJbXBvcnRFcXVhbHNEZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2VcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTTm9uTnVsbEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU05vbk51bGxFeHByZXNzaW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU0V4cG9ydEFzc2lnbm1lbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU0V4cG9ydEFzc2lnbm1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJUU05hbWVzcGFjZUV4cG9ydERlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUU1R5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNUeXBlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVHlwZVBhcmFtZXRlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVHlwZVBhcmFtZXRlclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkV4cHJlc3Npb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEJpbmFyeShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkJpbmFyeVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2NvcGFibGUobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJTY29wYWJsZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QmxvY2tQYXJlbnQobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJCbG9ja1BhcmVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QmxvY2sobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJCbG9ja1wiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0U3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiU3RhdGVtZW50XCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRUZXJtaW5hdG9ybGVzcyhub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRlcm1pbmF0b3JsZXNzXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDb21wbGV0aW9uU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiQ29tcGxldGlvblN0YXRlbWVudFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q29uZGl0aW9uYWwobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDb25kaXRpb25hbFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TG9vcChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkxvb3BcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFdoaWxlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiV2hpbGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEV4cHJlc3Npb25XcmFwcGVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRXhwcmVzc2lvbldyYXBwZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZvcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkZvclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Rm9yWFN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkZvclhTdGF0ZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZ1bmN0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRnVuY3Rpb25cIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZ1bmN0aW9uUGFyZW50KG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRnVuY3Rpb25QYXJlbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFB1cmVpc2gobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJQdXJlaXNoXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnREZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkRlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRQYXR0ZXJuTGlrZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlBhdHRlcm5MaWtlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRMVmFsKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiTFZhbFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNFbnRpdHlOYW1lKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVFNFbnRpdHlOYW1lXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRMaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiTGl0ZXJhbFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SW1tdXRhYmxlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiSW1tdXRhYmxlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRVc2VyV2hpdGVzcGFjYWJsZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlVzZXJXaGl0ZXNwYWNhYmxlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRNZXRob2Qobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJNZXRob2RcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdE1lbWJlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIk9iamVjdE1lbWJlclwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UHJvcGVydHkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJQcm9wZXJ0eVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VW5hcnlMaWtlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiVW5hcnlMaWtlXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRQYXR0ZXJuKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUGF0dGVyblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q2xhc3Mobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJDbGFzc1wiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TW9kdWxlRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJNb2R1bGVEZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RXhwb3J0RGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFeHBvcnREZWNsYXJhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TW9kdWxlU3BlY2lmaWVyKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiTW9kdWxlU3BlY2lmaWVyXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRQcml2YXRlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiUHJpdmF0ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Rmxvdyhub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkZsb3dcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZsb3dUeXBlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRmxvd1R5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEZsb3dCYXNlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkZsb3dCYXNlQW5ub3RhdGlvblwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Rmxvd0RlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRmxvd0RlY2xhcmF0aW9uXCIsIG5vZGUsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRGbG93UHJlZGljYXRlKG5vZGUsIG9wdHMpIHtcbiAgYXNzZXJ0KFwiRmxvd1ByZWRpY2F0ZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RW51bUJvZHkobm9kZSwgb3B0cykge1xuICBhc3NlcnQoXCJFbnVtQm9keVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RW51bU1lbWJlcihub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkVudW1NZW1iZXJcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEpTWChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIkpTWFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNUeXBlRWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVHlwZUVsZW1lbnRcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFRTVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTVHlwZVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VFNCYXNlVHlwZShub2RlLCBvcHRzKSB7XG4gIGFzc2VydChcIlRTQmFzZVR5cGVcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE51bWJlckxpdGVyYWwobm9kZSwgb3B0cykge1xuICBjb25zb2xlLnRyYWNlKFwiVGhlIG5vZGUgdHlwZSBOdW1iZXJMaXRlcmFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gTnVtZXJpY0xpdGVyYWxcIik7XG4gIGFzc2VydChcIk51bWJlckxpdGVyYWxcIiwgbm9kZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZ2V4TGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGNvbnNvbGUudHJhY2UoXCJUaGUgbm9kZSB0eXBlIFJlZ2V4TGl0ZXJhbCBoYXMgYmVlbiByZW5hbWVkIHRvIFJlZ0V4cExpdGVyYWxcIik7XG4gIGFzc2VydChcIlJlZ2V4TGl0ZXJhbFwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVzdFByb3BlcnR5KG5vZGUsIG9wdHMpIHtcbiAgY29uc29sZS50cmFjZShcIlRoZSBub2RlIHR5cGUgUmVzdFByb3BlcnR5IGhhcyBiZWVuIHJlbmFtZWQgdG8gUmVzdEVsZW1lbnRcIik7XG4gIGFzc2VydChcIlJlc3RQcm9wZXJ0eVwiLCBub2RlLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0U3ByZWFkUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBjb25zb2xlLnRyYWNlKFwiVGhlIG5vZGUgdHlwZSBTcHJlYWRQcm9wZXJ0eSBoYXMgYmVlbiByZW5hbWVkIHRvIFNwcmVhZEVsZW1lbnRcIik7XG4gIGFzc2VydChcIlNwcmVhZFByb3BlcnR5XCIsIG5vZGUsIG9wdHMpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYnVpbGRlcjtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxudmFyIF92YWxpZGF0ZSA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL3ZhbGlkYXRlXCIpO1xuXG5mdW5jdGlvbiBidWlsZGVyKHR5cGUsIC4uLmFyZ3MpIHtcbiAgY29uc3Qga2V5cyA9IF9kZWZpbml0aW9ucy5CVUlMREVSX0tFWVNbdHlwZV07XG4gIGNvbnN0IGNvdW50QXJncyA9IGFyZ3MubGVuZ3RoO1xuXG4gIGlmIChjb3VudEFyZ3MgPiBrZXlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHt0eXBlfTogVG9vIG1hbnkgYXJndW1lbnRzIHBhc3NlZC4gUmVjZWl2ZWQgJHtjb3VudEFyZ3N9IGJ1dCBjYW4gcmVjZWl2ZSBubyBtb3JlIHRoYW4gJHtrZXlzLmxlbmd0aH1gKTtcbiAgfVxuXG4gIGNvbnN0IG5vZGUgPSB7XG4gICAgdHlwZVxuICB9O1xuICBsZXQgaSA9IDA7XG4gIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IGZpZWxkID0gX2RlZmluaXRpb25zLk5PREVfRklFTERTW3R5cGVdW2tleV07XG4gICAgbGV0IGFyZztcbiAgICBpZiAoaSA8IGNvdW50QXJncykgYXJnID0gYXJnc1tpXTtcblxuICAgIGlmIChhcmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYXJnID0gQXJyYXkuaXNBcnJheShmaWVsZC5kZWZhdWx0KSA/IFtdIDogZmllbGQuZGVmYXVsdDtcbiAgICB9XG5cbiAgICBub2RlW2tleV0gPSBhcmc7XG4gICAgaSsrO1xuICB9KTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhub2RlKSkge1xuICAgICgwLCBfdmFsaWRhdGUuZGVmYXVsdCkobm9kZSwga2V5LCBub2RlW2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVGbG93VW5pb25UeXBlO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi9nZW5lcmF0ZWRcIik7XG5cbnZhciBfcmVtb3ZlVHlwZUR1cGxpY2F0ZXMgPSByZXF1aXJlKFwiLi4vLi4vbW9kaWZpY2F0aW9ucy9mbG93L3JlbW92ZVR5cGVEdXBsaWNhdGVzXCIpO1xuXG5mdW5jdGlvbiBjcmVhdGVGbG93VW5pb25UeXBlKHR5cGVzKSB7XG4gIGNvbnN0IGZsYXR0ZW5lZCA9ICgwLCBfcmVtb3ZlVHlwZUR1cGxpY2F0ZXMuZGVmYXVsdCkodHlwZXMpO1xuXG4gIGlmIChmbGF0dGVuZWQubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZsYXR0ZW5lZFswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQudW5pb25UeXBlQW5ub3RhdGlvbikoZmxhdHRlbmVkKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi9nZW5lcmF0ZWRcIik7XG5cbmZ1bmN0aW9uIGNyZWF0ZVR5cGVBbm5vdGF0aW9uQmFzZWRPblR5cGVvZih0eXBlKSB7XG4gIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLnN0cmluZ1R5cGVBbm5vdGF0aW9uKSgpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQubnVtYmVyVHlwZUFubm90YXRpb24pKCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiAoMCwgX2dlbmVyYXRlZC52b2lkVHlwZUFubm90YXRpb24pKCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQuYm9vbGVhblR5cGVBbm5vdGF0aW9uKSgpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiAoMCwgX2dlbmVyYXRlZC5nZW5lcmljVHlwZUFubm90YXRpb24pKCgwLCBfZ2VuZXJhdGVkLmlkZW50aWZpZXIpKFwiRnVuY3Rpb25cIikpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQuZ2VuZXJpY1R5cGVBbm5vdGF0aW9uKSgoMCwgX2dlbmVyYXRlZC5pZGVudGlmaWVyKShcIk9iamVjdFwiKSk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJzeW1ib2xcIikge1xuICAgIHJldHVybiAoMCwgX2dlbmVyYXRlZC5nZW5lcmljVHlwZUFubm90YXRpb24pKCgwLCBfZ2VuZXJhdGVkLmlkZW50aWZpZXIpKFwiU3ltYm9sXCIpKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImJpZ2ludFwiKSB7XG4gICAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLmFueVR5cGVBbm5vdGF0aW9uKSgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdHlwZW9mIHZhbHVlOiBcIiArIHR5cGUpO1xuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFycmF5RXhwcmVzc2lvbiA9IGFycmF5RXhwcmVzc2lvbjtcbmV4cG9ydHMuYXNzaWdubWVudEV4cHJlc3Npb24gPSBhc3NpZ25tZW50RXhwcmVzc2lvbjtcbmV4cG9ydHMuYmluYXJ5RXhwcmVzc2lvbiA9IGJpbmFyeUV4cHJlc3Npb247XG5leHBvcnRzLmludGVycHJldGVyRGlyZWN0aXZlID0gaW50ZXJwcmV0ZXJEaXJlY3RpdmU7XG5leHBvcnRzLmRpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbmV4cG9ydHMuZGlyZWN0aXZlTGl0ZXJhbCA9IGRpcmVjdGl2ZUxpdGVyYWw7XG5leHBvcnRzLmJsb2NrU3RhdGVtZW50ID0gYmxvY2tTdGF0ZW1lbnQ7XG5leHBvcnRzLmJyZWFrU3RhdGVtZW50ID0gYnJlYWtTdGF0ZW1lbnQ7XG5leHBvcnRzLmNhbGxFeHByZXNzaW9uID0gY2FsbEV4cHJlc3Npb247XG5leHBvcnRzLmNhdGNoQ2xhdXNlID0gY2F0Y2hDbGF1c2U7XG5leHBvcnRzLmNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IGNvbmRpdGlvbmFsRXhwcmVzc2lvbjtcbmV4cG9ydHMuY29udGludWVTdGF0ZW1lbnQgPSBjb250aW51ZVN0YXRlbWVudDtcbmV4cG9ydHMuZGVidWdnZXJTdGF0ZW1lbnQgPSBkZWJ1Z2dlclN0YXRlbWVudDtcbmV4cG9ydHMuZG9XaGlsZVN0YXRlbWVudCA9IGRvV2hpbGVTdGF0ZW1lbnQ7XG5leHBvcnRzLmVtcHR5U3RhdGVtZW50ID0gZW1wdHlTdGF0ZW1lbnQ7XG5leHBvcnRzLmV4cHJlc3Npb25TdGF0ZW1lbnQgPSBleHByZXNzaW9uU3RhdGVtZW50O1xuZXhwb3J0cy5maWxlID0gZmlsZTtcbmV4cG9ydHMuZm9ySW5TdGF0ZW1lbnQgPSBmb3JJblN0YXRlbWVudDtcbmV4cG9ydHMuZm9yU3RhdGVtZW50ID0gZm9yU3RhdGVtZW50O1xuZXhwb3J0cy5mdW5jdGlvbkRlY2xhcmF0aW9uID0gZnVuY3Rpb25EZWNsYXJhdGlvbjtcbmV4cG9ydHMuZnVuY3Rpb25FeHByZXNzaW9uID0gZnVuY3Rpb25FeHByZXNzaW9uO1xuZXhwb3J0cy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbmV4cG9ydHMuaWZTdGF0ZW1lbnQgPSBpZlN0YXRlbWVudDtcbmV4cG9ydHMubGFiZWxlZFN0YXRlbWVudCA9IGxhYmVsZWRTdGF0ZW1lbnQ7XG5leHBvcnRzLnN0cmluZ0xpdGVyYWwgPSBzdHJpbmdMaXRlcmFsO1xuZXhwb3J0cy5udW1lcmljTGl0ZXJhbCA9IG51bWVyaWNMaXRlcmFsO1xuZXhwb3J0cy5udWxsTGl0ZXJhbCA9IG51bGxMaXRlcmFsO1xuZXhwb3J0cy5ib29sZWFuTGl0ZXJhbCA9IGJvb2xlYW5MaXRlcmFsO1xuZXhwb3J0cy5yZWdFeHBMaXRlcmFsID0gcmVnRXhwTGl0ZXJhbDtcbmV4cG9ydHMubG9naWNhbEV4cHJlc3Npb24gPSBsb2dpY2FsRXhwcmVzc2lvbjtcbmV4cG9ydHMubWVtYmVyRXhwcmVzc2lvbiA9IG1lbWJlckV4cHJlc3Npb247XG5leHBvcnRzLm5ld0V4cHJlc3Npb24gPSBuZXdFeHByZXNzaW9uO1xuZXhwb3J0cy5wcm9ncmFtID0gcHJvZ3JhbTtcbmV4cG9ydHMub2JqZWN0RXhwcmVzc2lvbiA9IG9iamVjdEV4cHJlc3Npb247XG5leHBvcnRzLm9iamVjdE1ldGhvZCA9IG9iamVjdE1ldGhvZDtcbmV4cG9ydHMub2JqZWN0UHJvcGVydHkgPSBvYmplY3RQcm9wZXJ0eTtcbmV4cG9ydHMucmVzdEVsZW1lbnQgPSByZXN0RWxlbWVudDtcbmV4cG9ydHMucmV0dXJuU3RhdGVtZW50ID0gcmV0dXJuU3RhdGVtZW50O1xuZXhwb3J0cy5zZXF1ZW5jZUV4cHJlc3Npb24gPSBzZXF1ZW5jZUV4cHJlc3Npb247XG5leHBvcnRzLnBhcmVudGhlc2l6ZWRFeHByZXNzaW9uID0gcGFyZW50aGVzaXplZEV4cHJlc3Npb247XG5leHBvcnRzLnN3aXRjaENhc2UgPSBzd2l0Y2hDYXNlO1xuZXhwb3J0cy5zd2l0Y2hTdGF0ZW1lbnQgPSBzd2l0Y2hTdGF0ZW1lbnQ7XG5leHBvcnRzLnRoaXNFeHByZXNzaW9uID0gdGhpc0V4cHJlc3Npb247XG5leHBvcnRzLnRocm93U3RhdGVtZW50ID0gdGhyb3dTdGF0ZW1lbnQ7XG5leHBvcnRzLnRyeVN0YXRlbWVudCA9IHRyeVN0YXRlbWVudDtcbmV4cG9ydHMudW5hcnlFeHByZXNzaW9uID0gdW5hcnlFeHByZXNzaW9uO1xuZXhwb3J0cy51cGRhdGVFeHByZXNzaW9uID0gdXBkYXRlRXhwcmVzc2lvbjtcbmV4cG9ydHMudmFyaWFibGVEZWNsYXJhdGlvbiA9IHZhcmlhYmxlRGVjbGFyYXRpb247XG5leHBvcnRzLnZhcmlhYmxlRGVjbGFyYXRvciA9IHZhcmlhYmxlRGVjbGFyYXRvcjtcbmV4cG9ydHMud2hpbGVTdGF0ZW1lbnQgPSB3aGlsZVN0YXRlbWVudDtcbmV4cG9ydHMud2l0aFN0YXRlbWVudCA9IHdpdGhTdGF0ZW1lbnQ7XG5leHBvcnRzLmFzc2lnbm1lbnRQYXR0ZXJuID0gYXNzaWdubWVudFBhdHRlcm47XG5leHBvcnRzLmFycmF5UGF0dGVybiA9IGFycmF5UGF0dGVybjtcbmV4cG9ydHMuYXJyb3dGdW5jdGlvbkV4cHJlc3Npb24gPSBhcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjtcbmV4cG9ydHMuY2xhc3NCb2R5ID0gY2xhc3NCb2R5O1xuZXhwb3J0cy5jbGFzc0V4cHJlc3Npb24gPSBjbGFzc0V4cHJlc3Npb247XG5leHBvcnRzLmNsYXNzRGVjbGFyYXRpb24gPSBjbGFzc0RlY2xhcmF0aW9uO1xuZXhwb3J0cy5leHBvcnRBbGxEZWNsYXJhdGlvbiA9IGV4cG9ydEFsbERlY2xhcmF0aW9uO1xuZXhwb3J0cy5leHBvcnREZWZhdWx0RGVjbGFyYXRpb24gPSBleHBvcnREZWZhdWx0RGVjbGFyYXRpb247XG5leHBvcnRzLmV4cG9ydE5hbWVkRGVjbGFyYXRpb24gPSBleHBvcnROYW1lZERlY2xhcmF0aW9uO1xuZXhwb3J0cy5leHBvcnRTcGVjaWZpZXIgPSBleHBvcnRTcGVjaWZpZXI7XG5leHBvcnRzLmZvck9mU3RhdGVtZW50ID0gZm9yT2ZTdGF0ZW1lbnQ7XG5leHBvcnRzLmltcG9ydERlY2xhcmF0aW9uID0gaW1wb3J0RGVjbGFyYXRpb247XG5leHBvcnRzLmltcG9ydERlZmF1bHRTcGVjaWZpZXIgPSBpbXBvcnREZWZhdWx0U3BlY2lmaWVyO1xuZXhwb3J0cy5pbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI7XG5leHBvcnRzLmltcG9ydFNwZWNpZmllciA9IGltcG9ydFNwZWNpZmllcjtcbmV4cG9ydHMubWV0YVByb3BlcnR5ID0gbWV0YVByb3BlcnR5O1xuZXhwb3J0cy5jbGFzc01ldGhvZCA9IGNsYXNzTWV0aG9kO1xuZXhwb3J0cy5vYmplY3RQYXR0ZXJuID0gb2JqZWN0UGF0dGVybjtcbmV4cG9ydHMuc3ByZWFkRWxlbWVudCA9IHNwcmVhZEVsZW1lbnQ7XG5leHBvcnRzLnN1cGVyID0gX3N1cGVyO1xuZXhwb3J0cy50YWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24gPSB0YWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XG5leHBvcnRzLnRlbXBsYXRlRWxlbWVudCA9IHRlbXBsYXRlRWxlbWVudDtcbmV4cG9ydHMudGVtcGxhdGVMaXRlcmFsID0gdGVtcGxhdGVMaXRlcmFsO1xuZXhwb3J0cy55aWVsZEV4cHJlc3Npb24gPSB5aWVsZEV4cHJlc3Npb247XG5leHBvcnRzLmF3YWl0RXhwcmVzc2lvbiA9IGF3YWl0RXhwcmVzc2lvbjtcbmV4cG9ydHMuaW1wb3J0ID0gX2ltcG9ydDtcbmV4cG9ydHMuYmlnSW50TGl0ZXJhbCA9IGJpZ0ludExpdGVyYWw7XG5leHBvcnRzLmV4cG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IGV4cG9ydE5hbWVzcGFjZVNwZWNpZmllcjtcbmV4cG9ydHMub3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uID0gb3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uO1xuZXhwb3J0cy5vcHRpb25hbENhbGxFeHByZXNzaW9uID0gb3B0aW9uYWxDYWxsRXhwcmVzc2lvbjtcbmV4cG9ydHMuY2xhc3NQcm9wZXJ0eSA9IGNsYXNzUHJvcGVydHk7XG5leHBvcnRzLmNsYXNzUHJpdmF0ZVByb3BlcnR5ID0gY2xhc3NQcml2YXRlUHJvcGVydHk7XG5leHBvcnRzLmNsYXNzUHJpdmF0ZU1ldGhvZCA9IGNsYXNzUHJpdmF0ZU1ldGhvZDtcbmV4cG9ydHMucHJpdmF0ZU5hbWUgPSBwcml2YXRlTmFtZTtcbmV4cG9ydHMuYW55VHlwZUFubm90YXRpb24gPSBhbnlUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYXJyYXlUeXBlQW5ub3RhdGlvbiA9IGFycmF5VHlwZUFubm90YXRpb247XG5leHBvcnRzLmJvb2xlYW5UeXBlQW5ub3RhdGlvbiA9IGJvb2xlYW5UeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYm9vbGVhbkxpdGVyYWxUeXBlQW5ub3RhdGlvbiA9IGJvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb247XG5leHBvcnRzLm51bGxMaXRlcmFsVHlwZUFubm90YXRpb24gPSBudWxsTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5jbGFzc0ltcGxlbWVudHMgPSBjbGFzc0ltcGxlbWVudHM7XG5leHBvcnRzLmRlY2xhcmVDbGFzcyA9IGRlY2xhcmVDbGFzcztcbmV4cG9ydHMuZGVjbGFyZUZ1bmN0aW9uID0gZGVjbGFyZUZ1bmN0aW9uO1xuZXhwb3J0cy5kZWNsYXJlSW50ZXJmYWNlID0gZGVjbGFyZUludGVyZmFjZTtcbmV4cG9ydHMuZGVjbGFyZU1vZHVsZSA9IGRlY2xhcmVNb2R1bGU7XG5leHBvcnRzLmRlY2xhcmVNb2R1bGVFeHBvcnRzID0gZGVjbGFyZU1vZHVsZUV4cG9ydHM7XG5leHBvcnRzLmRlY2xhcmVUeXBlQWxpYXMgPSBkZWNsYXJlVHlwZUFsaWFzO1xuZXhwb3J0cy5kZWNsYXJlT3BhcXVlVHlwZSA9IGRlY2xhcmVPcGFxdWVUeXBlO1xuZXhwb3J0cy5kZWNsYXJlVmFyaWFibGUgPSBkZWNsYXJlVmFyaWFibGU7XG5leHBvcnRzLmRlY2xhcmVFeHBvcnREZWNsYXJhdGlvbiA9IGRlY2xhcmVFeHBvcnREZWNsYXJhdGlvbjtcbmV4cG9ydHMuZGVjbGFyZUV4cG9ydEFsbERlY2xhcmF0aW9uID0gZGVjbGFyZUV4cG9ydEFsbERlY2xhcmF0aW9uO1xuZXhwb3J0cy5kZWNsYXJlZFByZWRpY2F0ZSA9IGRlY2xhcmVkUHJlZGljYXRlO1xuZXhwb3J0cy5leGlzdHNUeXBlQW5ub3RhdGlvbiA9IGV4aXN0c1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5mdW5jdGlvblR5cGVBbm5vdGF0aW9uID0gZnVuY3Rpb25UeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuZnVuY3Rpb25UeXBlUGFyYW0gPSBmdW5jdGlvblR5cGVQYXJhbTtcbmV4cG9ydHMuZ2VuZXJpY1R5cGVBbm5vdGF0aW9uID0gZ2VuZXJpY1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pbmZlcnJlZFByZWRpY2F0ZSA9IGluZmVycmVkUHJlZGljYXRlO1xuZXhwb3J0cy5pbnRlcmZhY2VFeHRlbmRzID0gaW50ZXJmYWNlRXh0ZW5kcztcbmV4cG9ydHMuaW50ZXJmYWNlRGVjbGFyYXRpb24gPSBpbnRlcmZhY2VEZWNsYXJhdGlvbjtcbmV4cG9ydHMuaW50ZXJmYWNlVHlwZUFubm90YXRpb24gPSBpbnRlcmZhY2VUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb24gPSBpbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMubWl4ZWRUeXBlQW5ub3RhdGlvbiA9IG1peGVkVHlwZUFubm90YXRpb247XG5leHBvcnRzLmVtcHR5VHlwZUFubm90YXRpb24gPSBlbXB0eVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5udWxsYWJsZVR5cGVBbm5vdGF0aW9uID0gbnVsbGFibGVUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMubnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gbnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5udW1iZXJUeXBlQW5ub3RhdGlvbiA9IG51bWJlclR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5vYmplY3RUeXBlQW5ub3RhdGlvbiA9IG9iamVjdFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5vYmplY3RUeXBlSW50ZXJuYWxTbG90ID0gb2JqZWN0VHlwZUludGVybmFsU2xvdDtcbmV4cG9ydHMub2JqZWN0VHlwZUNhbGxQcm9wZXJ0eSA9IG9iamVjdFR5cGVDYWxsUHJvcGVydHk7XG5leHBvcnRzLm9iamVjdFR5cGVJbmRleGVyID0gb2JqZWN0VHlwZUluZGV4ZXI7XG5leHBvcnRzLm9iamVjdFR5cGVQcm9wZXJ0eSA9IG9iamVjdFR5cGVQcm9wZXJ0eTtcbmV4cG9ydHMub2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5ID0gb2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5O1xuZXhwb3J0cy5vcGFxdWVUeXBlID0gb3BhcXVlVHlwZTtcbmV4cG9ydHMucXVhbGlmaWVkVHlwZUlkZW50aWZpZXIgPSBxdWFsaWZpZWRUeXBlSWRlbnRpZmllcjtcbmV4cG9ydHMuc3RyaW5nTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gc3RyaW5nTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5zdHJpbmdUeXBlQW5ub3RhdGlvbiA9IHN0cmluZ1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5zeW1ib2xUeXBlQW5ub3RhdGlvbiA9IHN5bWJvbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy50aGlzVHlwZUFubm90YXRpb24gPSB0aGlzVHlwZUFubm90YXRpb247XG5leHBvcnRzLnR1cGxlVHlwZUFubm90YXRpb24gPSB0dXBsZVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy50eXBlb2ZUeXBlQW5ub3RhdGlvbiA9IHR5cGVvZlR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy50eXBlQWxpYXMgPSB0eXBlQWxpYXM7XG5leHBvcnRzLnR5cGVBbm5vdGF0aW9uID0gdHlwZUFubm90YXRpb247XG5leHBvcnRzLnR5cGVDYXN0RXhwcmVzc2lvbiA9IHR5cGVDYXN0RXhwcmVzc2lvbjtcbmV4cG9ydHMudHlwZVBhcmFtZXRlciA9IHR5cGVQYXJhbWV0ZXI7XG5leHBvcnRzLnR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IHR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbjtcbmV4cG9ydHMudHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb24gPSB0eXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbjtcbmV4cG9ydHMudW5pb25UeXBlQW5ub3RhdGlvbiA9IHVuaW9uVHlwZUFubm90YXRpb247XG5leHBvcnRzLnZhcmlhbmNlID0gdmFyaWFuY2U7XG5leHBvcnRzLnZvaWRUeXBlQW5ub3RhdGlvbiA9IHZvaWRUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuZW51bURlY2xhcmF0aW9uID0gZW51bURlY2xhcmF0aW9uO1xuZXhwb3J0cy5lbnVtQm9vbGVhbkJvZHkgPSBlbnVtQm9vbGVhbkJvZHk7XG5leHBvcnRzLmVudW1OdW1iZXJCb2R5ID0gZW51bU51bWJlckJvZHk7XG5leHBvcnRzLmVudW1TdHJpbmdCb2R5ID0gZW51bVN0cmluZ0JvZHk7XG5leHBvcnRzLmVudW1TeW1ib2xCb2R5ID0gZW51bVN5bWJvbEJvZHk7XG5leHBvcnRzLmVudW1Cb29sZWFuTWVtYmVyID0gZW51bUJvb2xlYW5NZW1iZXI7XG5leHBvcnRzLmVudW1OdW1iZXJNZW1iZXIgPSBlbnVtTnVtYmVyTWVtYmVyO1xuZXhwb3J0cy5lbnVtU3RyaW5nTWVtYmVyID0gZW51bVN0cmluZ01lbWJlcjtcbmV4cG9ydHMuZW51bURlZmF1bHRlZE1lbWJlciA9IGVudW1EZWZhdWx0ZWRNZW1iZXI7XG5leHBvcnRzLmluZGV4ZWRBY2Nlc3NUeXBlID0gaW5kZXhlZEFjY2Vzc1R5cGU7XG5leHBvcnRzLm9wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGUgPSBvcHRpb25hbEluZGV4ZWRBY2Nlc3NUeXBlO1xuZXhwb3J0cy5qU1hBdHRyaWJ1dGUgPSBleHBvcnRzLmpzeEF0dHJpYnV0ZSA9IGpzeEF0dHJpYnV0ZTtcbmV4cG9ydHMualNYQ2xvc2luZ0VsZW1lbnQgPSBleHBvcnRzLmpzeENsb3NpbmdFbGVtZW50ID0ganN4Q2xvc2luZ0VsZW1lbnQ7XG5leHBvcnRzLmpTWEVsZW1lbnQgPSBleHBvcnRzLmpzeEVsZW1lbnQgPSBqc3hFbGVtZW50O1xuZXhwb3J0cy5qU1hFbXB0eUV4cHJlc3Npb24gPSBleHBvcnRzLmpzeEVtcHR5RXhwcmVzc2lvbiA9IGpzeEVtcHR5RXhwcmVzc2lvbjtcbmV4cG9ydHMualNYRXhwcmVzc2lvbkNvbnRhaW5lciA9IGV4cG9ydHMuanN4RXhwcmVzc2lvbkNvbnRhaW5lciA9IGpzeEV4cHJlc3Npb25Db250YWluZXI7XG5leHBvcnRzLmpTWFNwcmVhZENoaWxkID0gZXhwb3J0cy5qc3hTcHJlYWRDaGlsZCA9IGpzeFNwcmVhZENoaWxkO1xuZXhwb3J0cy5qU1hJZGVudGlmaWVyID0gZXhwb3J0cy5qc3hJZGVudGlmaWVyID0ganN4SWRlbnRpZmllcjtcbmV4cG9ydHMualNYTWVtYmVyRXhwcmVzc2lvbiA9IGV4cG9ydHMuanN4TWVtYmVyRXhwcmVzc2lvbiA9IGpzeE1lbWJlckV4cHJlc3Npb247XG5leHBvcnRzLmpTWE5hbWVzcGFjZWROYW1lID0gZXhwb3J0cy5qc3hOYW1lc3BhY2VkTmFtZSA9IGpzeE5hbWVzcGFjZWROYW1lO1xuZXhwb3J0cy5qU1hPcGVuaW5nRWxlbWVudCA9IGV4cG9ydHMuanN4T3BlbmluZ0VsZW1lbnQgPSBqc3hPcGVuaW5nRWxlbWVudDtcbmV4cG9ydHMualNYU3ByZWFkQXR0cmlidXRlID0gZXhwb3J0cy5qc3hTcHJlYWRBdHRyaWJ1dGUgPSBqc3hTcHJlYWRBdHRyaWJ1dGU7XG5leHBvcnRzLmpTWFRleHQgPSBleHBvcnRzLmpzeFRleHQgPSBqc3hUZXh0O1xuZXhwb3J0cy5qU1hGcmFnbWVudCA9IGV4cG9ydHMuanN4RnJhZ21lbnQgPSBqc3hGcmFnbWVudDtcbmV4cG9ydHMualNYT3BlbmluZ0ZyYWdtZW50ID0gZXhwb3J0cy5qc3hPcGVuaW5nRnJhZ21lbnQgPSBqc3hPcGVuaW5nRnJhZ21lbnQ7XG5leHBvcnRzLmpTWENsb3NpbmdGcmFnbWVudCA9IGV4cG9ydHMuanN4Q2xvc2luZ0ZyYWdtZW50ID0ganN4Q2xvc2luZ0ZyYWdtZW50O1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbmV4cG9ydHMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbmV4cG9ydHMudjhJbnRyaW5zaWNJZGVudGlmaWVyID0gdjhJbnRyaW5zaWNJZGVudGlmaWVyO1xuZXhwb3J0cy5hcmd1bWVudFBsYWNlaG9sZGVyID0gYXJndW1lbnRQbGFjZWhvbGRlcjtcbmV4cG9ydHMuYmluZEV4cHJlc3Npb24gPSBiaW5kRXhwcmVzc2lvbjtcbmV4cG9ydHMuaW1wb3J0QXR0cmlidXRlID0gaW1wb3J0QXR0cmlidXRlO1xuZXhwb3J0cy5kZWNvcmF0b3IgPSBkZWNvcmF0b3I7XG5leHBvcnRzLmRvRXhwcmVzc2lvbiA9IGRvRXhwcmVzc2lvbjtcbmV4cG9ydHMuZXhwb3J0RGVmYXVsdFNwZWNpZmllciA9IGV4cG9ydERlZmF1bHRTcGVjaWZpZXI7XG5leHBvcnRzLnJlY29yZEV4cHJlc3Npb24gPSByZWNvcmRFeHByZXNzaW9uO1xuZXhwb3J0cy50dXBsZUV4cHJlc3Npb24gPSB0dXBsZUV4cHJlc3Npb247XG5leHBvcnRzLmRlY2ltYWxMaXRlcmFsID0gZGVjaW1hbExpdGVyYWw7XG5leHBvcnRzLnN0YXRpY0Jsb2NrID0gc3RhdGljQmxvY2s7XG5leHBvcnRzLm1vZHVsZUV4cHJlc3Npb24gPSBtb2R1bGVFeHByZXNzaW9uO1xuZXhwb3J0cy50b3BpY1JlZmVyZW5jZSA9IHRvcGljUmVmZXJlbmNlO1xuZXhwb3J0cy5waXBlbGluZVRvcGljRXhwcmVzc2lvbiA9IHBpcGVsaW5lVG9waWNFeHByZXNzaW9uO1xuZXhwb3J0cy5waXBlbGluZUJhcmVGdW5jdGlvbiA9IHBpcGVsaW5lQmFyZUZ1bmN0aW9uO1xuZXhwb3J0cy5waXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZSA9IHBpcGVsaW5lUHJpbWFyeVRvcGljUmVmZXJlbmNlO1xuZXhwb3J0cy50U1BhcmFtZXRlclByb3BlcnR5ID0gZXhwb3J0cy50c1BhcmFtZXRlclByb3BlcnR5ID0gdHNQYXJhbWV0ZXJQcm9wZXJ0eTtcbmV4cG9ydHMudFNEZWNsYXJlRnVuY3Rpb24gPSBleHBvcnRzLnRzRGVjbGFyZUZ1bmN0aW9uID0gdHNEZWNsYXJlRnVuY3Rpb247XG5leHBvcnRzLnRTRGVjbGFyZU1ldGhvZCA9IGV4cG9ydHMudHNEZWNsYXJlTWV0aG9kID0gdHNEZWNsYXJlTWV0aG9kO1xuZXhwb3J0cy50U1F1YWxpZmllZE5hbWUgPSBleHBvcnRzLnRzUXVhbGlmaWVkTmFtZSA9IHRzUXVhbGlmaWVkTmFtZTtcbmV4cG9ydHMudFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb24gPSBleHBvcnRzLnRzQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uID0gdHNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb247XG5leHBvcnRzLnRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb24gPSBleHBvcnRzLnRzQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb24gPSB0c0NvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uO1xuZXhwb3J0cy50U1Byb3BlcnR5U2lnbmF0dXJlID0gZXhwb3J0cy50c1Byb3BlcnR5U2lnbmF0dXJlID0gdHNQcm9wZXJ0eVNpZ25hdHVyZTtcbmV4cG9ydHMudFNNZXRob2RTaWduYXR1cmUgPSBleHBvcnRzLnRzTWV0aG9kU2lnbmF0dXJlID0gdHNNZXRob2RTaWduYXR1cmU7XG5leHBvcnRzLnRTSW5kZXhTaWduYXR1cmUgPSBleHBvcnRzLnRzSW5kZXhTaWduYXR1cmUgPSB0c0luZGV4U2lnbmF0dXJlO1xuZXhwb3J0cy50U0FueUtleXdvcmQgPSBleHBvcnRzLnRzQW55S2V5d29yZCA9IHRzQW55S2V5d29yZDtcbmV4cG9ydHMudFNCb29sZWFuS2V5d29yZCA9IGV4cG9ydHMudHNCb29sZWFuS2V5d29yZCA9IHRzQm9vbGVhbktleXdvcmQ7XG5leHBvcnRzLnRTQmlnSW50S2V5d29yZCA9IGV4cG9ydHMudHNCaWdJbnRLZXl3b3JkID0gdHNCaWdJbnRLZXl3b3JkO1xuZXhwb3J0cy50U0ludHJpbnNpY0tleXdvcmQgPSBleHBvcnRzLnRzSW50cmluc2ljS2V5d29yZCA9IHRzSW50cmluc2ljS2V5d29yZDtcbmV4cG9ydHMudFNOZXZlcktleXdvcmQgPSBleHBvcnRzLnRzTmV2ZXJLZXl3b3JkID0gdHNOZXZlcktleXdvcmQ7XG5leHBvcnRzLnRTTnVsbEtleXdvcmQgPSBleHBvcnRzLnRzTnVsbEtleXdvcmQgPSB0c051bGxLZXl3b3JkO1xuZXhwb3J0cy50U051bWJlcktleXdvcmQgPSBleHBvcnRzLnRzTnVtYmVyS2V5d29yZCA9IHRzTnVtYmVyS2V5d29yZDtcbmV4cG9ydHMudFNPYmplY3RLZXl3b3JkID0gZXhwb3J0cy50c09iamVjdEtleXdvcmQgPSB0c09iamVjdEtleXdvcmQ7XG5leHBvcnRzLnRTU3RyaW5nS2V5d29yZCA9IGV4cG9ydHMudHNTdHJpbmdLZXl3b3JkID0gdHNTdHJpbmdLZXl3b3JkO1xuZXhwb3J0cy50U1N5bWJvbEtleXdvcmQgPSBleHBvcnRzLnRzU3ltYm9sS2V5d29yZCA9IHRzU3ltYm9sS2V5d29yZDtcbmV4cG9ydHMudFNVbmRlZmluZWRLZXl3b3JkID0gZXhwb3J0cy50c1VuZGVmaW5lZEtleXdvcmQgPSB0c1VuZGVmaW5lZEtleXdvcmQ7XG5leHBvcnRzLnRTVW5rbm93bktleXdvcmQgPSBleHBvcnRzLnRzVW5rbm93bktleXdvcmQgPSB0c1Vua25vd25LZXl3b3JkO1xuZXhwb3J0cy50U1ZvaWRLZXl3b3JkID0gZXhwb3J0cy50c1ZvaWRLZXl3b3JkID0gdHNWb2lkS2V5d29yZDtcbmV4cG9ydHMudFNUaGlzVHlwZSA9IGV4cG9ydHMudHNUaGlzVHlwZSA9IHRzVGhpc1R5cGU7XG5leHBvcnRzLnRTRnVuY3Rpb25UeXBlID0gZXhwb3J0cy50c0Z1bmN0aW9uVHlwZSA9IHRzRnVuY3Rpb25UeXBlO1xuZXhwb3J0cy50U0NvbnN0cnVjdG9yVHlwZSA9IGV4cG9ydHMudHNDb25zdHJ1Y3RvclR5cGUgPSB0c0NvbnN0cnVjdG9yVHlwZTtcbmV4cG9ydHMudFNUeXBlUmVmZXJlbmNlID0gZXhwb3J0cy50c1R5cGVSZWZlcmVuY2UgPSB0c1R5cGVSZWZlcmVuY2U7XG5leHBvcnRzLnRTVHlwZVByZWRpY2F0ZSA9IGV4cG9ydHMudHNUeXBlUHJlZGljYXRlID0gdHNUeXBlUHJlZGljYXRlO1xuZXhwb3J0cy50U1R5cGVRdWVyeSA9IGV4cG9ydHMudHNUeXBlUXVlcnkgPSB0c1R5cGVRdWVyeTtcbmV4cG9ydHMudFNUeXBlTGl0ZXJhbCA9IGV4cG9ydHMudHNUeXBlTGl0ZXJhbCA9IHRzVHlwZUxpdGVyYWw7XG5leHBvcnRzLnRTQXJyYXlUeXBlID0gZXhwb3J0cy50c0FycmF5VHlwZSA9IHRzQXJyYXlUeXBlO1xuZXhwb3J0cy50U1R1cGxlVHlwZSA9IGV4cG9ydHMudHNUdXBsZVR5cGUgPSB0c1R1cGxlVHlwZTtcbmV4cG9ydHMudFNPcHRpb25hbFR5cGUgPSBleHBvcnRzLnRzT3B0aW9uYWxUeXBlID0gdHNPcHRpb25hbFR5cGU7XG5leHBvcnRzLnRTUmVzdFR5cGUgPSBleHBvcnRzLnRzUmVzdFR5cGUgPSB0c1Jlc3RUeXBlO1xuZXhwb3J0cy50U05hbWVkVHVwbGVNZW1iZXIgPSBleHBvcnRzLnRzTmFtZWRUdXBsZU1lbWJlciA9IHRzTmFtZWRUdXBsZU1lbWJlcjtcbmV4cG9ydHMudFNVbmlvblR5cGUgPSBleHBvcnRzLnRzVW5pb25UeXBlID0gdHNVbmlvblR5cGU7XG5leHBvcnRzLnRTSW50ZXJzZWN0aW9uVHlwZSA9IGV4cG9ydHMudHNJbnRlcnNlY3Rpb25UeXBlID0gdHNJbnRlcnNlY3Rpb25UeXBlO1xuZXhwb3J0cy50U0NvbmRpdGlvbmFsVHlwZSA9IGV4cG9ydHMudHNDb25kaXRpb25hbFR5cGUgPSB0c0NvbmRpdGlvbmFsVHlwZTtcbmV4cG9ydHMudFNJbmZlclR5cGUgPSBleHBvcnRzLnRzSW5mZXJUeXBlID0gdHNJbmZlclR5cGU7XG5leHBvcnRzLnRTUGFyZW50aGVzaXplZFR5cGUgPSBleHBvcnRzLnRzUGFyZW50aGVzaXplZFR5cGUgPSB0c1BhcmVudGhlc2l6ZWRUeXBlO1xuZXhwb3J0cy50U1R5cGVPcGVyYXRvciA9IGV4cG9ydHMudHNUeXBlT3BlcmF0b3IgPSB0c1R5cGVPcGVyYXRvcjtcbmV4cG9ydHMudFNJbmRleGVkQWNjZXNzVHlwZSA9IGV4cG9ydHMudHNJbmRleGVkQWNjZXNzVHlwZSA9IHRzSW5kZXhlZEFjY2Vzc1R5cGU7XG5leHBvcnRzLnRTTWFwcGVkVHlwZSA9IGV4cG9ydHMudHNNYXBwZWRUeXBlID0gdHNNYXBwZWRUeXBlO1xuZXhwb3J0cy50U0xpdGVyYWxUeXBlID0gZXhwb3J0cy50c0xpdGVyYWxUeXBlID0gdHNMaXRlcmFsVHlwZTtcbmV4cG9ydHMudFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMgPSBleHBvcnRzLnRzRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzID0gdHNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHM7XG5leHBvcnRzLnRTSW50ZXJmYWNlRGVjbGFyYXRpb24gPSBleHBvcnRzLnRzSW50ZXJmYWNlRGVjbGFyYXRpb24gPSB0c0ludGVyZmFjZURlY2xhcmF0aW9uO1xuZXhwb3J0cy50U0ludGVyZmFjZUJvZHkgPSBleHBvcnRzLnRzSW50ZXJmYWNlQm9keSA9IHRzSW50ZXJmYWNlQm9keTtcbmV4cG9ydHMudFNUeXBlQWxpYXNEZWNsYXJhdGlvbiA9IGV4cG9ydHMudHNUeXBlQWxpYXNEZWNsYXJhdGlvbiA9IHRzVHlwZUFsaWFzRGVjbGFyYXRpb247XG5leHBvcnRzLnRTQXNFeHByZXNzaW9uID0gZXhwb3J0cy50c0FzRXhwcmVzc2lvbiA9IHRzQXNFeHByZXNzaW9uO1xuZXhwb3J0cy50U1R5cGVBc3NlcnRpb24gPSBleHBvcnRzLnRzVHlwZUFzc2VydGlvbiA9IHRzVHlwZUFzc2VydGlvbjtcbmV4cG9ydHMudFNFbnVtRGVjbGFyYXRpb24gPSBleHBvcnRzLnRzRW51bURlY2xhcmF0aW9uID0gdHNFbnVtRGVjbGFyYXRpb247XG5leHBvcnRzLnRTRW51bU1lbWJlciA9IGV4cG9ydHMudHNFbnVtTWVtYmVyID0gdHNFbnVtTWVtYmVyO1xuZXhwb3J0cy50U01vZHVsZURlY2xhcmF0aW9uID0gZXhwb3J0cy50c01vZHVsZURlY2xhcmF0aW9uID0gdHNNb2R1bGVEZWNsYXJhdGlvbjtcbmV4cG9ydHMudFNNb2R1bGVCbG9jayA9IGV4cG9ydHMudHNNb2R1bGVCbG9jayA9IHRzTW9kdWxlQmxvY2s7XG5leHBvcnRzLnRTSW1wb3J0VHlwZSA9IGV4cG9ydHMudHNJbXBvcnRUeXBlID0gdHNJbXBvcnRUeXBlO1xuZXhwb3J0cy50U0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uID0gZXhwb3J0cy50c0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uID0gdHNJbXBvcnRFcXVhbHNEZWNsYXJhdGlvbjtcbmV4cG9ydHMudFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZSA9IGV4cG9ydHMudHNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZSA9IHRzRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2U7XG5leHBvcnRzLnRTTm9uTnVsbEV4cHJlc3Npb24gPSBleHBvcnRzLnRzTm9uTnVsbEV4cHJlc3Npb24gPSB0c05vbk51bGxFeHByZXNzaW9uO1xuZXhwb3J0cy50U0V4cG9ydEFzc2lnbm1lbnQgPSBleHBvcnRzLnRzRXhwb3J0QXNzaWdubWVudCA9IHRzRXhwb3J0QXNzaWdubWVudDtcbmV4cG9ydHMudFNOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvbiA9IGV4cG9ydHMudHNOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvbiA9IHRzTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb247XG5leHBvcnRzLnRTVHlwZUFubm90YXRpb24gPSBleHBvcnRzLnRzVHlwZUFubm90YXRpb24gPSB0c1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy50U1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uID0gZXhwb3J0cy50c1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uID0gdHNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbjtcbmV4cG9ydHMudFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24gPSBleHBvcnRzLnRzVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uID0gdHNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb247XG5leHBvcnRzLnRTVHlwZVBhcmFtZXRlciA9IGV4cG9ydHMudHNUeXBlUGFyYW1ldGVyID0gdHNUeXBlUGFyYW1ldGVyO1xuZXhwb3J0cy5udW1iZXJMaXRlcmFsID0gTnVtYmVyTGl0ZXJhbDtcbmV4cG9ydHMucmVnZXhMaXRlcmFsID0gUmVnZXhMaXRlcmFsO1xuZXhwb3J0cy5yZXN0UHJvcGVydHkgPSBSZXN0UHJvcGVydHk7XG5leHBvcnRzLnNwcmVhZFByb3BlcnR5ID0gU3ByZWFkUHJvcGVydHk7XG5cbnZhciBfYnVpbGRlciA9IHJlcXVpcmUoXCIuLi9idWlsZGVyXCIpO1xuXG5mdW5jdGlvbiBhcnJheUV4cHJlc3Npb24oZWxlbWVudHMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkFycmF5RXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25tZW50RXhwcmVzc2lvbihvcGVyYXRvciwgbGVmdCwgcmlnaHQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeUV4cHJlc3Npb24ob3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJCaW5hcnlFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGludGVycHJldGVyRGlyZWN0aXZlKHZhbHVlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJJbnRlcnByZXRlckRpcmVjdGl2ZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RpdmUodmFsdWUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkRpcmVjdGl2ZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RpdmVMaXRlcmFsKHZhbHVlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEaXJlY3RpdmVMaXRlcmFsXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGJsb2NrU3RhdGVtZW50KGJvZHksIGRpcmVjdGl2ZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkJsb2NrU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGJyZWFrU3RhdGVtZW50KGxhYmVsKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJCcmVha1N0YXRlbWVudFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBjYWxsRXhwcmVzc2lvbihjYWxsZWUsIF9hcmd1bWVudHMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkNhbGxFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNhdGNoQ2xhdXNlKHBhcmFtLCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJDYXRjaENsYXVzZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBjb25kaXRpb25hbEV4cHJlc3Npb24odGVzdCwgY29uc2VxdWVudCwgYWx0ZXJuYXRlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gY29udGludWVTdGF0ZW1lbnQobGFiZWwpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkNvbnRpbnVlU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRlYnVnZ2VyU3RhdGVtZW50KCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRGVidWdnZXJTdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZG9XaGlsZVN0YXRlbWVudCh0ZXN0LCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEb1doaWxlU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGVtcHR5U3RhdGVtZW50KCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRW1wdHlTdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZXhwcmVzc2lvblN0YXRlbWVudChleHByZXNzaW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJFeHByZXNzaW9uU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZpbGUocHJvZ3JhbSwgY29tbWVudHMsIHRva2Vucykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRmlsZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBmb3JJblN0YXRlbWVudChsZWZ0LCByaWdodCwgYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRm9ySW5TdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZm9yU3RhdGVtZW50KGluaXQsIHRlc3QsIHVwZGF0ZSwgYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRm9yU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZ1bmN0aW9uRGVjbGFyYXRpb24oaWQsIHBhcmFtcywgYm9keSwgZ2VuZXJhdG9yLCBhc3luYykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBmdW5jdGlvbkV4cHJlc3Npb24oaWQsIHBhcmFtcywgYm9keSwgZ2VuZXJhdG9yLCBhc3luYykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRnVuY3Rpb25FeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGlkZW50aWZpZXIobmFtZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSWRlbnRpZmllclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpZlN0YXRlbWVudCh0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIklmU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGxhYmVsZWRTdGF0ZW1lbnQobGFiZWwsIGJvZHkpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkxhYmVsZWRTdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nTGl0ZXJhbCh2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiU3RyaW5nTGl0ZXJhbFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBudW1lcmljTGl0ZXJhbCh2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiTnVtZXJpY0xpdGVyYWxcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbnVsbExpdGVyYWwoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJOdWxsTGl0ZXJhbFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBib29sZWFuTGl0ZXJhbCh2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQm9vbGVhbkxpdGVyYWxcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcmVnRXhwTGl0ZXJhbChwYXR0ZXJuLCBmbGFncykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiUmVnRXhwTGl0ZXJhbFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBsb2dpY2FsRXhwcmVzc2lvbihvcGVyYXRvciwgbGVmdCwgcmlnaHQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkxvZ2ljYWxFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG1lbWJlckV4cHJlc3Npb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29tcHV0ZWQsIG9wdGlvbmFsKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJNZW1iZXJFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG5ld0V4cHJlc3Npb24oY2FsbGVlLCBfYXJndW1lbnRzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJOZXdFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHByb2dyYW0oYm9keSwgZGlyZWN0aXZlcywgc291cmNlVHlwZSwgaW50ZXJwcmV0ZXIpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlByb2dyYW1cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0RXhwcmVzc2lvbihwcm9wZXJ0aWVzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPYmplY3RFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG9iamVjdE1ldGhvZChraW5kLCBrZXksIHBhcmFtcywgYm9keSwgY29tcHV0ZWQsIGdlbmVyYXRvciwgYXN5bmMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk9iamVjdE1ldGhvZFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RQcm9wZXJ0eShrZXksIHZhbHVlLCBjb21wdXRlZCwgc2hvcnRoYW5kLCBkZWNvcmF0b3JzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPYmplY3RQcm9wZXJ0eVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiByZXN0RWxlbWVudChhcmd1bWVudCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiUmVzdEVsZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuU3RhdGVtZW50KGFyZ3VtZW50KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJSZXR1cm5TdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVuY2VFeHByZXNzaW9uKGV4cHJlc3Npb25zKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50aGVzaXplZEV4cHJlc3Npb24oZXhwcmVzc2lvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc3dpdGNoQ2FzZSh0ZXN0LCBjb25zZXF1ZW50KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJTd2l0Y2hDYXNlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHN3aXRjaFN0YXRlbWVudChkaXNjcmltaW5hbnQsIGNhc2VzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJTd2l0Y2hTdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdGhpc0V4cHJlc3Npb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUaGlzRXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0aHJvd1N0YXRlbWVudChhcmd1bWVudCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVGhyb3dTdGF0ZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHJ5U3RhdGVtZW50KGJsb2NrLCBoYW5kbGVyLCBmaW5hbGl6ZXIpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRyeVN0YXRlbWVudFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB1bmFyeUV4cHJlc3Npb24ob3BlcmF0b3IsIGFyZ3VtZW50LCBwcmVmaXgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlVuYXJ5RXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVFeHByZXNzaW9uKG9wZXJhdG9yLCBhcmd1bWVudCwgcHJlZml4KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJVcGRhdGVFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24oa2luZCwgZGVjbGFyYXRpb25zKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHZhcmlhYmxlRGVjbGFyYXRvcihpZCwgaW5pdCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVmFyaWFibGVEZWNsYXJhdG9yXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHdoaWxlU3RhdGVtZW50KHRlc3QsIGJvZHkpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIldoaWxlU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHdpdGhTdGF0ZW1lbnQob2JqZWN0LCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJXaXRoU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbm1lbnRQYXR0ZXJuKGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJBc3NpZ25tZW50UGF0dGVyblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBhcnJheVBhdHRlcm4oZWxlbWVudHMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkFycmF5UGF0dGVyblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBhcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbihwYXJhbXMsIGJvZHksIGFzeW5jKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBjbGFzc0JvZHkoYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQ2xhc3NCb2R5XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzRXhwcmVzc2lvbihpZCwgc3VwZXJDbGFzcywgYm9keSwgZGVjb3JhdG9ycykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQ2xhc3NFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzRGVjbGFyYXRpb24oaWQsIHN1cGVyQ2xhc3MsIGJvZHksIGRlY29yYXRvcnMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkNsYXNzRGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZXhwb3J0QWxsRGVjbGFyYXRpb24oc291cmNlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBleHBvcnREZWZhdWx0RGVjbGFyYXRpb24oZGVjbGFyYXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBleHBvcnROYW1lZERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uLCBzcGVjaWZpZXJzLCBzb3VyY2UpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZXhwb3J0U3BlY2lmaWVyKGxvY2FsLCBleHBvcnRlZCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRXhwb3J0U3BlY2lmaWVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZvck9mU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5LCBfYXdhaXQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkZvck9mU3RhdGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGltcG9ydERlY2xhcmF0aW9uKHNwZWNpZmllcnMsIHNvdXJjZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSW1wb3J0RGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gaW1wb3J0RGVmYXVsdFNwZWNpZmllcihsb2NhbCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIobG9jYWwpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpbXBvcnRTcGVjaWZpZXIobG9jYWwsIGltcG9ydGVkKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJJbXBvcnRTcGVjaWZpZXJcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbWV0YVByb3BlcnR5KG1ldGEsIHByb3BlcnR5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJNZXRhUHJvcGVydHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NNZXRob2Qoa2luZCwga2V5LCBwYXJhbXMsIGJvZHksIGNvbXB1dGVkLCBfc3RhdGljLCBnZW5lcmF0b3IsIGFzeW5jKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJDbGFzc01ldGhvZFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RQYXR0ZXJuKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk9iamVjdFBhdHRlcm5cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc3ByZWFkRWxlbWVudChhcmd1bWVudCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiU3ByZWFkRWxlbWVudFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfc3VwZXIoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJTdXBlclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0YWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24odGFnLCBxdWFzaSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRlbXBsYXRlRWxlbWVudCh2YWx1ZSwgdGFpbCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVGVtcGxhdGVFbGVtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRlbXBsYXRlTGl0ZXJhbChxdWFzaXMsIGV4cHJlc3Npb25zKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUZW1wbGF0ZUxpdGVyYWxcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24geWllbGRFeHByZXNzaW9uKGFyZ3VtZW50LCBkZWxlZ2F0ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiWWllbGRFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGF3YWl0RXhwcmVzc2lvbihhcmd1bWVudCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQXdhaXRFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pbXBvcnQoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJJbXBvcnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gYmlnSW50TGl0ZXJhbCh2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQmlnSW50TGl0ZXJhbFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBleHBvcnROYW1lc3BhY2VTcGVjaWZpZXIoZXhwb3J0ZWQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkV4cG9ydE5hbWVzcGFjZVNwZWNpZmllclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvcHRpb25hbE1lbWJlckV4cHJlc3Npb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29tcHV0ZWQsIG9wdGlvbmFsKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPcHRpb25hbE1lbWJlckV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb3B0aW9uYWxDYWxsRXhwcmVzc2lvbihjYWxsZWUsIF9hcmd1bWVudHMsIG9wdGlvbmFsKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPcHRpb25hbENhbGxFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzUHJvcGVydHkoa2V5LCB2YWx1ZSwgdHlwZUFubm90YXRpb24sIGRlY29yYXRvcnMsIGNvbXB1dGVkLCBfc3RhdGljKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJDbGFzc1Byb3BlcnR5XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzUHJpdmF0ZVByb3BlcnR5KGtleSwgdmFsdWUsIGRlY29yYXRvcnMsIF9zdGF0aWMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkNsYXNzUHJpdmF0ZVByb3BlcnR5XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzUHJpdmF0ZU1ldGhvZChraW5kLCBrZXksIHBhcmFtcywgYm9keSwgX3N0YXRpYykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQ2xhc3NQcml2YXRlTWV0aG9kXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHByaXZhdGVOYW1lKGlkKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJQcml2YXRlTmFtZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBhbnlUeXBlQW5ub3RhdGlvbigpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkFueVR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGFycmF5VHlwZUFubm90YXRpb24oZWxlbWVudFR5cGUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkFycmF5VHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gYm9vbGVhblR5cGVBbm5vdGF0aW9uKCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQm9vbGVhblR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGJvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb24odmFsdWUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkJvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvbigpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk51bGxMaXRlcmFsVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NJbXBsZW1lbnRzKGlkLCB0eXBlUGFyYW1ldGVycykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiQ2xhc3NJbXBsZW1lbnRzXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRlY2xhcmVDbGFzcyhpZCwgdHlwZVBhcmFtZXRlcnMsIF9leHRlbmRzLCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEZWNsYXJlQ2xhc3NcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjbGFyZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEZWNsYXJlRnVuY3Rpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjbGFyZUludGVyZmFjZShpZCwgdHlwZVBhcmFtZXRlcnMsIF9leHRlbmRzLCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEZWNsYXJlSW50ZXJmYWNlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRlY2xhcmVNb2R1bGUoaWQsIGJvZHksIGtpbmQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkRlY2xhcmVNb2R1bGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjbGFyZU1vZHVsZUV4cG9ydHModHlwZUFubm90YXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRlY2xhcmVUeXBlQWxpYXMoaWQsIHR5cGVQYXJhbWV0ZXJzLCByaWdodCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRGVjbGFyZVR5cGVBbGlhc1wiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkZWNsYXJlT3BhcXVlVHlwZShpZCwgdHlwZVBhcmFtZXRlcnMsIHN1cGVydHlwZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRGVjbGFyZU9wYXF1ZVR5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjbGFyZVZhcmlhYmxlKGlkKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEZWNsYXJlVmFyaWFibGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uLCBzcGVjaWZpZXJzLCBzb3VyY2UpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkRlY2xhcmVFeHBvcnREZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb24oc291cmNlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjbGFyZWRQcmVkaWNhdGUodmFsdWUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkRlY2xhcmVkUHJlZGljYXRlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGV4aXN0c1R5cGVBbm5vdGF0aW9uKCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRXhpc3RzVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZnVuY3Rpb25UeXBlQW5ub3RhdGlvbih0eXBlUGFyYW1ldGVycywgcGFyYW1zLCByZXN0LCByZXR1cm5UeXBlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJGdW5jdGlvblR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZ1bmN0aW9uVHlwZVBhcmFtKG5hbWUsIHR5cGVBbm5vdGF0aW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJGdW5jdGlvblR5cGVQYXJhbVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmljVHlwZUFubm90YXRpb24oaWQsIHR5cGVQYXJhbWV0ZXJzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJHZW5lcmljVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gaW5mZXJyZWRQcmVkaWNhdGUoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJJbmZlcnJlZFByZWRpY2F0ZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcmZhY2VFeHRlbmRzKGlkLCB0eXBlUGFyYW1ldGVycykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSW50ZXJmYWNlRXh0ZW5kc1wiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcmZhY2VEZWNsYXJhdGlvbihpZCwgdHlwZVBhcmFtZXRlcnMsIF9leHRlbmRzLCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJJbnRlcmZhY2VEZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcmZhY2VUeXBlQW5ub3RhdGlvbihfZXh0ZW5kcywgYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSW50ZXJmYWNlVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb24odHlwZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG1peGVkVHlwZUFubm90YXRpb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJNaXhlZFR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGVtcHR5VHlwZUFubm90YXRpb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJFbXB0eVR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG51bGxhYmxlVHlwZUFubm90YXRpb24odHlwZUFubm90YXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk51bGxhYmxlVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJOdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyVHlwZUFubm90YXRpb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJOdW1iZXJUeXBlQW5ub3RhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUeXBlQW5ub3RhdGlvbihwcm9wZXJ0aWVzLCBpbmRleGVycywgY2FsbFByb3BlcnRpZXMsIGludGVybmFsU2xvdHMsIGV4YWN0KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPYmplY3RUeXBlQW5ub3RhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUeXBlSW50ZXJuYWxTbG90KGlkLCB2YWx1ZSwgb3B0aW9uYWwsIF9zdGF0aWMsIG1ldGhvZCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiT2JqZWN0VHlwZUludGVybmFsU2xvdFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUeXBlQ2FsbFByb3BlcnR5KHZhbHVlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPYmplY3RUeXBlQ2FsbFByb3BlcnR5XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG9iamVjdFR5cGVJbmRleGVyKGlkLCBrZXksIHZhbHVlLCB2YXJpYW5jZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiT2JqZWN0VHlwZUluZGV4ZXJcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0VHlwZVByb3BlcnR5KGtleSwgdmFsdWUsIHZhcmlhbmNlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPYmplY3RUeXBlUHJvcGVydHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5KGFyZ3VtZW50KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJPYmplY3RUeXBlU3ByZWFkUHJvcGVydHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb3BhcXVlVHlwZShpZCwgdHlwZVBhcmFtZXRlcnMsIHN1cGVydHlwZSwgaW1wbHR5cGUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk9wYXF1ZVR5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcXVhbGlmaWVkVHlwZUlkZW50aWZpZXIoaWQsIHF1YWxpZmljYXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlF1YWxpZmllZFR5cGVJZGVudGlmaWVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiU3RyaW5nTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1R5cGVBbm5vdGF0aW9uKCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiU3RyaW5nVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc3ltYm9sVHlwZUFubm90YXRpb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJTeW1ib2xUeXBlQW5ub3RhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0aGlzVHlwZUFubm90YXRpb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUaGlzVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHVwbGVUeXBlQW5ub3RhdGlvbih0eXBlcykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVHVwbGVUeXBlQW5ub3RhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0eXBlb2ZUeXBlQW5ub3RhdGlvbihhcmd1bWVudCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVHlwZW9mVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHlwZUFsaWFzKGlkLCB0eXBlUGFyYW1ldGVycywgcmlnaHQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlR5cGVBbGlhc1wiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0eXBlQW5ub3RhdGlvbih0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHlwZUNhc3RFeHByZXNzaW9uKGV4cHJlc3Npb24sIHR5cGVBbm5vdGF0aW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUeXBlQ2FzdEV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHlwZVBhcmFtZXRlcihib3VuZCwgX2RlZmF1bHQsIHZhcmlhbmNlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUeXBlUGFyYW1ldGVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbihwYXJhbXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0eXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbihwYXJhbXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHVuaW9uVHlwZUFubm90YXRpb24odHlwZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlVuaW9uVHlwZUFubm90YXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdmFyaWFuY2Uoa2luZCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVmFyaWFuY2VcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdm9pZFR5cGVBbm5vdGF0aW9uKCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVm9pZFR5cGVBbm5vdGF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGVudW1EZWNsYXJhdGlvbihpZCwgYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRW51bURlY2xhcmF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGVudW1Cb29sZWFuQm9keShtZW1iZXJzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJFbnVtQm9vbGVhbkJvZHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZW51bU51bWJlckJvZHkobWVtYmVycykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRW51bU51bWJlckJvZHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZW51bVN0cmluZ0JvZHkobWVtYmVycykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRW51bVN0cmluZ0JvZHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZW51bVN5bWJvbEJvZHkobWVtYmVycykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRW51bVN5bWJvbEJvZHlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZW51bUJvb2xlYW5NZW1iZXIoaWQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkVudW1Cb29sZWFuTWVtYmVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGVudW1OdW1iZXJNZW1iZXIoaWQsIGluaXQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkVudW1OdW1iZXJNZW1iZXJcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZW51bVN0cmluZ01lbWJlcihpZCwgaW5pdCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRW51bVN0cmluZ01lbWJlclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBlbnVtRGVmYXVsdGVkTWVtYmVyKGlkKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJFbnVtRGVmYXVsdGVkTWVtYmVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4ZWRBY2Nlc3NUeXBlKG9iamVjdFR5cGUsIGluZGV4VHlwZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSW5kZXhlZEFjY2Vzc1R5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb3B0aW9uYWxJbmRleGVkQWNjZXNzVHlwZShvYmplY3RUeXBlLCBpbmRleFR5cGUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk9wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJKU1hBdHRyaWJ1dGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4Q2xvc2luZ0VsZW1lbnQobmFtZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSlNYQ2xvc2luZ0VsZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4RWxlbWVudChvcGVuaW5nRWxlbWVudCwgY2xvc2luZ0VsZW1lbnQsIGNoaWxkcmVuLCBzZWxmQ2xvc2luZykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSlNYRWxlbWVudFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBqc3hFbXB0eUV4cHJlc3Npb24oKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJKU1hFbXB0eUV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4RXhwcmVzc2lvbkNvbnRhaW5lcihleHByZXNzaW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJKU1hFeHByZXNzaW9uQ29udGFpbmVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGpzeFNwcmVhZENoaWxkKGV4cHJlc3Npb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkpTWFNwcmVhZENoaWxkXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGpzeElkZW50aWZpZXIobmFtZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSlNYSWRlbnRpZmllclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBqc3hNZW1iZXJFeHByZXNzaW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkpTWE1lbWJlckV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4TmFtZXNwYWNlZE5hbWUobmFtZXNwYWNlLCBuYW1lKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJKU1hOYW1lc3BhY2VkTmFtZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBqc3hPcGVuaW5nRWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCBzZWxmQ2xvc2luZykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSlNYT3BlbmluZ0VsZW1lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4U3ByZWFkQXR0cmlidXRlKGFyZ3VtZW50KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJKU1hTcHJlYWRBdHRyaWJ1dGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24ganN4VGV4dCh2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSlNYVGV4dFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBqc3hGcmFnbWVudChvcGVuaW5nRnJhZ21lbnQsIGNsb3NpbmdGcmFnbWVudCwgY2hpbGRyZW4pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkpTWEZyYWdtZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGpzeE9wZW5pbmdGcmFnbWVudCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkpTWE9wZW5pbmdGcmFnbWVudFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBqc3hDbG9zaW5nRnJhZ21lbnQoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJKU1hDbG9zaW5nRnJhZ21lbnRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIk5vb3BcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIoZXhwZWN0ZWROb2RlLCBuYW1lKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJQbGFjZWhvbGRlclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB2OEludHJpbnNpY0lkZW50aWZpZXIobmFtZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVjhJbnRyaW5zaWNJZGVudGlmaWVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGFyZ3VtZW50UGxhY2Vob2xkZXIoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJBcmd1bWVudFBsYWNlaG9sZGVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGJpbmRFeHByZXNzaW9uKG9iamVjdCwgY2FsbGVlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJCaW5kRXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBpbXBvcnRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiSW1wb3J0QXR0cmlidXRlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRvcihleHByZXNzaW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEZWNvcmF0b3JcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZG9FeHByZXNzaW9uKGJvZHksIGFzeW5jKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJEb0V4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZXhwb3J0RGVmYXVsdFNwZWNpZmllcihleHBvcnRlZCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiRXhwb3J0RGVmYXVsdFNwZWNpZmllclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiByZWNvcmRFeHByZXNzaW9uKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlJlY29yZEV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHVwbGVFeHByZXNzaW9uKGVsZW1lbnRzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUdXBsZUV4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGVjaW1hbExpdGVyYWwodmFsdWUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIkRlY2ltYWxMaXRlcmFsXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0Jsb2NrKGJvZHkpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlN0YXRpY0Jsb2NrXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZUV4cHJlc3Npb24oYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiTW9kdWxlRXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0b3BpY1JlZmVyZW5jZSgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRvcGljUmVmZXJlbmNlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lVG9waWNFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlBpcGVsaW5lVG9waWNFeHByZXNzaW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lQmFyZUZ1bmN0aW9uKGNhbGxlZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiUGlwZWxpbmVCYXJlRnVuY3Rpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcGlwZWxpbmVQcmltYXJ5VG9waWNSZWZlcmVuY2UoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJQaXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1BhcmFtZXRlclByb3BlcnR5KHBhcmFtZXRlcikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNQYXJhbWV0ZXJQcm9wZXJ0eVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0RlY2xhcmVGdW5jdGlvbihpZCwgdHlwZVBhcmFtZXRlcnMsIHBhcmFtcywgcmV0dXJuVHlwZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNEZWNsYXJlRnVuY3Rpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNEZWNsYXJlTWV0aG9kKGRlY29yYXRvcnMsIGtleSwgdHlwZVBhcmFtZXRlcnMsIHBhcmFtcywgcmV0dXJuVHlwZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNEZWNsYXJlTWV0aG9kXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzUXVhbGlmaWVkTmFtZShsZWZ0LCByaWdodCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNRdWFsaWZpZWROYW1lXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uKHR5cGVQYXJhbWV0ZXJzLCBwYXJhbWV0ZXJzLCB0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvbih0eXBlUGFyYW1ldGVycywgcGFyYW1ldGVycywgdHlwZUFubm90YXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNQcm9wZXJ0eVNpZ25hdHVyZShrZXksIHR5cGVBbm5vdGF0aW9uLCBpbml0aWFsaXplcikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNQcm9wZXJ0eVNpZ25hdHVyZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c01ldGhvZFNpZ25hdHVyZShrZXksIHR5cGVQYXJhbWV0ZXJzLCBwYXJhbWV0ZXJzLCB0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNNZXRob2RTaWduYXR1cmVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNJbmRleFNpZ25hdHVyZShwYXJhbWV0ZXJzLCB0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNJbmRleFNpZ25hdHVyZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0FueUtleXdvcmQoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU0FueUtleXdvcmRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNCb29sZWFuS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTQm9vbGVhbktleXdvcmRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNCaWdJbnRLZXl3b3JkKCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNCaWdJbnRLZXl3b3JkXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzSW50cmluc2ljS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTSW50cmluc2ljS2V5d29yZFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c05ldmVyS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTTmV2ZXJLZXl3b3JkXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTnVsbEtleXdvcmQoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU051bGxLZXl3b3JkXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTnVtYmVyS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTTnVtYmVyS2V5d29yZFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c09iamVjdEtleXdvcmQoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU09iamVjdEtleXdvcmRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNTdHJpbmdLZXl3b3JkKCkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNTdHJpbmdLZXl3b3JkXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzU3ltYm9sS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTU3ltYm9sS2V5d29yZFwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1VuZGVmaW5lZEtleXdvcmQoKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU1VuZGVmaW5lZEtleXdvcmRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNVbmtub3duS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVW5rbm93bktleXdvcmRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNWb2lkS2V5d29yZCgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVm9pZEtleXdvcmRcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNUaGlzVHlwZSgpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVGhpc1R5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNGdW5jdGlvblR5cGUodHlwZVBhcmFtZXRlcnMsIHBhcmFtZXRlcnMsIHR5cGVBbm5vdGF0aW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU0Z1bmN0aW9uVHlwZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0NvbnN0cnVjdG9yVHlwZSh0eXBlUGFyYW1ldGVycywgcGFyYW1ldGVycywgdHlwZUFubm90YXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTQ29uc3RydWN0b3JUeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzVHlwZVJlZmVyZW5jZSh0eXBlTmFtZSwgdHlwZVBhcmFtZXRlcnMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVHlwZVJlZmVyZW5jZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1R5cGVQcmVkaWNhdGUocGFyYW1ldGVyTmFtZSwgdHlwZUFubm90YXRpb24sIGFzc2VydHMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVHlwZVByZWRpY2F0ZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1R5cGVRdWVyeShleHByTmFtZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNUeXBlUXVlcnlcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNUeXBlTGl0ZXJhbChtZW1iZXJzKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU1R5cGVMaXRlcmFsXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzQXJyYXlUeXBlKGVsZW1lbnRUeXBlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU0FycmF5VHlwZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1R1cGxlVHlwZShlbGVtZW50VHlwZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVHVwbGVUeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzT3B0aW9uYWxUeXBlKHR5cGVBbm5vdGF0aW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU09wdGlvbmFsVHlwZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1Jlc3RUeXBlKHR5cGVBbm5vdGF0aW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU1Jlc3RUeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTmFtZWRUdXBsZU1lbWJlcihsYWJlbCwgZWxlbWVudFR5cGUsIG9wdGlvbmFsKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU05hbWVkVHVwbGVNZW1iZXJcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNVbmlvblR5cGUodHlwZXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVW5pb25UeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzSW50ZXJzZWN0aW9uVHlwZSh0eXBlcykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNJbnRlcnNlY3Rpb25UeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzQ29uZGl0aW9uYWxUeXBlKGNoZWNrVHlwZSwgZXh0ZW5kc1R5cGUsIHRydWVUeXBlLCBmYWxzZVR5cGUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTQ29uZGl0aW9uYWxUeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzSW5mZXJUeXBlKHR5cGVQYXJhbWV0ZXIpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTSW5mZXJUeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzUGFyZW50aGVzaXplZFR5cGUodHlwZUFubm90YXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTUGFyZW50aGVzaXplZFR5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNUeXBlT3BlcmF0b3IodHlwZUFubm90YXRpb24pIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVHlwZU9wZXJhdG9yXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzSW5kZXhlZEFjY2Vzc1R5cGUob2JqZWN0VHlwZSwgaW5kZXhUeXBlKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU0luZGV4ZWRBY2Nlc3NUeXBlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTWFwcGVkVHlwZSh0eXBlUGFyYW1ldGVyLCB0eXBlQW5ub3RhdGlvbiwgbmFtZVR5cGUpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTTWFwcGVkVHlwZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0xpdGVyYWxUeXBlKGxpdGVyYWwpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTTGl0ZXJhbFR5cGVcIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMoZXhwcmVzc2lvbiwgdHlwZVBhcmFtZXRlcnMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzSW50ZXJmYWNlRGVjbGFyYXRpb24oaWQsIHR5cGVQYXJhbWV0ZXJzLCBfZXh0ZW5kcywgYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0ludGVyZmFjZUJvZHkoYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNJbnRlcmZhY2VCb2R5XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzVHlwZUFsaWFzRGVjbGFyYXRpb24oaWQsIHR5cGVQYXJhbWV0ZXJzLCB0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNUeXBlQWxpYXNEZWNsYXJhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0FzRXhwcmVzc2lvbihleHByZXNzaW9uLCB0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNBc0V4cHJlc3Npb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNUeXBlQXNzZXJ0aW9uKHR5cGVBbm5vdGF0aW9uLCBleHByZXNzaW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU1R5cGVBc3NlcnRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNFbnVtRGVjbGFyYXRpb24oaWQsIG1lbWJlcnMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTRW51bURlY2xhcmF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzRW51bU1lbWJlcihpZCwgaW5pdGlhbGl6ZXIpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTRW51bU1lbWJlclwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c01vZHVsZURlY2xhcmF0aW9uKGlkLCBib2R5KSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU01vZHVsZURlY2xhcmF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTW9kdWxlQmxvY2soYm9keSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNNb2R1bGVCbG9ja1wiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0ltcG9ydFR5cGUoYXJndW1lbnQsIHF1YWxpZmllciwgdHlwZVBhcmFtZXRlcnMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTSW1wb3J0VHlwZVwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uKGlkLCBtb2R1bGVSZWZlcmVuY2UpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZShleHByZXNzaW9uKSB7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJUU0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTm9uTnVsbEV4cHJlc3Npb24oZXhwcmVzc2lvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNOb25OdWxsRXhwcmVzc2lvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c0V4cG9ydEFzc2lnbm1lbnQoZXhwcmVzc2lvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNFeHBvcnRBc3NpZ25tZW50XCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb24oaWQpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb25cIiwgLi4uYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHNUeXBlQW5ub3RhdGlvbih0eXBlQW5ub3RhdGlvbikge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNUeXBlQW5ub3RhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uKHBhcmFtcykge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiLCAuLi5hcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiB0c1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbihwYXJhbXMpIHtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRzVHlwZVBhcmFtZXRlcihjb25zdHJhaW50LCBfZGVmYXVsdCwgbmFtZSkge1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiVFNUeXBlUGFyYW1ldGVyXCIsIC4uLmFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIE51bWJlckxpdGVyYWwoLi4uYXJncykge1xuICBjb25zb2xlLnRyYWNlKFwiVGhlIG5vZGUgdHlwZSBOdW1iZXJMaXRlcmFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gTnVtZXJpY0xpdGVyYWxcIik7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJOdW1iZXJMaXRlcmFsXCIsIC4uLmFyZ3MpO1xufVxuXG5mdW5jdGlvbiBSZWdleExpdGVyYWwoLi4uYXJncykge1xuICBjb25zb2xlLnRyYWNlKFwiVGhlIG5vZGUgdHlwZSBSZWdleExpdGVyYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBSZWdFeHBMaXRlcmFsXCIpO1xuICByZXR1cm4gKDAsIF9idWlsZGVyLmRlZmF1bHQpKFwiUmVnZXhMaXRlcmFsXCIsIC4uLmFyZ3MpO1xufVxuXG5mdW5jdGlvbiBSZXN0UHJvcGVydHkoLi4uYXJncykge1xuICBjb25zb2xlLnRyYWNlKFwiVGhlIG5vZGUgdHlwZSBSZXN0UHJvcGVydHkgaGFzIGJlZW4gcmVuYW1lZCB0byBSZXN0RWxlbWVudFwiKTtcbiAgcmV0dXJuICgwLCBfYnVpbGRlci5kZWZhdWx0KShcIlJlc3RQcm9wZXJ0eVwiLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gU3ByZWFkUHJvcGVydHkoLi4uYXJncykge1xuICBjb25zb2xlLnRyYWNlKFwiVGhlIG5vZGUgdHlwZSBTcHJlYWRQcm9wZXJ0eSBoYXMgYmVlbiByZW5hbWVkIHRvIFNwcmVhZEVsZW1lbnRcIik7XG4gIHJldHVybiAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoXCJTcHJlYWRQcm9wZXJ0eVwiLCAuLi5hcmdzKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFycmF5RXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYXJyYXlFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5hc3NpZ25tZW50RXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaW5hcnlFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5iaW5hcnlFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludGVycHJldGVyRGlyZWN0aXZlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbnRlcnByZXRlckRpcmVjdGl2ZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXJlY3RpdmVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmRpcmVjdGl2ZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXJlY3RpdmVMaXRlcmFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kaXJlY3RpdmVMaXRlcmFsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJsb2NrU3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5ibG9ja1N0YXRlbWVudDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCcmVha1N0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYnJlYWtTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsbEV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmNhbGxFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhdGNoQ2xhdXNlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5jYXRjaENsYXVzZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmNvbmRpdGlvbmFsRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250aW51ZVN0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguY29udGludWVTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVidWdnZXJTdGF0ZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmRlYnVnZ2VyU3RhdGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvV2hpbGVTdGF0ZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmRvV2hpbGVTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW1wdHlTdGF0ZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmVtcHR5U3RhdGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmV4cHJlc3Npb25TdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmlsZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZmlsZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JJblN0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZm9ySW5TdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRm9yU3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5mb3JTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZnVuY3Rpb25EZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmZ1bmN0aW9uRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pZGVudGlmaWVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklmU3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pZlN0YXRlbWVudDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMYWJlbGVkU3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5sYWJlbGVkU3RhdGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmluZ0xpdGVyYWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnN0cmluZ0xpdGVyYWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTnVtZXJpY0xpdGVyYWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm51bWVyaWNMaXRlcmFsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk51bGxMaXRlcmFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5udWxsTGl0ZXJhbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCb29sZWFuTGl0ZXJhbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYm9vbGVhbkxpdGVyYWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVnRXhwTGl0ZXJhbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgucmVnRXhwTGl0ZXJhbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb2dpY2FsRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgubG9naWNhbEV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVtYmVyRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgubWVtYmVyRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOZXdFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5uZXdFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb2dyYW1cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnByb2dyYW07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT2JqZWN0RXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgub2JqZWN0RXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RNZXRob2RcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm9iamVjdE1ldGhvZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RQcm9wZXJ0eVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgub2JqZWN0UHJvcGVydHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVzdEVsZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnJlc3RFbGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJldHVyblN0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgucmV0dXJuU3RhdGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcXVlbmNlRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc2VxdWVuY2VFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5wYXJlbnRoZXNpemVkRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTd2l0Y2hDYXNlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5zd2l0Y2hDYXNlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN3aXRjaFN0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc3dpdGNoU3RhdGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRoaXNFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50aGlzRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUaHJvd1N0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudGhyb3dTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJ5U3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50cnlTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5hcnlFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC51bmFyeUV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVXBkYXRlRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudXBkYXRlRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC52YXJpYWJsZURlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZhcmlhYmxlRGVjbGFyYXRvclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudmFyaWFibGVEZWNsYXJhdG9yO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldoaWxlU3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC53aGlsZVN0YXRlbWVudDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaXRoU3RhdGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC53aXRoU3RhdGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5hc3NpZ25tZW50UGF0dGVybjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBcnJheVBhdHRlcm5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmFycmF5UGF0dGVybjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xhc3NCb2R5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5jbGFzc0JvZHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xhc3NFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5jbGFzc0V4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xhc3NEZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguY2xhc3NEZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZXhwb3J0QWxsRGVjbGFyYXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5leHBvcnREZWZhdWx0RGVjbGFyYXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwb3J0TmFtZWREZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHBvcnRTcGVjaWZpZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmV4cG9ydFNwZWNpZmllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JPZlN0YXRlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZm9yT2ZTdGF0ZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1wb3J0RGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmltcG9ydERlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkltcG9ydERlZmF1bHRTcGVjaWZpZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmltcG9ydERlZmF1bHRTcGVjaWZpZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1wb3J0U3BlY2lmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbXBvcnRTcGVjaWZpZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWV0YVByb3BlcnR5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5tZXRhUHJvcGVydHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xhc3NNZXRob2RcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmNsYXNzTWV0aG9kO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9iamVjdFBhdHRlcm5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm9iamVjdFBhdHRlcm47XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3ByZWFkRWxlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc3ByZWFkRWxlbWVudDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdXBlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc3VwZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50YWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGVtcGxhdGVFbGVtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50ZW1wbGF0ZUVsZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGVtcGxhdGVMaXRlcmFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50ZW1wbGF0ZUxpdGVyYWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiWWllbGRFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC55aWVsZEV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXdhaXRFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5hd2FpdEV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1wb3J0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbXBvcnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmlnSW50TGl0ZXJhbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYmlnSW50TGl0ZXJhbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmV4cG9ydE5hbWVzcGFjZVNwZWNpZmllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPcHRpb25hbE1lbWJlckV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPcHRpb25hbENhbGxFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5vcHRpb25hbENhbGxFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsYXNzUHJvcGVydHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmNsYXNzUHJvcGVydHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xhc3NQcml2YXRlUHJvcGVydHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmNsYXNzUHJpdmF0ZVByb3BlcnR5O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsYXNzUHJpdmF0ZU1ldGhvZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguY2xhc3NQcml2YXRlTWV0aG9kO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByaXZhdGVOYW1lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5wcml2YXRlTmFtZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBbnlUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYW55VHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXJyYXlUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYXJyYXlUeXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCb29sZWFuVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmJvb2xlYW5UeXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCb29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5ib29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk51bGxMaXRlcmFsVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm51bGxMaXRlcmFsVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xhc3NJbXBsZW1lbnRzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5jbGFzc0ltcGxlbWVudHM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjbGFyZUNsYXNzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNsYXJlQ2xhc3M7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjbGFyZUZ1bmN0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNsYXJlRnVuY3Rpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjbGFyZUludGVyZmFjZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZGVjbGFyZUludGVyZmFjZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNsYXJlTW9kdWxlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNsYXJlTW9kdWxlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNsYXJlTW9kdWxlRXhwb3J0cztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNsYXJlVHlwZUFsaWFzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNsYXJlVHlwZUFsaWFzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY2xhcmVPcGFxdWVUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNsYXJlT3BhcXVlVHlwZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNsYXJlVmFyaWFibGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmRlY2xhcmVWYXJpYWJsZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmRlY2xhcmVFeHBvcnREZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmRlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNsYXJlZFByZWRpY2F0ZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZGVjbGFyZWRQcmVkaWNhdGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhpc3RzVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmV4aXN0c1R5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZ1bmN0aW9uVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmZ1bmN0aW9uVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRnVuY3Rpb25UeXBlUGFyYW1cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmZ1bmN0aW9uVHlwZVBhcmFtO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdlbmVyaWNUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZ2VuZXJpY1R5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkluZmVycmVkUHJlZGljYXRlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbmZlcnJlZFByZWRpY2F0ZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnRlcmZhY2VFeHRlbmRzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbnRlcmZhY2VFeHRlbmRzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludGVyZmFjZURlY2xhcmF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbnRlcmZhY2VEZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnRlcmZhY2VUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguaW50ZXJmYWNlVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1peGVkVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm1peGVkVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW1wdHlUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZW1wdHlUeXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOdWxsYWJsZVR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk51bWJlckxpdGVyYWxUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgubnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk51bWJlclR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5udW1iZXJUeXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgub2JqZWN0VHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT2JqZWN0VHlwZUludGVybmFsU2xvdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgub2JqZWN0VHlwZUludGVybmFsU2xvdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RUeXBlQ2FsbFByb3BlcnR5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5vYmplY3RUeXBlQ2FsbFByb3BlcnR5O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9iamVjdFR5cGVJbmRleGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5vYmplY3RUeXBlSW5kZXhlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RUeXBlUHJvcGVydHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm9iamVjdFR5cGVQcm9wZXJ0eTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RUeXBlU3ByZWFkUHJvcGVydHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm9iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPcGFxdWVUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5vcGFxdWVUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlF1YWxpZmllZFR5cGVJZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5xdWFsaWZpZWRUeXBlSWRlbnRpZmllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJpbmdMaXRlcmFsVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnN0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJpbmdUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc3RyaW5nVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3ltYm9sVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnN5bWJvbFR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRoaXNUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudGhpc1R5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR1cGxlVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnR1cGxlVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZW9mVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnR5cGVvZlR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVBbGlhc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHlwZUFsaWFzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50eXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlQ2FzdEV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnR5cGVDYXN0RXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlUGFyYW1ldGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50eXBlUGFyYW1ldGVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50eXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVbmlvblR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC51bmlvblR5cGVBbm5vdGF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZhcmlhbmNlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC52YXJpYW5jZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWb2lkVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnZvaWRUeXBlQW5ub3RhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbnVtRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmVudW1EZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbnVtQm9vbGVhbkJvZHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmVudW1Cb29sZWFuQm9keTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbnVtTnVtYmVyQm9keVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZW51bU51bWJlckJvZHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW51bVN0cmluZ0JvZHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmVudW1TdHJpbmdCb2R5O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVudW1TeW1ib2xCb2R5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5lbnVtU3ltYm9sQm9keTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbnVtQm9vbGVhbk1lbWJlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZW51bUJvb2xlYW5NZW1iZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW51bU51bWJlck1lbWJlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZW51bU51bWJlck1lbWJlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbnVtU3RyaW5nTWVtYmVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5lbnVtU3RyaW5nTWVtYmVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVudW1EZWZhdWx0ZWRNZW1iZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmVudW1EZWZhdWx0ZWRNZW1iZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5kZXhlZEFjY2Vzc1R5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmluZGV4ZWRBY2Nlc3NUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4Lm9wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYQXR0cmlidXRlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hBdHRyaWJ1dGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYQ2xvc2luZ0VsZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmpzeENsb3NpbmdFbGVtZW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpTWEVsZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LmpzeEVsZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYRW1wdHlFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hFbXB0eUV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguanN4RXhwcmVzc2lvbkNvbnRhaW5lcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKU1hTcHJlYWRDaGlsZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguanN4U3ByZWFkQ2hpbGQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYSWRlbnRpZmllclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguanN4SWRlbnRpZmllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKU1hNZW1iZXJFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hNZW1iZXJFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpTWE5hbWVzcGFjZWROYW1lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hOYW1lc3BhY2VkTmFtZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKU1hPcGVuaW5nRWxlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguanN4T3BlbmluZ0VsZW1lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYU3ByZWFkQXR0cmlidXRlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hTcHJlYWRBdHRyaWJ1dGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYVGV4dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguanN4VGV4dDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKU1hGcmFnbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguanN4RnJhZ21lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYT3BlbmluZ0ZyYWdtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hPcGVuaW5nRnJhZ21lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNYQ2xvc2luZ0ZyYWdtZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5qc3hDbG9zaW5nRnJhZ21lbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm9vcFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgubm9vcDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQbGFjZWhvbGRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgucGxhY2Vob2xkZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVjhJbnRyaW5zaWNJZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC52OEludHJpbnNpY0lkZW50aWZpZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXJndW1lbnRQbGFjZWhvbGRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYXJndW1lbnRQbGFjZWhvbGRlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaW5kRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguYmluZEV4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1wb3J0QXR0cmlidXRlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5pbXBvcnRBdHRyaWJ1dGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjb3JhdG9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNvcmF0b3I7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRG9FeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kb0V4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwb3J0RGVmYXVsdFNwZWNpZmllclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguZXhwb3J0RGVmYXVsdFNwZWNpZmllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWNvcmRFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5yZWNvcmRFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR1cGxlRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHVwbGVFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY2ltYWxMaXRlcmFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWNpbWFsTGl0ZXJhbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdGF0aWNCbG9ja1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc3RhdGljQmxvY2s7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTW9kdWxlRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgubW9kdWxlRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3BpY1JlZmVyZW5jZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudG9waWNSZWZlcmVuY2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGlwZWxpbmVUb3BpY0V4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnBpcGVsaW5lVG9waWNFeHByZXNzaW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBpcGVsaW5lQmFyZUZ1bmN0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5waXBlbGluZUJhcmVGdW5jdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQaXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgucGlwZWxpbmVQcmltYXJ5VG9waWNSZWZlcmVuY2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNQYXJhbWV0ZXJQcm9wZXJ0eVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNQYXJhbWV0ZXJQcm9wZXJ0eTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0RlY2xhcmVGdW5jdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNEZWNsYXJlRnVuY3Rpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNEZWNsYXJlTWV0aG9kXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0RlY2xhcmVNZXRob2Q7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNRdWFsaWZpZWROYW1lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1F1YWxpZmllZE5hbWU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNQcm9wZXJ0eVNpZ25hdHVyZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNQcm9wZXJ0eVNpZ25hdHVyZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU01ldGhvZFNpZ25hdHVyZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNNZXRob2RTaWduYXR1cmU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNJbmRleFNpZ25hdHVyZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNJbmRleFNpZ25hdHVyZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0FueUtleXdvcmRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzQW55S2V5d29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0Jvb2xlYW5LZXl3b3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0Jvb2xlYW5LZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTQmlnSW50S2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNCaWdJbnRLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTSW50cmluc2ljS2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNJbnRyaW5zaWNLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTTmV2ZXJLZXl3b3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c05ldmVyS2V5d29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU051bGxLZXl3b3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c051bGxLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTTnVtYmVyS2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNOdW1iZXJLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTT2JqZWN0S2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNPYmplY3RLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTU3RyaW5nS2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNTdHJpbmdLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTU3ltYm9sS2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNTeW1ib2xLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTVW5kZWZpbmVkS2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNVbmRlZmluZWRLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTVW5rbm93bktleXdvcmRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzVW5rbm93bktleXdvcmQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNWb2lkS2V5d29yZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNWb2lkS2V5d29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU1RoaXNUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1RoaXNUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTRnVuY3Rpb25UeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0Z1bmN0aW9uVHlwZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0NvbnN0cnVjdG9yVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNDb25zdHJ1Y3RvclR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlUmVmZXJlbmNlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1R5cGVSZWZlcmVuY2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlUHJlZGljYXRlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1R5cGVQcmVkaWNhdGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlUXVlcnlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzVHlwZVF1ZXJ5O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTVHlwZUxpdGVyYWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzVHlwZUxpdGVyYWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNBcnJheVR5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzQXJyYXlUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTVHVwbGVUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1R1cGxlVHlwZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU09wdGlvbmFsVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNPcHRpb25hbFR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNSZXN0VHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNSZXN0VHlwZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU05hbWVkVHVwbGVNZW1iZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzTmFtZWRUdXBsZU1lbWJlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU1VuaW9uVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNVbmlvblR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNJbnRlcnNlY3Rpb25UeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0ludGVyc2VjdGlvblR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNDb25kaXRpb25hbFR5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzQ29uZGl0aW9uYWxUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTSW5mZXJUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0luZmVyVHlwZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU1BhcmVudGhlc2l6ZWRUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1BhcmVudGhlc2l6ZWRUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTVHlwZU9wZXJhdG9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1R5cGVPcGVyYXRvcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0luZGV4ZWRBY2Nlc3NUeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0luZGV4ZWRBY2Nlc3NUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTTWFwcGVkVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNNYXBwZWRUeXBlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTTGl0ZXJhbFR5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzTGl0ZXJhbFR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTSW50ZXJmYWNlRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzSW50ZXJmYWNlRGVjbGFyYXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNJbnRlcmZhY2VCb2R5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0ludGVyZmFjZUJvZHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlQWxpYXNEZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNUeXBlQWxpYXNEZWNsYXJhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0FzRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNBc0V4cHJlc3Npb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlQXNzZXJ0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1R5cGVBc3NlcnRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNFbnVtRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzRW51bURlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTRW51bU1lbWJlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNFbnVtTWVtYmVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTTW9kdWxlRGVjbGFyYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzTW9kdWxlRGVjbGFyYXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNNb2R1bGVCbG9ja1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNNb2R1bGVCbG9jaztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0ltcG9ydFR5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzSW1wb3J0VHlwZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNOb25OdWxsRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNOb25OdWxsRXhwcmVzc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU0V4cG9ydEFzc2lnbm1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzRXhwb3J0QXNzaWdubWVudDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU05hbWVzcGFjZUV4cG9ydERlY2xhcmF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c05hbWVzcGFjZUV4cG9ydERlY2xhcmF0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRTVHlwZUFubm90YXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnRzVHlwZUFubm90YXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgudHNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVFNUeXBlUGFyYW1ldGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC50c1R5cGVQYXJhbWV0ZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTnVtYmVyTGl0ZXJhbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXgubnVtYmVyTGl0ZXJhbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWdleExpdGVyYWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnJlZ2V4TGl0ZXJhbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXN0UHJvcGVydHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luZGV4LnJlc3RQcm9wZXJ0eTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTcHJlYWRQcm9wZXJ0eVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5kZXguc3ByZWFkUHJvcGVydHk7XG4gIH1cbn0pO1xuXG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vaW5kZXhcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZENoaWxkcmVuO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi8uLi92YWxpZGF0b3JzL2dlbmVyYXRlZFwiKTtcblxudmFyIF9jbGVhbkpTWEVsZW1lbnRMaXRlcmFsQ2hpbGQgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvcmVhY3QvY2xlYW5KU1hFbGVtZW50TGl0ZXJhbENoaWxkXCIpO1xuXG5mdW5jdGlvbiBidWlsZENoaWxkcmVuKG5vZGUpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuXG4gICAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzSlNYVGV4dCkoY2hpbGQpKSB7XG4gICAgICAoMCwgX2NsZWFuSlNYRWxlbWVudExpdGVyYWxDaGlsZC5kZWZhdWx0KShjaGlsZCwgZWxlbWVudHMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzSlNYRXhwcmVzc2lvbkNvbnRhaW5lcikoY2hpbGQpKSBjaGlsZCA9IGNoaWxkLmV4cHJlc3Npb247XG4gICAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzSlNYRW1wdHlFeHByZXNzaW9uKShjaGlsZCkpIGNvbnRpbnVlO1xuICAgIGVsZW1lbnRzLnB1c2goY2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVFNVbmlvblR5cGU7XG5cbnZhciBfZ2VuZXJhdGVkID0gcmVxdWlyZShcIi4uL2dlbmVyYXRlZFwiKTtcblxudmFyIF9yZW1vdmVUeXBlRHVwbGljYXRlcyA9IHJlcXVpcmUoXCIuLi8uLi9tb2RpZmljYXRpb25zL3R5cGVzY3JpcHQvcmVtb3ZlVHlwZUR1cGxpY2F0ZXNcIik7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRTVW5pb25UeXBlKHR5cGVBbm5vdGF0aW9ucykge1xuICBjb25zdCB0eXBlcyA9IHR5cGVBbm5vdGF0aW9ucy5tYXAodHlwZSA9PiB0eXBlLnR5cGVBbm5vdGF0aW9uKTtcbiAgY29uc3QgZmxhdHRlbmVkID0gKDAsIF9yZW1vdmVUeXBlRHVwbGljYXRlcy5kZWZhdWx0KSh0eXBlcyk7XG5cbiAgaWYgKGZsYXR0ZW5lZC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZmxhdHRlbmVkWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX2dlbmVyYXRlZC50c1VuaW9uVHlwZSkoZmxhdHRlbmVkKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2xvbmU7XG5cbnZhciBfY2xvbmVOb2RlID0gcmVxdWlyZShcIi4vY2xvbmVOb2RlXCIpO1xuXG5mdW5jdGlvbiBjbG9uZShub2RlKSB7XG4gIHJldHVybiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShub2RlLCBmYWxzZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9uZURlZXA7XG5cbnZhciBfY2xvbmVOb2RlID0gcmVxdWlyZShcIi4vY2xvbmVOb2RlXCIpO1xuXG5mdW5jdGlvbiBjbG9uZURlZXAobm9kZSkge1xuICByZXR1cm4gKDAsIF9jbG9uZU5vZGUuZGVmYXVsdCkobm9kZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9uZURlZXBXaXRob3V0TG9jO1xuXG52YXIgX2Nsb25lTm9kZSA9IHJlcXVpcmUoXCIuL2Nsb25lTm9kZVwiKTtcblxuZnVuY3Rpb24gY2xvbmVEZWVwV2l0aG91dExvYyhub2RlKSB7XG4gIHJldHVybiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShub2RlLCB0cnVlLCB0cnVlKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNsb25lTm9kZTtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWRcIik7XG5cbmNvbnN0IGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuZnVuY3Rpb24gY2xvbmVJZk5vZGUob2JqLCBkZWVwLCB3aXRob3V0TG9jKSB7XG4gIGlmIChvYmogJiYgdHlwZW9mIG9iai50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGNsb25lTm9kZShvYmosIGRlZXAsIHdpdGhvdXRMb2MpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5vZGVPckFycmF5KG9iaiwgZGVlcCwgd2l0aG91dExvYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAobm9kZSA9PiBjbG9uZUlmTm9kZShub2RlLCBkZWVwLCB3aXRob3V0TG9jKSk7XG4gIH1cblxuICByZXR1cm4gY2xvbmVJZk5vZGUob2JqLCBkZWVwLCB3aXRob3V0TG9jKTtcbn1cblxuZnVuY3Rpb24gY2xvbmVOb2RlKG5vZGUsIGRlZXAgPSB0cnVlLCB3aXRob3V0TG9jID0gZmFsc2UpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gbm9kZTtcbiAgY29uc3Qge1xuICAgIHR5cGVcbiAgfSA9IG5vZGU7XG4gIGNvbnN0IG5ld05vZGUgPSB7XG4gICAgdHlwZTogbm9kZS50eXBlXG4gIH07XG5cbiAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzSWRlbnRpZmllcikobm9kZSkpIHtcbiAgICBuZXdOb2RlLm5hbWUgPSBub2RlLm5hbWU7XG5cbiAgICBpZiAoaGFzKG5vZGUsIFwib3B0aW9uYWxcIikgJiYgdHlwZW9mIG5vZGUub3B0aW9uYWwgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBuZXdOb2RlLm9wdGlvbmFsID0gbm9kZS5vcHRpb25hbDtcbiAgICB9XG5cbiAgICBpZiAoaGFzKG5vZGUsIFwidHlwZUFubm90YXRpb25cIikpIHtcbiAgICAgIG5ld05vZGUudHlwZUFubm90YXRpb24gPSBkZWVwID8gY2xvbmVJZk5vZGVPckFycmF5KG5vZGUudHlwZUFubm90YXRpb24sIHRydWUsIHdpdGhvdXRMb2MpIDogbm9kZS50eXBlQW5ub3RhdGlvbjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWhhcyhfZGVmaW5pdGlvbnMuTk9ERV9GSUVMRFMsIHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG5vZGUgdHlwZTogXCIke3R5cGV9XCJgKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIE9iamVjdC5rZXlzKF9kZWZpbml0aW9ucy5OT0RFX0ZJRUxEU1t0eXBlXSkpIHtcbiAgICAgIGlmIChoYXMobm9kZSwgZmllbGQpKSB7XG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgbmV3Tm9kZVtmaWVsZF0gPSAoMCwgX2dlbmVyYXRlZC5pc0ZpbGUpKG5vZGUpICYmIGZpZWxkID09PSBcImNvbW1lbnRzXCIgPyBtYXliZUNsb25lQ29tbWVudHMobm9kZS5jb21tZW50cywgZGVlcCwgd2l0aG91dExvYykgOiBjbG9uZUlmTm9kZU9yQXJyYXkobm9kZVtmaWVsZF0sIHRydWUsIHdpdGhvdXRMb2MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld05vZGVbZmllbGRdID0gbm9kZVtmaWVsZF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaGFzKG5vZGUsIFwibG9jXCIpKSB7XG4gICAgaWYgKHdpdGhvdXRMb2MpIHtcbiAgICAgIG5ld05vZGUubG9jID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Tm9kZS5sb2MgPSBub2RlLmxvYztcbiAgICB9XG4gIH1cblxuICBpZiAoaGFzKG5vZGUsIFwibGVhZGluZ0NvbW1lbnRzXCIpKSB7XG4gICAgbmV3Tm9kZS5sZWFkaW5nQ29tbWVudHMgPSBtYXliZUNsb25lQ29tbWVudHMobm9kZS5sZWFkaW5nQ29tbWVudHMsIGRlZXAsIHdpdGhvdXRMb2MpO1xuICB9XG5cbiAgaWYgKGhhcyhub2RlLCBcImlubmVyQ29tbWVudHNcIikpIHtcbiAgICBuZXdOb2RlLmlubmVyQ29tbWVudHMgPSBtYXliZUNsb25lQ29tbWVudHMobm9kZS5pbm5lckNvbW1lbnRzLCBkZWVwLCB3aXRob3V0TG9jKTtcbiAgfVxuXG4gIGlmIChoYXMobm9kZSwgXCJ0cmFpbGluZ0NvbW1lbnRzXCIpKSB7XG4gICAgbmV3Tm9kZS50cmFpbGluZ0NvbW1lbnRzID0gbWF5YmVDbG9uZUNvbW1lbnRzKG5vZGUudHJhaWxpbmdDb21tZW50cywgZGVlcCwgd2l0aG91dExvYyk7XG4gIH1cblxuICBpZiAoaGFzKG5vZGUsIFwiZXh0cmFcIikpIHtcbiAgICBuZXdOb2RlLmV4dHJhID0gT2JqZWN0LmFzc2lnbih7fSwgbm9kZS5leHRyYSk7XG4gIH1cblxuICByZXR1cm4gbmV3Tm9kZTtcbn1cblxuZnVuY3Rpb24gbWF5YmVDbG9uZUNvbW1lbnRzKGNvbW1lbnRzLCBkZWVwLCB3aXRob3V0TG9jKSB7XG4gIGlmICghY29tbWVudHMgfHwgIWRlZXApIHtcbiAgICByZXR1cm4gY29tbWVudHM7XG4gIH1cblxuICByZXR1cm4gY29tbWVudHMubWFwKCh7XG4gICAgdHlwZSxcbiAgICB2YWx1ZSxcbiAgICBsb2NcbiAgfSkgPT4ge1xuICAgIGlmICh3aXRob3V0TG9jKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgbG9jOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlLFxuICAgICAgdmFsdWUsXG4gICAgICBsb2NcbiAgICB9O1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNsb25lV2l0aG91dExvYztcblxudmFyIF9jbG9uZU5vZGUgPSByZXF1aXJlKFwiLi9jbG9uZU5vZGVcIik7XG5cbmZ1bmN0aW9uIGNsb25lV2l0aG91dExvYyhub2RlKSB7XG4gIHJldHVybiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShub2RlLCBmYWxzZSwgdHJ1ZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDb21tZW50O1xuXG52YXIgX2FkZENvbW1lbnRzID0gcmVxdWlyZShcIi4vYWRkQ29tbWVudHNcIik7XG5cbmZ1bmN0aW9uIGFkZENvbW1lbnQobm9kZSwgdHlwZSwgY29udGVudCwgbGluZSkge1xuICByZXR1cm4gKDAsIF9hZGRDb21tZW50cy5kZWZhdWx0KShub2RlLCB0eXBlLCBbe1xuICAgIHR5cGU6IGxpbmUgPyBcIkNvbW1lbnRMaW5lXCIgOiBcIkNvbW1lbnRCbG9ja1wiLFxuICAgIHZhbHVlOiBjb250ZW50XG4gIH1dKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZENvbW1lbnRzO1xuXG5mdW5jdGlvbiBhZGRDb21tZW50cyhub2RlLCB0eXBlLCBjb21tZW50cykge1xuICBpZiAoIWNvbW1lbnRzIHx8ICFub2RlKSByZXR1cm4gbm9kZTtcbiAgY29uc3Qga2V5ID0gYCR7dHlwZX1Db21tZW50c2A7XG5cbiAgaWYgKG5vZGVba2V5XSkge1xuICAgIGlmICh0eXBlID09PSBcImxlYWRpbmdcIikge1xuICAgICAgbm9kZVtrZXldID0gY29tbWVudHMuY29uY2F0KG5vZGVba2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVba2V5XSA9IG5vZGVba2V5XS5jb25jYXQoY29tbWVudHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlW2tleV0gPSBjb21tZW50cztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5oZXJpdElubmVyQ29tbWVudHM7XG5cbnZhciBfaW5oZXJpdCA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmhlcml0XCIpO1xuXG5mdW5jdGlvbiBpbmhlcml0SW5uZXJDb21tZW50cyhjaGlsZCwgcGFyZW50KSB7XG4gICgwLCBfaW5oZXJpdC5kZWZhdWx0KShcImlubmVyQ29tbWVudHNcIiwgY2hpbGQsIHBhcmVudCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbmhlcml0TGVhZGluZ0NvbW1lbnRzO1xuXG52YXIgX2luaGVyaXQgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5oZXJpdFwiKTtcblxuZnVuY3Rpb24gaW5oZXJpdExlYWRpbmdDb21tZW50cyhjaGlsZCwgcGFyZW50KSB7XG4gICgwLCBfaW5oZXJpdC5kZWZhdWx0KShcImxlYWRpbmdDb21tZW50c1wiLCBjaGlsZCwgcGFyZW50KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluaGVyaXRUcmFpbGluZ0NvbW1lbnRzO1xuXG52YXIgX2luaGVyaXQgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5oZXJpdFwiKTtcblxuZnVuY3Rpb24gaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMoY2hpbGQsIHBhcmVudCkge1xuICAoMCwgX2luaGVyaXQuZGVmYXVsdCkoXCJ0cmFpbGluZ0NvbW1lbnRzXCIsIGNoaWxkLCBwYXJlbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5oZXJpdHNDb21tZW50cztcblxudmFyIF9pbmhlcml0VHJhaWxpbmdDb21tZW50cyA9IHJlcXVpcmUoXCIuL2luaGVyaXRUcmFpbGluZ0NvbW1lbnRzXCIpO1xuXG52YXIgX2luaGVyaXRMZWFkaW5nQ29tbWVudHMgPSByZXF1aXJlKFwiLi9pbmhlcml0TGVhZGluZ0NvbW1lbnRzXCIpO1xuXG52YXIgX2luaGVyaXRJbm5lckNvbW1lbnRzID0gcmVxdWlyZShcIi4vaW5oZXJpdElubmVyQ29tbWVudHNcIik7XG5cbmZ1bmN0aW9uIGluaGVyaXRzQ29tbWVudHMoY2hpbGQsIHBhcmVudCkge1xuICAoMCwgX2luaGVyaXRUcmFpbGluZ0NvbW1lbnRzLmRlZmF1bHQpKGNoaWxkLCBwYXJlbnQpO1xuICAoMCwgX2luaGVyaXRMZWFkaW5nQ29tbWVudHMuZGVmYXVsdCkoY2hpbGQsIHBhcmVudCk7XG4gICgwLCBfaW5oZXJpdElubmVyQ29tbWVudHMuZGVmYXVsdCkoY2hpbGQsIHBhcmVudCk7XG4gIHJldHVybiBjaGlsZDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZUNvbW1lbnRzO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKG5vZGUpIHtcbiAgX2NvbnN0YW50cy5DT01NRU5UX0tFWVMuZm9yRWFjaChrZXkgPT4ge1xuICAgIG5vZGVba2V5XSA9IG51bGw7XG4gIH0pO1xuXG4gIHJldHVybiBub2RlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UU0JBU0VUWVBFX1RZUEVTID0gZXhwb3J0cy5UU1RZUEVfVFlQRVMgPSBleHBvcnRzLlRTVFlQRUVMRU1FTlRfVFlQRVMgPSBleHBvcnRzLkpTWF9UWVBFUyA9IGV4cG9ydHMuRU5VTU1FTUJFUl9UWVBFUyA9IGV4cG9ydHMuRU5VTUJPRFlfVFlQRVMgPSBleHBvcnRzLkZMT1dQUkVESUNBVEVfVFlQRVMgPSBleHBvcnRzLkZMT1dERUNMQVJBVElPTl9UWVBFUyA9IGV4cG9ydHMuRkxPV0JBU0VBTk5PVEFUSU9OX1RZUEVTID0gZXhwb3J0cy5GTE9XVFlQRV9UWVBFUyA9IGV4cG9ydHMuRkxPV19UWVBFUyA9IGV4cG9ydHMuUFJJVkFURV9UWVBFUyA9IGV4cG9ydHMuTU9EVUxFU1BFQ0lGSUVSX1RZUEVTID0gZXhwb3J0cy5FWFBPUlRERUNMQVJBVElPTl9UWVBFUyA9IGV4cG9ydHMuTU9EVUxFREVDTEFSQVRJT05fVFlQRVMgPSBleHBvcnRzLkNMQVNTX1RZUEVTID0gZXhwb3J0cy5QQVRURVJOX1RZUEVTID0gZXhwb3J0cy5VTkFSWUxJS0VfVFlQRVMgPSBleHBvcnRzLlBST1BFUlRZX1RZUEVTID0gZXhwb3J0cy5PQkpFQ1RNRU1CRVJfVFlQRVMgPSBleHBvcnRzLk1FVEhPRF9UWVBFUyA9IGV4cG9ydHMuVVNFUldISVRFU1BBQ0FCTEVfVFlQRVMgPSBleHBvcnRzLklNTVVUQUJMRV9UWVBFUyA9IGV4cG9ydHMuTElURVJBTF9UWVBFUyA9IGV4cG9ydHMuVFNFTlRJVFlOQU1FX1RZUEVTID0gZXhwb3J0cy5MVkFMX1RZUEVTID0gZXhwb3J0cy5QQVRURVJOTElLRV9UWVBFUyA9IGV4cG9ydHMuREVDTEFSQVRJT05fVFlQRVMgPSBleHBvcnRzLlBVUkVJU0hfVFlQRVMgPSBleHBvcnRzLkZVTkNUSU9OUEFSRU5UX1RZUEVTID0gZXhwb3J0cy5GVU5DVElPTl9UWVBFUyA9IGV4cG9ydHMuRk9SWFNUQVRFTUVOVF9UWVBFUyA9IGV4cG9ydHMuRk9SX1RZUEVTID0gZXhwb3J0cy5FWFBSRVNTSU9OV1JBUFBFUl9UWVBFUyA9IGV4cG9ydHMuV0hJTEVfVFlQRVMgPSBleHBvcnRzLkxPT1BfVFlQRVMgPSBleHBvcnRzLkNPTkRJVElPTkFMX1RZUEVTID0gZXhwb3J0cy5DT01QTEVUSU9OU1RBVEVNRU5UX1RZUEVTID0gZXhwb3J0cy5URVJNSU5BVE9STEVTU19UWVBFUyA9IGV4cG9ydHMuU1RBVEVNRU5UX1RZUEVTID0gZXhwb3J0cy5CTE9DS19UWVBFUyA9IGV4cG9ydHMuQkxPQ0tQQVJFTlRfVFlQRVMgPSBleHBvcnRzLlNDT1BBQkxFX1RZUEVTID0gZXhwb3J0cy5CSU5BUllfVFlQRVMgPSBleHBvcnRzLkVYUFJFU1NJT05fVFlQRVMgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5pdGlvbnMgPSByZXF1aXJlKFwiLi4vLi4vZGVmaW5pdGlvbnNcIik7XG5cbmNvbnN0IEVYUFJFU1NJT05fVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiRXhwcmVzc2lvblwiXTtcbmV4cG9ydHMuRVhQUkVTU0lPTl9UWVBFUyA9IEVYUFJFU1NJT05fVFlQRVM7XG5jb25zdCBCSU5BUllfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiQmluYXJ5XCJdO1xuZXhwb3J0cy5CSU5BUllfVFlQRVMgPSBCSU5BUllfVFlQRVM7XG5jb25zdCBTQ09QQUJMRV9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJTY29wYWJsZVwiXTtcbmV4cG9ydHMuU0NPUEFCTEVfVFlQRVMgPSBTQ09QQUJMRV9UWVBFUztcbmNvbnN0IEJMT0NLUEFSRU5UX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkJsb2NrUGFyZW50XCJdO1xuZXhwb3J0cy5CTE9DS1BBUkVOVF9UWVBFUyA9IEJMT0NLUEFSRU5UX1RZUEVTO1xuY29uc3QgQkxPQ0tfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiQmxvY2tcIl07XG5leHBvcnRzLkJMT0NLX1RZUEVTID0gQkxPQ0tfVFlQRVM7XG5jb25zdCBTVEFURU1FTlRfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiU3RhdGVtZW50XCJdO1xuZXhwb3J0cy5TVEFURU1FTlRfVFlQRVMgPSBTVEFURU1FTlRfVFlQRVM7XG5jb25zdCBURVJNSU5BVE9STEVTU19UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJUZXJtaW5hdG9ybGVzc1wiXTtcbmV4cG9ydHMuVEVSTUlOQVRPUkxFU1NfVFlQRVMgPSBURVJNSU5BVE9STEVTU19UWVBFUztcbmNvbnN0IENPTVBMRVRJT05TVEFURU1FTlRfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiQ29tcGxldGlvblN0YXRlbWVudFwiXTtcbmV4cG9ydHMuQ09NUExFVElPTlNUQVRFTUVOVF9UWVBFUyA9IENPTVBMRVRJT05TVEFURU1FTlRfVFlQRVM7XG5jb25zdCBDT05ESVRJT05BTF9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJDb25kaXRpb25hbFwiXTtcbmV4cG9ydHMuQ09ORElUSU9OQUxfVFlQRVMgPSBDT05ESVRJT05BTF9UWVBFUztcbmNvbnN0IExPT1BfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiTG9vcFwiXTtcbmV4cG9ydHMuTE9PUF9UWVBFUyA9IExPT1BfVFlQRVM7XG5jb25zdCBXSElMRV9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJXaGlsZVwiXTtcbmV4cG9ydHMuV0hJTEVfVFlQRVMgPSBXSElMRV9UWVBFUztcbmNvbnN0IEVYUFJFU1NJT05XUkFQUEVSX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkV4cHJlc3Npb25XcmFwcGVyXCJdO1xuZXhwb3J0cy5FWFBSRVNTSU9OV1JBUFBFUl9UWVBFUyA9IEVYUFJFU1NJT05XUkFQUEVSX1RZUEVTO1xuY29uc3QgRk9SX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkZvclwiXTtcbmV4cG9ydHMuRk9SX1RZUEVTID0gRk9SX1RZUEVTO1xuY29uc3QgRk9SWFNUQVRFTUVOVF9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJGb3JYU3RhdGVtZW50XCJdO1xuZXhwb3J0cy5GT1JYU1RBVEVNRU5UX1RZUEVTID0gRk9SWFNUQVRFTUVOVF9UWVBFUztcbmNvbnN0IEZVTkNUSU9OX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkZ1bmN0aW9uXCJdO1xuZXhwb3J0cy5GVU5DVElPTl9UWVBFUyA9IEZVTkNUSU9OX1RZUEVTO1xuY29uc3QgRlVOQ1RJT05QQVJFTlRfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiRnVuY3Rpb25QYXJlbnRcIl07XG5leHBvcnRzLkZVTkNUSU9OUEFSRU5UX1RZUEVTID0gRlVOQ1RJT05QQVJFTlRfVFlQRVM7XG5jb25zdCBQVVJFSVNIX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIlB1cmVpc2hcIl07XG5leHBvcnRzLlBVUkVJU0hfVFlQRVMgPSBQVVJFSVNIX1RZUEVTO1xuY29uc3QgREVDTEFSQVRJT05fVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiRGVjbGFyYXRpb25cIl07XG5leHBvcnRzLkRFQ0xBUkFUSU9OX1RZUEVTID0gREVDTEFSQVRJT05fVFlQRVM7XG5jb25zdCBQQVRURVJOTElLRV9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJQYXR0ZXJuTGlrZVwiXTtcbmV4cG9ydHMuUEFUVEVSTkxJS0VfVFlQRVMgPSBQQVRURVJOTElLRV9UWVBFUztcbmNvbnN0IExWQUxfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiTFZhbFwiXTtcbmV4cG9ydHMuTFZBTF9UWVBFUyA9IExWQUxfVFlQRVM7XG5jb25zdCBUU0VOVElUWU5BTUVfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiVFNFbnRpdHlOYW1lXCJdO1xuZXhwb3J0cy5UU0VOVElUWU5BTUVfVFlQRVMgPSBUU0VOVElUWU5BTUVfVFlQRVM7XG5jb25zdCBMSVRFUkFMX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkxpdGVyYWxcIl07XG5leHBvcnRzLkxJVEVSQUxfVFlQRVMgPSBMSVRFUkFMX1RZUEVTO1xuY29uc3QgSU1NVVRBQkxFX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkltbXV0YWJsZVwiXTtcbmV4cG9ydHMuSU1NVVRBQkxFX1RZUEVTID0gSU1NVVRBQkxFX1RZUEVTO1xuY29uc3QgVVNFUldISVRFU1BBQ0FCTEVfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiVXNlcldoaXRlc3BhY2FibGVcIl07XG5leHBvcnRzLlVTRVJXSElURVNQQUNBQkxFX1RZUEVTID0gVVNFUldISVRFU1BBQ0FCTEVfVFlQRVM7XG5jb25zdCBNRVRIT0RfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiTWV0aG9kXCJdO1xuZXhwb3J0cy5NRVRIT0RfVFlQRVMgPSBNRVRIT0RfVFlQRVM7XG5jb25zdCBPQkpFQ1RNRU1CRVJfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiT2JqZWN0TWVtYmVyXCJdO1xuZXhwb3J0cy5PQkpFQ1RNRU1CRVJfVFlQRVMgPSBPQkpFQ1RNRU1CRVJfVFlQRVM7XG5jb25zdCBQUk9QRVJUWV9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJQcm9wZXJ0eVwiXTtcbmV4cG9ydHMuUFJPUEVSVFlfVFlQRVMgPSBQUk9QRVJUWV9UWVBFUztcbmNvbnN0IFVOQVJZTElLRV9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJVbmFyeUxpa2VcIl07XG5leHBvcnRzLlVOQVJZTElLRV9UWVBFUyA9IFVOQVJZTElLRV9UWVBFUztcbmNvbnN0IFBBVFRFUk5fVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiUGF0dGVyblwiXTtcbmV4cG9ydHMuUEFUVEVSTl9UWVBFUyA9IFBBVFRFUk5fVFlQRVM7XG5jb25zdCBDTEFTU19UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJDbGFzc1wiXTtcbmV4cG9ydHMuQ0xBU1NfVFlQRVMgPSBDTEFTU19UWVBFUztcbmNvbnN0IE1PRFVMRURFQ0xBUkFUSU9OX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIk1vZHVsZURlY2xhcmF0aW9uXCJdO1xuZXhwb3J0cy5NT0RVTEVERUNMQVJBVElPTl9UWVBFUyA9IE1PRFVMRURFQ0xBUkFUSU9OX1RZUEVTO1xuY29uc3QgRVhQT1JUREVDTEFSQVRJT05fVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiRXhwb3J0RGVjbGFyYXRpb25cIl07XG5leHBvcnRzLkVYUE9SVERFQ0xBUkFUSU9OX1RZUEVTID0gRVhQT1JUREVDTEFSQVRJT05fVFlQRVM7XG5jb25zdCBNT0RVTEVTUEVDSUZJRVJfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiTW9kdWxlU3BlY2lmaWVyXCJdO1xuZXhwb3J0cy5NT0RVTEVTUEVDSUZJRVJfVFlQRVMgPSBNT0RVTEVTUEVDSUZJRVJfVFlQRVM7XG5jb25zdCBQUklWQVRFX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIlByaXZhdGVcIl07XG5leHBvcnRzLlBSSVZBVEVfVFlQRVMgPSBQUklWQVRFX1RZUEVTO1xuY29uc3QgRkxPV19UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJGbG93XCJdO1xuZXhwb3J0cy5GTE9XX1RZUEVTID0gRkxPV19UWVBFUztcbmNvbnN0IEZMT1dUWVBFX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkZsb3dUeXBlXCJdO1xuZXhwb3J0cy5GTE9XVFlQRV9UWVBFUyA9IEZMT1dUWVBFX1RZUEVTO1xuY29uc3QgRkxPV0JBU0VBTk5PVEFUSU9OX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkZsb3dCYXNlQW5ub3RhdGlvblwiXTtcbmV4cG9ydHMuRkxPV0JBU0VBTk5PVEFUSU9OX1RZUEVTID0gRkxPV0JBU0VBTk5PVEFUSU9OX1RZUEVTO1xuY29uc3QgRkxPV0RFQ0xBUkFUSU9OX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkZsb3dEZWNsYXJhdGlvblwiXTtcbmV4cG9ydHMuRkxPV0RFQ0xBUkFUSU9OX1RZUEVTID0gRkxPV0RFQ0xBUkFUSU9OX1RZUEVTO1xuY29uc3QgRkxPV1BSRURJQ0FURV9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJGbG93UHJlZGljYXRlXCJdO1xuZXhwb3J0cy5GTE9XUFJFRElDQVRFX1RZUEVTID0gRkxPV1BSRURJQ0FURV9UWVBFUztcbmNvbnN0IEVOVU1CT0RZX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIkVudW1Cb2R5XCJdO1xuZXhwb3J0cy5FTlVNQk9EWV9UWVBFUyA9IEVOVU1CT0RZX1RZUEVTO1xuY29uc3QgRU5VTU1FTUJFUl9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJFbnVtTWVtYmVyXCJdO1xuZXhwb3J0cy5FTlVNTUVNQkVSX1RZUEVTID0gRU5VTU1FTUJFUl9UWVBFUztcbmNvbnN0IEpTWF9UWVBFUyA9IF9kZWZpbml0aW9ucy5GTElQUEVEX0FMSUFTX0tFWVNbXCJKU1hcIl07XG5leHBvcnRzLkpTWF9UWVBFUyA9IEpTWF9UWVBFUztcbmNvbnN0IFRTVFlQRUVMRU1FTlRfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiVFNUeXBlRWxlbWVudFwiXTtcbmV4cG9ydHMuVFNUWVBFRUxFTUVOVF9UWVBFUyA9IFRTVFlQRUVMRU1FTlRfVFlQRVM7XG5jb25zdCBUU1RZUEVfVFlQRVMgPSBfZGVmaW5pdGlvbnMuRkxJUFBFRF9BTElBU19LRVlTW1wiVFNUeXBlXCJdO1xuZXhwb3J0cy5UU1RZUEVfVFlQRVMgPSBUU1RZUEVfVFlQRVM7XG5jb25zdCBUU0JBU0VUWVBFX1RZUEVTID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1tcIlRTQmFzZVR5cGVcIl07XG5leHBvcnRzLlRTQkFTRVRZUEVfVFlQRVMgPSBUU0JBU0VUWVBFX1RZUEVTOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5OT1RfTE9DQUxfQklORElORyA9IGV4cG9ydHMuQkxPQ0tfU0NPUEVEX1NZTUJPTCA9IGV4cG9ydHMuSU5IRVJJVF9LRVlTID0gZXhwb3J0cy5VTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLlNUUklOR19VTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLk5VTUJFUl9VTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLkJPT0xFQU5fVU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5BU1NJR05NRU5UX09QRVJBVE9SUyA9IGV4cG9ydHMuQklOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuTlVNQkVSX0JJTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLkJPT0xFQU5fQklOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuQ09NUEFSSVNPTl9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5FUVVBTElUWV9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5CT09MRUFOX05VTUJFUl9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5VUERBVEVfT1BFUkFUT1JTID0gZXhwb3J0cy5MT0dJQ0FMX09QRVJBVE9SUyA9IGV4cG9ydHMuQ09NTUVOVF9LRVlTID0gZXhwb3J0cy5GT1JfSU5JVF9LRVlTID0gZXhwb3J0cy5GTEFUVEVOQUJMRV9LRVlTID0gZXhwb3J0cy5TVEFURU1FTlRfT1JfQkxPQ0tfS0VZUyA9IHZvaWQgMDtcbmNvbnN0IFNUQVRFTUVOVF9PUl9CTE9DS19LRVlTID0gW1wiY29uc2VxdWVudFwiLCBcImJvZHlcIiwgXCJhbHRlcm5hdGVcIl07XG5leHBvcnRzLlNUQVRFTUVOVF9PUl9CTE9DS19LRVlTID0gU1RBVEVNRU5UX09SX0JMT0NLX0tFWVM7XG5jb25zdCBGTEFUVEVOQUJMRV9LRVlTID0gW1wiYm9keVwiLCBcImV4cHJlc3Npb25zXCJdO1xuZXhwb3J0cy5GTEFUVEVOQUJMRV9LRVlTID0gRkxBVFRFTkFCTEVfS0VZUztcbmNvbnN0IEZPUl9JTklUX0tFWVMgPSBbXCJsZWZ0XCIsIFwiaW5pdFwiXTtcbmV4cG9ydHMuRk9SX0lOSVRfS0VZUyA9IEZPUl9JTklUX0tFWVM7XG5jb25zdCBDT01NRU5UX0tFWVMgPSBbXCJsZWFkaW5nQ29tbWVudHNcIiwgXCJ0cmFpbGluZ0NvbW1lbnRzXCIsIFwiaW5uZXJDb21tZW50c1wiXTtcbmV4cG9ydHMuQ09NTUVOVF9LRVlTID0gQ09NTUVOVF9LRVlTO1xuY29uc3QgTE9HSUNBTF9PUEVSQVRPUlMgPSBbXCJ8fFwiLCBcIiYmXCIsIFwiPz9cIl07XG5leHBvcnRzLkxPR0lDQUxfT1BFUkFUT1JTID0gTE9HSUNBTF9PUEVSQVRPUlM7XG5jb25zdCBVUERBVEVfT1BFUkFUT1JTID0gW1wiKytcIiwgXCItLVwiXTtcbmV4cG9ydHMuVVBEQVRFX09QRVJBVE9SUyA9IFVQREFURV9PUEVSQVRPUlM7XG5jb25zdCBCT09MRUFOX05VTUJFUl9CSU5BUllfT1BFUkFUT1JTID0gW1wiPlwiLCBcIjxcIiwgXCI+PVwiLCBcIjw9XCJdO1xuZXhwb3J0cy5CT09MRUFOX05VTUJFUl9CSU5BUllfT1BFUkFUT1JTID0gQk9PTEVBTl9OVU1CRVJfQklOQVJZX09QRVJBVE9SUztcbmNvbnN0IEVRVUFMSVRZX0JJTkFSWV9PUEVSQVRPUlMgPSBbXCI9PVwiLCBcIj09PVwiLCBcIiE9XCIsIFwiIT09XCJdO1xuZXhwb3J0cy5FUVVBTElUWV9CSU5BUllfT1BFUkFUT1JTID0gRVFVQUxJVFlfQklOQVJZX09QRVJBVE9SUztcbmNvbnN0IENPTVBBUklTT05fQklOQVJZX09QRVJBVE9SUyA9IFsuLi5FUVVBTElUWV9CSU5BUllfT1BFUkFUT1JTLCBcImluXCIsIFwiaW5zdGFuY2VvZlwiXTtcbmV4cG9ydHMuQ09NUEFSSVNPTl9CSU5BUllfT1BFUkFUT1JTID0gQ09NUEFSSVNPTl9CSU5BUllfT1BFUkFUT1JTO1xuY29uc3QgQk9PTEVBTl9CSU5BUllfT1BFUkFUT1JTID0gWy4uLkNPTVBBUklTT05fQklOQVJZX09QRVJBVE9SUywgLi4uQk9PTEVBTl9OVU1CRVJfQklOQVJZX09QRVJBVE9SU107XG5leHBvcnRzLkJPT0xFQU5fQklOQVJZX09QRVJBVE9SUyA9IEJPT0xFQU5fQklOQVJZX09QRVJBVE9SUztcbmNvbnN0IE5VTUJFUl9CSU5BUllfT1BFUkFUT1JTID0gW1wiLVwiLCBcIi9cIiwgXCIlXCIsIFwiKlwiLCBcIioqXCIsIFwiJlwiLCBcInxcIiwgXCI+PlwiLCBcIj4+PlwiLCBcIjw8XCIsIFwiXlwiXTtcbmV4cG9ydHMuTlVNQkVSX0JJTkFSWV9PUEVSQVRPUlMgPSBOVU1CRVJfQklOQVJZX09QRVJBVE9SUztcbmNvbnN0IEJJTkFSWV9PUEVSQVRPUlMgPSBbXCIrXCIsIC4uLk5VTUJFUl9CSU5BUllfT1BFUkFUT1JTLCAuLi5CT09MRUFOX0JJTkFSWV9PUEVSQVRPUlNdO1xuZXhwb3J0cy5CSU5BUllfT1BFUkFUT1JTID0gQklOQVJZX09QRVJBVE9SUztcbmNvbnN0IEFTU0lHTk1FTlRfT1BFUkFUT1JTID0gW1wiPVwiLCBcIis9XCIsIC4uLk5VTUJFUl9CSU5BUllfT1BFUkFUT1JTLm1hcChvcCA9PiBvcCArIFwiPVwiKSwgLi4uTE9HSUNBTF9PUEVSQVRPUlMubWFwKG9wID0+IG9wICsgXCI9XCIpXTtcbmV4cG9ydHMuQVNTSUdOTUVOVF9PUEVSQVRPUlMgPSBBU1NJR05NRU5UX09QRVJBVE9SUztcbmNvbnN0IEJPT0xFQU5fVU5BUllfT1BFUkFUT1JTID0gW1wiZGVsZXRlXCIsIFwiIVwiXTtcbmV4cG9ydHMuQk9PTEVBTl9VTkFSWV9PUEVSQVRPUlMgPSBCT09MRUFOX1VOQVJZX09QRVJBVE9SUztcbmNvbnN0IE5VTUJFUl9VTkFSWV9PUEVSQVRPUlMgPSBbXCIrXCIsIFwiLVwiLCBcIn5cIl07XG5leHBvcnRzLk5VTUJFUl9VTkFSWV9PUEVSQVRPUlMgPSBOVU1CRVJfVU5BUllfT1BFUkFUT1JTO1xuY29uc3QgU1RSSU5HX1VOQVJZX09QRVJBVE9SUyA9IFtcInR5cGVvZlwiXTtcbmV4cG9ydHMuU1RSSU5HX1VOQVJZX09QRVJBVE9SUyA9IFNUUklOR19VTkFSWV9PUEVSQVRPUlM7XG5jb25zdCBVTkFSWV9PUEVSQVRPUlMgPSBbXCJ2b2lkXCIsIFwidGhyb3dcIiwgLi4uQk9PTEVBTl9VTkFSWV9PUEVSQVRPUlMsIC4uLk5VTUJFUl9VTkFSWV9PUEVSQVRPUlMsIC4uLlNUUklOR19VTkFSWV9PUEVSQVRPUlNdO1xuZXhwb3J0cy5VTkFSWV9PUEVSQVRPUlMgPSBVTkFSWV9PUEVSQVRPUlM7XG5jb25zdCBJTkhFUklUX0tFWVMgPSB7XG4gIG9wdGlvbmFsOiBbXCJ0eXBlQW5ub3RhdGlvblwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwicmV0dXJuVHlwZVwiXSxcbiAgZm9yY2U6IFtcInN0YXJ0XCIsIFwibG9jXCIsIFwiZW5kXCJdXG59O1xuZXhwb3J0cy5JTkhFUklUX0tFWVMgPSBJTkhFUklUX0tFWVM7XG5jb25zdCBCTE9DS19TQ09QRURfU1lNQk9MID0gU3ltYm9sLmZvcihcInZhciB1c2VkIHRvIGJlIGJsb2NrIHNjb3BlZFwiKTtcbmV4cG9ydHMuQkxPQ0tfU0NPUEVEX1NZTUJPTCA9IEJMT0NLX1NDT1BFRF9TWU1CT0w7XG5jb25zdCBOT1RfTE9DQUxfQklORElORyA9IFN5bWJvbC5mb3IoXCJzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgYSBsb2NhbCBiaW5kaW5nXCIpO1xuZXhwb3J0cy5OT1RfTE9DQUxfQklORElORyA9IE5PVF9MT0NBTF9CSU5ESU5HOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZW5zdXJlQmxvY2s7XG5cbnZhciBfdG9CbG9jayA9IHJlcXVpcmUoXCIuL3RvQmxvY2tcIik7XG5cbmZ1bmN0aW9uIGVuc3VyZUJsb2NrKG5vZGUsIGtleSA9IFwiYm9keVwiKSB7XG4gIHJldHVybiBub2RlW2tleV0gPSAoMCwgX3RvQmxvY2suZGVmYXVsdCkobm9kZVtrZXldLCBub2RlKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdhdGhlclNlcXVlbmNlRXhwcmVzc2lvbnM7XG5cbnZhciBfZ2V0QmluZGluZ0lkZW50aWZpZXJzID0gcmVxdWlyZShcIi4uL3JldHJpZXZlcnMvZ2V0QmluZGluZ0lkZW50aWZpZXJzXCIpO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2dlbmVyYXRlZFwiKTtcblxudmFyIF9nZW5lcmF0ZWQyID0gcmVxdWlyZShcIi4uL2J1aWxkZXJzL2dlbmVyYXRlZFwiKTtcblxudmFyIF9jbG9uZU5vZGUgPSByZXF1aXJlKFwiLi4vY2xvbmUvY2xvbmVOb2RlXCIpO1xuXG5mdW5jdGlvbiBnYXRoZXJTZXF1ZW5jZUV4cHJlc3Npb25zKG5vZGVzLCBzY29wZSwgZGVjbGFycykge1xuICBjb25zdCBleHBycyA9IFtdO1xuICBsZXQgZW5zdXJlTGFzdFVuZGVmaW5lZCA9IHRydWU7XG5cbiAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgaWYgKCEoMCwgX2dlbmVyYXRlZC5pc0VtcHR5U3RhdGVtZW50KShub2RlKSkge1xuICAgICAgZW5zdXJlTGFzdFVuZGVmaW5lZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc0V4cHJlc3Npb24pKG5vZGUpKSB7XG4gICAgICBleHBycy5wdXNoKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNFeHByZXNzaW9uU3RhdGVtZW50KShub2RlKSkge1xuICAgICAgZXhwcnMucHVzaChub2RlLmV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNWYXJpYWJsZURlY2xhcmF0aW9uKShub2RlKSkge1xuICAgICAgaWYgKG5vZGUua2luZCAhPT0gXCJ2YXJcIikgcmV0dXJuO1xuXG4gICAgICBmb3IgKGNvbnN0IGRlY2xhciBvZiBub2RlLmRlY2xhcmF0aW9ucykge1xuICAgICAgICBjb25zdCBiaW5kaW5ncyA9ICgwLCBfZ2V0QmluZGluZ0lkZW50aWZpZXJzLmRlZmF1bHQpKGRlY2xhcik7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoYmluZGluZ3MpKSB7XG4gICAgICAgICAgZGVjbGFycy5wdXNoKHtcbiAgICAgICAgICAgIGtpbmQ6IG5vZGUua2luZCxcbiAgICAgICAgICAgIGlkOiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShiaW5kaW5nc1trZXldKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlY2xhci5pbml0KSB7XG4gICAgICAgICAgZXhwcnMucHVzaCgoMCwgX2dlbmVyYXRlZDIuYXNzaWdubWVudEV4cHJlc3Npb24pKFwiPVwiLCBkZWNsYXIuaWQsIGRlY2xhci5pbml0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZW5zdXJlTGFzdFVuZGVmaW5lZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICgoMCwgX2dlbmVyYXRlZC5pc0lmU3RhdGVtZW50KShub2RlKSkge1xuICAgICAgY29uc3QgY29uc2VxdWVudCA9IG5vZGUuY29uc2VxdWVudCA/IGdhdGhlclNlcXVlbmNlRXhwcmVzc2lvbnMoW25vZGUuY29uc2VxdWVudF0sIHNjb3BlLCBkZWNsYXJzKSA6IHNjb3BlLmJ1aWxkVW5kZWZpbmVkTm9kZSgpO1xuICAgICAgY29uc3QgYWx0ZXJuYXRlID0gbm9kZS5hbHRlcm5hdGUgPyBnYXRoZXJTZXF1ZW5jZUV4cHJlc3Npb25zKFtub2RlLmFsdGVybmF0ZV0sIHNjb3BlLCBkZWNsYXJzKSA6IHNjb3BlLmJ1aWxkVW5kZWZpbmVkTm9kZSgpO1xuICAgICAgaWYgKCFjb25zZXF1ZW50IHx8ICFhbHRlcm5hdGUpIHJldHVybjtcbiAgICAgIGV4cHJzLnB1c2goKDAsIF9nZW5lcmF0ZWQyLmNvbmRpdGlvbmFsRXhwcmVzc2lvbikobm9kZS50ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpKTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzQmxvY2tTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgICBjb25zdCBib2R5ID0gZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucyhub2RlLmJvZHksIHNjb3BlLCBkZWNsYXJzKTtcbiAgICAgIGlmICghYm9keSkgcmV0dXJuO1xuICAgICAgZXhwcnMucHVzaChib2R5KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzRW1wdHlTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgICBpZiAobm9kZXMuaW5kZXhPZihub2RlKSA9PT0gMCkge1xuICAgICAgICBlbnN1cmVMYXN0VW5kZWZpbmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbnN1cmVMYXN0VW5kZWZpbmVkKSB7XG4gICAgZXhwcnMucHVzaChzY29wZS5idWlsZFVuZGVmaW5lZE5vZGUoKSk7XG4gIH1cblxuICBpZiAoZXhwcnMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGV4cHJzWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX2dlbmVyYXRlZDIuc2VxdWVuY2VFeHByZXNzaW9uKShleHBycyk7XG4gIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQmluZGluZ0lkZW50aWZpZXJOYW1lO1xuXG52YXIgX3RvSWRlbnRpZmllciA9IHJlcXVpcmUoXCIuL3RvSWRlbnRpZmllclwiKTtcblxuZnVuY3Rpb24gdG9CaW5kaW5nSWRlbnRpZmllck5hbWUobmFtZSkge1xuICBuYW1lID0gKDAsIF90b0lkZW50aWZpZXIuZGVmYXVsdCkobmFtZSk7XG4gIGlmIChuYW1lID09PSBcImV2YWxcIiB8fCBuYW1lID09PSBcImFyZ3VtZW50c1wiKSBuYW1lID0gXCJfXCIgKyBuYW1lO1xuICByZXR1cm4gbmFtZTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQmxvY2s7XG5cbnZhciBfZ2VuZXJhdGVkID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkXCIpO1xuXG52YXIgX2dlbmVyYXRlZDIgPSByZXF1aXJlKFwiLi4vYnVpbGRlcnMvZ2VuZXJhdGVkXCIpO1xuXG5mdW5jdGlvbiB0b0Jsb2NrKG5vZGUsIHBhcmVudCkge1xuICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNCbG9ja1N0YXRlbWVudCkobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGxldCBibG9ja05vZGVzID0gW107XG5cbiAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzRW1wdHlTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgYmxvY2tOb2RlcyA9IFtdO1xuICB9IGVsc2Uge1xuICAgIGlmICghKDAsIF9nZW5lcmF0ZWQuaXNTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNGdW5jdGlvbikocGFyZW50KSkge1xuICAgICAgICBub2RlID0gKDAsIF9nZW5lcmF0ZWQyLnJldHVyblN0YXRlbWVudCkobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0gKDAsIF9nZW5lcmF0ZWQyLmV4cHJlc3Npb25TdGF0ZW1lbnQpKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGJsb2NrTm9kZXMgPSBbbm9kZV07XG4gIH1cblxuICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQyLmJsb2NrU3RhdGVtZW50KShibG9ja05vZGVzKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQ29tcHV0ZWRLZXk7XG5cbnZhciBfZ2VuZXJhdGVkID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkXCIpO1xuXG52YXIgX2dlbmVyYXRlZDIgPSByZXF1aXJlKFwiLi4vYnVpbGRlcnMvZ2VuZXJhdGVkXCIpO1xuXG5mdW5jdGlvbiB0b0NvbXB1dGVkS2V5KG5vZGUsIGtleSA9IG5vZGUua2V5IHx8IG5vZGUucHJvcGVydHkpIHtcbiAgaWYgKCFub2RlLmNvbXB1dGVkICYmICgwLCBfZ2VuZXJhdGVkLmlzSWRlbnRpZmllcikoa2V5KSkga2V5ID0gKDAsIF9nZW5lcmF0ZWQyLnN0cmluZ0xpdGVyYWwpKGtleS5uYW1lKTtcbiAgcmV0dXJuIGtleTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWRcIik7XG5cbnZhciBfZGVmYXVsdCA9IHRvRXhwcmVzc2lvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiB0b0V4cHJlc3Npb24obm9kZSkge1xuICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNFeHByZXNzaW9uU3RhdGVtZW50KShub2RlKSkge1xuICAgIG5vZGUgPSBub2RlLmV4cHJlc3Npb247XG4gIH1cblxuICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNFeHByZXNzaW9uKShub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzQ2xhc3MpKG5vZGUpKSB7XG4gICAgbm9kZS50eXBlID0gXCJDbGFzc0V4cHJlc3Npb25cIjtcbiAgfSBlbHNlIGlmICgoMCwgX2dlbmVyYXRlZC5pc0Z1bmN0aW9uKShub2RlKSkge1xuICAgIG5vZGUudHlwZSA9IFwiRnVuY3Rpb25FeHByZXNzaW9uXCI7XG4gIH1cblxuICBpZiAoISgwLCBfZ2VuZXJhdGVkLmlzRXhwcmVzc2lvbikobm9kZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCB0dXJuICR7bm9kZS50eXBlfSB0byBhbiBleHByZXNzaW9uYCk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvSWRlbnRpZmllcjtcblxudmFyIF9pc1ZhbGlkSWRlbnRpZmllciA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2lzVmFsaWRJZGVudGlmaWVyXCIpO1xuXG52YXIgX2hlbHBlclZhbGlkYXRvcklkZW50aWZpZXIgPSByZXF1aXJlKFwiQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiKTtcblxuZnVuY3Rpb24gdG9JZGVudGlmaWVyKGlucHV0KSB7XG4gIGlucHV0ID0gaW5wdXQgKyBcIlwiO1xuICBsZXQgbmFtZSA9IFwiXCI7XG5cbiAgZm9yIChjb25zdCBjIG9mIGlucHV0KSB7XG4gICAgbmFtZSArPSAoMCwgX2hlbHBlclZhbGlkYXRvcklkZW50aWZpZXIuaXNJZGVudGlmaWVyQ2hhcikoYy5jb2RlUG9pbnRBdCgwKSkgPyBjIDogXCItXCI7XG4gIH1cblxuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9eWy0wLTldKy8sIFwiXCIpO1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bLVxcc10rKC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGMpIHtcbiAgICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6IFwiXCI7XG4gIH0pO1xuXG4gIGlmICghKDAsIF9pc1ZhbGlkSWRlbnRpZmllci5kZWZhdWx0KShuYW1lKSkge1xuICAgIG5hbWUgPSBgXyR7bmFtZX1gO1xuICB9XG5cbiAgcmV0dXJuIG5hbWUgfHwgXCJfXCI7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0tleUFsaWFzO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2dlbmVyYXRlZFwiKTtcblxudmFyIF9jbG9uZU5vZGUgPSByZXF1aXJlKFwiLi4vY2xvbmUvY2xvbmVOb2RlXCIpO1xuXG52YXIgX3JlbW92ZVByb3BlcnRpZXNEZWVwID0gcmVxdWlyZShcIi4uL21vZGlmaWNhdGlvbnMvcmVtb3ZlUHJvcGVydGllc0RlZXBcIik7XG5cbmZ1bmN0aW9uIHRvS2V5QWxpYXMobm9kZSwga2V5ID0gbm9kZS5rZXkpIHtcbiAgbGV0IGFsaWFzO1xuXG4gIGlmIChub2RlLmtpbmQgPT09IFwibWV0aG9kXCIpIHtcbiAgICByZXR1cm4gdG9LZXlBbGlhcy5pbmNyZW1lbnQoKSArIFwiXCI7XG4gIH0gZWxzZSBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNJZGVudGlmaWVyKShrZXkpKSB7XG4gICAgYWxpYXMgPSBrZXkubmFtZTtcbiAgfSBlbHNlIGlmICgoMCwgX2dlbmVyYXRlZC5pc1N0cmluZ0xpdGVyYWwpKGtleSkpIHtcbiAgICBhbGlhcyA9IEpTT04uc3RyaW5naWZ5KGtleS52YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgYWxpYXMgPSBKU09OLnN0cmluZ2lmeSgoMCwgX3JlbW92ZVByb3BlcnRpZXNEZWVwLmRlZmF1bHQpKCgwLCBfY2xvbmVOb2RlLmRlZmF1bHQpKGtleSkpKTtcbiAgfVxuXG4gIGlmIChub2RlLmNvbXB1dGVkKSB7XG4gICAgYWxpYXMgPSBgWyR7YWxpYXN9XWA7XG4gIH1cblxuICBpZiAobm9kZS5zdGF0aWMpIHtcbiAgICBhbGlhcyA9IGBzdGF0aWM6JHthbGlhc31gO1xuICB9XG5cbiAgcmV0dXJuIGFsaWFzO1xufVxuXG50b0tleUFsaWFzLnVpZCA9IDA7XG5cbnRvS2V5QWxpYXMuaW5jcmVtZW50ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodG9LZXlBbGlhcy51aWQgPj0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICByZXR1cm4gdG9LZXlBbGlhcy51aWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0tleUFsaWFzLnVpZCsrO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9TZXF1ZW5jZUV4cHJlc3Npb247XG5cbnZhciBfZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucyA9IHJlcXVpcmUoXCIuL2dhdGhlclNlcXVlbmNlRXhwcmVzc2lvbnNcIik7XG5cbmZ1bmN0aW9uIHRvU2VxdWVuY2VFeHByZXNzaW9uKG5vZGVzLCBzY29wZSkge1xuICBpZiAoIShub2RlcyAhPSBudWxsICYmIG5vZGVzLmxlbmd0aCkpIHJldHVybjtcbiAgY29uc3QgZGVjbGFycyA9IFtdO1xuICBjb25zdCByZXN1bHQgPSAoMCwgX2dhdGhlclNlcXVlbmNlRXhwcmVzc2lvbnMuZGVmYXVsdCkobm9kZXMsIHNjb3BlLCBkZWNsYXJzKTtcbiAgaWYgKCFyZXN1bHQpIHJldHVybjtcblxuICBmb3IgKGNvbnN0IGRlY2xhciBvZiBkZWNsYXJzKSB7XG4gICAgc2NvcGUucHVzaChkZWNsYXIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWRcIik7XG5cbnZhciBfZ2VuZXJhdGVkMiA9IHJlcXVpcmUoXCIuLi9idWlsZGVycy9nZW5lcmF0ZWRcIik7XG5cbnZhciBfZGVmYXVsdCA9IHRvU3RhdGVtZW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIHRvU3RhdGVtZW50KG5vZGUsIGlnbm9yZSkge1xuICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBsZXQgbXVzdEhhdmVJZCA9IGZhbHNlO1xuICBsZXQgbmV3VHlwZTtcblxuICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNDbGFzcykobm9kZSkpIHtcbiAgICBtdXN0SGF2ZUlkID0gdHJ1ZTtcbiAgICBuZXdUeXBlID0gXCJDbGFzc0RlY2xhcmF0aW9uXCI7XG4gIH0gZWxzZSBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNGdW5jdGlvbikobm9kZSkpIHtcbiAgICBtdXN0SGF2ZUlkID0gdHJ1ZTtcbiAgICBuZXdUeXBlID0gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCI7XG4gIH0gZWxzZSBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNBc3NpZ25tZW50RXhwcmVzc2lvbikobm9kZSkpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQyLmV4cHJlc3Npb25TdGF0ZW1lbnQpKG5vZGUpO1xuICB9XG5cbiAgaWYgKG11c3RIYXZlSWQgJiYgIW5vZGUuaWQpIHtcbiAgICBuZXdUeXBlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIW5ld1R5cGUpIHtcbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHR1cm4gJHtub2RlLnR5cGV9IHRvIGEgc3RhdGVtZW50YCk7XG4gICAgfVxuICB9XG5cbiAgbm9kZS50eXBlID0gbmV3VHlwZTtcbiAgcmV0dXJuIG5vZGU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaXNWYWxpZElkZW50aWZpZXIgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9pc1ZhbGlkSWRlbnRpZmllclwiKTtcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi4vYnVpbGRlcnMvZ2VuZXJhdGVkXCIpO1xuXG52YXIgX2RlZmF1bHQgPSB2YWx1ZVRvTm9kZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBSZWdFeHBdXCI7XG59XG5cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICE9PSBcIltvYmplY3QgT2JqZWN0XVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICByZXR1cm4gcHJvdG8gPT09IG51bGwgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSA9PT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gdmFsdWVUb05vZGUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQuaWRlbnRpZmllcikoXCJ1bmRlZmluZWRcIik7XG4gIH1cblxuICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLmJvb2xlYW5MaXRlcmFsKSh2YWx1ZSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQubnVsbExpdGVyYWwpKCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLnN0cmluZ0xpdGVyYWwpKHZhbHVlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgIHJlc3VsdCA9ICgwLCBfZ2VuZXJhdGVkLm51bWVyaWNMaXRlcmFsKShNYXRoLmFicyh2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbnVtZXJhdG9yO1xuXG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICBudW1lcmF0b3IgPSAoMCwgX2dlbmVyYXRlZC5udW1lcmljTGl0ZXJhbCkoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBudW1lcmF0b3IgPSAoMCwgX2dlbmVyYXRlZC5udW1lcmljTGl0ZXJhbCkoMSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9ICgwLCBfZ2VuZXJhdGVkLmJpbmFyeUV4cHJlc3Npb24pKFwiL1wiLCBudW1lcmF0b3IsICgwLCBfZ2VuZXJhdGVkLm51bWVyaWNMaXRlcmFsKSgwKSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlIDwgMCB8fCBPYmplY3QuaXModmFsdWUsIC0wKSkge1xuICAgICAgcmVzdWx0ID0gKDAsIF9nZW5lcmF0ZWQudW5hcnlFeHByZXNzaW9uKShcIi1cIiwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGNvbnN0IHBhdHRlcm4gPSB2YWx1ZS5zb3VyY2U7XG4gICAgY29uc3QgZmxhZ3MgPSB2YWx1ZS50b1N0cmluZygpLm1hdGNoKC9cXC8oW2Etel0rfCkkLylbMV07XG4gICAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLnJlZ0V4cExpdGVyYWwpKHBhdHRlcm4sIGZsYWdzKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiAoMCwgX2dlbmVyYXRlZC5hcnJheUV4cHJlc3Npb24pKHZhbHVlLm1hcCh2YWx1ZVRvTm9kZSkpO1xuICB9XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgY29uc3QgcHJvcHMgPSBbXTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHZhbHVlKSkge1xuICAgICAgbGV0IG5vZGVLZXk7XG5cbiAgICAgIGlmICgoMCwgX2lzVmFsaWRJZGVudGlmaWVyLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgbm9kZUtleSA9ICgwLCBfZ2VuZXJhdGVkLmlkZW50aWZpZXIpKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlS2V5ID0gKDAsIF9nZW5lcmF0ZWQuc3RyaW5nTGl0ZXJhbCkoa2V5KTtcbiAgICAgIH1cblxuICAgICAgcHJvcHMucHVzaCgoMCwgX2dlbmVyYXRlZC5vYmplY3RQcm9wZXJ0eSkobm9kZUtleSwgdmFsdWVUb05vZGUodmFsdWVba2V5XSkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQub2JqZWN0RXhwcmVzc2lvbikocHJvcHMpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiZG9uJ3Qga25vdyBob3cgdG8gdHVybiB0aGlzIHZhbHVlIGludG8gYSBub2RlXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jbGFzc01ldGhvZE9yRGVjbGFyZU1ldGhvZENvbW1vbiA9IGV4cG9ydHMuY2xhc3NNZXRob2RPclByb3BlcnR5Q29tbW9uID0gZXhwb3J0cy5wYXR0ZXJuTGlrZUNvbW1vbiA9IGV4cG9ydHMuZnVuY3Rpb25EZWNsYXJhdGlvbkNvbW1vbiA9IGV4cG9ydHMuZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiA9IGV4cG9ydHMuZnVuY3Rpb25Db21tb24gPSB2b2lkIDA7XG5cbnZhciBfaXMgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9pc1wiKTtcblxudmFyIF9pc1ZhbGlkSWRlbnRpZmllciA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2lzVmFsaWRJZGVudGlmaWVyXCIpO1xuXG52YXIgX2hlbHBlclZhbGlkYXRvcklkZW50aWZpZXIgPSByZXF1aXJlKFwiQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJBcnJheUV4cHJlc3Npb25cIiwge1xuICBmaWVsZHM6IHtcbiAgICBlbGVtZW50czoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZU9yVmFsdWVUeXBlKShcIm51bGxcIiwgXCJFeHByZXNzaW9uXCIsIFwiU3ByZWFkRWxlbWVudFwiKSkpLFxuICAgICAgZGVmYXVsdDogIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcgPyBbXSA6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcbiAgdmlzaXRvcjogW1wiZWxlbWVudHNcIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIsIHtcbiAgZmllbGRzOiB7XG4gICAgb3BlcmF0b3I6IHtcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykge1xuICAgICAgICAgIHJldHVybiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gKDAsIF91dGlscy5hc3NlcnRPbmVPZikoLi4uX2NvbnN0YW50cy5BU1NJR05NRU5UX09QRVJBVE9SUyk7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcIj1cIik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSAoMCwgX2lzLmRlZmF1bHQpKFwiUGF0dGVyblwiLCBub2RlLmxlZnQpID8gcGF0dGVybiA6IGlkZW50aWZpZXI7XG4gICAgICAgICAgdmFsaWRhdG9yKG5vZGUsIGtleSwgdmFsKTtcbiAgICAgICAgfTtcbiAgICAgIH0oKVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgdmFsaWRhdGU6ICFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HID8gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJMVmFsXCIpIDogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiTWVtYmVyRXhwcmVzc2lvblwiLCBcIkFycmF5UGF0dGVyblwiLCBcIk9iamVjdFBhdHRlcm5cIilcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9LFxuICBidWlsZGVyOiBbXCJvcGVyYXRvclwiLCBcImxlZnRcIiwgXCJyaWdodFwiXSxcbiAgdmlzaXRvcjogW1wibGVmdFwiLCBcInJpZ2h0XCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJCaW5hcnlFeHByZXNzaW9uXCIsIHtcbiAgYnVpbGRlcjogW1wib3BlcmF0b3JcIiwgXCJsZWZ0XCIsIFwicmlnaHRcIl0sXG4gIGZpZWxkczoge1xuICAgIG9wZXJhdG9yOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoLi4uX2NvbnN0YW50cy5CSU5BUllfT1BFUkFUT1JTKVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKTtcbiAgICAgICAgY29uc3QgaW5PcCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIlByaXZhdGVOYW1lXCIpO1xuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbCkge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IG5vZGUub3BlcmF0b3IgPT09IFwiaW5cIiA/IGluT3AgOiBleHByZXNzaW9uO1xuICAgICAgICAgIHZhbGlkYXRvcihub2RlLCBrZXksIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFsaWRhdG9yLm9uZU9mTm9kZVR5cGVzID0gW1wiRXhwcmVzc2lvblwiLCBcIlByaXZhdGVOYW1lXCJdO1xuICAgICAgICByZXR1cm4gdmFsaWRhdG9yO1xuICAgICAgfSgpXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfSxcbiAgdmlzaXRvcjogW1wibGVmdFwiLCBcInJpZ2h0XCJdLFxuICBhbGlhc2VzOiBbXCJCaW5hcnlcIiwgXCJFeHByZXNzaW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJbnRlcnByZXRlckRpcmVjdGl2ZVwiLCB7XG4gIGJ1aWxkZXI6IFtcInZhbHVlXCJdLFxuICBmaWVsZHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRGlyZWN0aXZlXCIsIHtcbiAgdmlzaXRvcjogW1widmFsdWVcIl0sXG4gIGZpZWxkczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJEaXJlY3RpdmVMaXRlcmFsXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJEaXJlY3RpdmVMaXRlcmFsXCIsIHtcbiAgYnVpbGRlcjogW1widmFsdWVcIl0sXG4gIGZpZWxkczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwic3RyaW5nXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJCbG9ja1N0YXRlbWVudFwiLCB7XG4gIGJ1aWxkZXI6IFtcImJvZHlcIiwgXCJkaXJlY3RpdmVzXCJdLFxuICB2aXNpdG9yOiBbXCJkaXJlY3RpdmVzXCIsIFwiYm9keVwiXSxcbiAgZmllbGRzOiB7XG4gICAgZGlyZWN0aXZlczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGlyZWN0aXZlXCIpKSksXG4gICAgICBkZWZhdWx0OiBbXVxuICAgIH0sXG4gICAgYm9keToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RhdGVtZW50XCIpKSlcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIlNjb3BhYmxlXCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJCbG9ja1wiLCBcIlN0YXRlbWVudFwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQnJlYWtTdGF0ZW1lbnRcIiwge1xuICB2aXNpdG9yOiBbXCJsYWJlbFwiXSxcbiAgZmllbGRzOiB7XG4gICAgbGFiZWw6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCIsIFwiVGVybWluYXRvcmxlc3NcIiwgXCJDb21wbGV0aW9uU3RhdGVtZW50XCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJDYWxsRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcImNhbGxlZVwiLCBcImFyZ3VtZW50c1wiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwidHlwZUFyZ3VtZW50c1wiXSxcbiAgYnVpbGRlcjogW1wiY2FsbGVlXCIsIFwiYXJndW1lbnRzXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IE9iamVjdC5hc3NpZ24oe1xuICAgIGNhbGxlZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIlY4SW50cmluc2ljSWRlbnRpZmllclwiKVxuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIsIFwiU3ByZWFkRWxlbWVudFwiLCBcIkpTWE5hbWVzcGFjZWROYW1lXCIsIFwiQXJndW1lbnRQbGFjZWhvbGRlclwiKSkpXG4gICAgfVxuICB9LCAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/IHtcbiAgICBvcHRpb25hbDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKHRydWUsIGZhbHNlKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9IDoge30sIHtcbiAgICB0eXBlQXJndW1lbnRzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICB0eXBlUGFyYW1ldGVyczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9KVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQ2F0Y2hDbGF1c2VcIiwge1xuICB2aXNpdG9yOiBbXCJwYXJhbVwiLCBcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIHBhcmFtOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiQXJyYXlQYXR0ZXJuXCIsIFwiT2JqZWN0UGF0dGVyblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJCbG9ja1N0YXRlbWVudFwiKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiU2NvcGFibGVcIiwgXCJCbG9ja1BhcmVudFwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIsIHtcbiAgdmlzaXRvcjogW1widGVzdFwiLCBcImNvbnNlcXVlbnRcIiwgXCJhbHRlcm5hdGVcIl0sXG4gIGZpZWxkczoge1xuICAgIHRlc3Q6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIGNvbnNlcXVlbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIGFsdGVybmF0ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiLCBcIkNvbmRpdGlvbmFsXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJDb250aW51ZVN0YXRlbWVudFwiLCB7XG4gIHZpc2l0b3I6IFtcImxhYmVsXCJdLFxuICBmaWVsZHM6IHtcbiAgICBsYWJlbDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9LFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJUZXJtaW5hdG9ybGVzc1wiLCBcIkNvbXBsZXRpb25TdGF0ZW1lbnRcIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkRlYnVnZ2VyU3RhdGVtZW50XCIsIHtcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJEb1doaWxlU3RhdGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1widGVzdFwiLCBcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIHRlc3Q6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlN0YXRlbWVudFwiKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJMb29wXCIsIFwiV2hpbGVcIiwgXCJTY29wYWJsZVwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRW1wdHlTdGF0ZW1lbnRcIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiwge1xuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHByZXNzaW9uOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9LFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJFeHByZXNzaW9uV3JhcHBlclwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRmlsZVwiLCB7XG4gIGJ1aWxkZXI6IFtcInByb2dyYW1cIiwgXCJjb21tZW50c1wiLCBcInRva2Vuc1wiXSxcbiAgdmlzaXRvcjogW1wicHJvZ3JhbVwiXSxcbiAgZmllbGRzOiB7XG4gICAgcHJvZ3JhbToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiUHJvZ3JhbVwiKVxuICAgIH0sXG4gICAgY29tbWVudHM6IHtcbiAgICAgIHZhbGlkYXRlOiAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/IE9iamVjdC5hc3NpZ24oKCkgPT4ge30sIHtcbiAgICAgICAgZWFjaDoge1xuICAgICAgICAgIG9uZU9mTm9kZVR5cGVzOiBbXCJDb21tZW50QmxvY2tcIiwgXCJDb21tZW50TGluZVwiXVxuICAgICAgICB9XG4gICAgICB9KSA6ICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJDb21tZW50QmxvY2tcIiwgXCJDb21tZW50TGluZVwiKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgdG9rZW5zOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRFYWNoKShPYmplY3QuYXNzaWduKCgpID0+IHt9LCB7XG4gICAgICAgIHR5cGU6IFwiYW55XCJcbiAgICAgIH0pKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJGb3JJblN0YXRlbWVudFwiLCB7XG4gIHZpc2l0b3I6IFtcImxlZnRcIiwgXCJyaWdodFwiLCBcImJvZHlcIl0sXG4gIGFsaWFzZXM6IFtcIlNjb3BhYmxlXCIsIFwiU3RhdGVtZW50XCIsIFwiRm9yXCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJMb29wXCIsIFwiRm9yWFN0YXRlbWVudFwiXSxcbiAgZmllbGRzOiB7XG4gICAgbGVmdDoge1xuICAgICAgdmFsaWRhdGU6ICFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HID8gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIsIFwiTFZhbFwiKSA6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVmFyaWFibGVEZWNsYXJhdGlvblwiLCBcIklkZW50aWZpZXJcIiwgXCJNZW1iZXJFeHByZXNzaW9uXCIsIFwiQXJyYXlQYXR0ZXJuXCIsIFwiT2JqZWN0UGF0dGVyblwiKVxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlN0YXRlbWVudFwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRm9yU3RhdGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1wiaW5pdFwiLCBcInRlc3RcIiwgXCJ1cGRhdGVcIiwgXCJib2R5XCJdLFxuICBhbGlhc2VzOiBbXCJTY29wYWJsZVwiLCBcIlN0YXRlbWVudFwiLCBcIkZvclwiLCBcIkJsb2NrUGFyZW50XCIsIFwiTG9vcFwiXSxcbiAgZmllbGRzOiB7XG4gICAgaW5pdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVmFyaWFibGVEZWNsYXJhdGlvblwiLCBcIkV4cHJlc3Npb25cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgdGVzdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICB1cGRhdGU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgYm9keToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RhdGVtZW50XCIpXG4gICAgfVxuICB9XG59KTtcbmNvbnN0IGZ1bmN0aW9uQ29tbW9uID0ge1xuICBwYXJhbXM6IHtcbiAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiUGF0dGVyblwiLCBcIlJlc3RFbGVtZW50XCIpKSlcbiAgfSxcbiAgZ2VuZXJhdG9yOiB7XG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgYXN5bmM6IHtcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9XG59O1xuZXhwb3J0cy5mdW5jdGlvbkNvbW1vbiA9IGZ1bmN0aW9uQ29tbW9uO1xuY29uc3QgZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiA9IHtcbiAgcmV0dXJuVHlwZToge1xuICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlR5cGVBbm5vdGF0aW9uXCIsIFwiVFNUeXBlQW5ub3RhdGlvblwiLCBcIk5vb3BcIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgdHlwZVBhcmFtZXRlcnM6IHtcbiAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiwgXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCBcIk5vb3BcIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfVxufTtcbmV4cG9ydHMuZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiA9IGZ1bmN0aW9uVHlwZUFubm90YXRpb25Db21tb247XG5jb25zdCBmdW5jdGlvbkRlY2xhcmF0aW9uQ29tbW9uID0gT2JqZWN0LmFzc2lnbih7fSwgZnVuY3Rpb25Db21tb24sIHtcbiAgZGVjbGFyZToge1xuICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIGlkOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9XG59KTtcbmV4cG9ydHMuZnVuY3Rpb25EZWNsYXJhdGlvbkNvbW1vbiA9IGZ1bmN0aW9uRGVjbGFyYXRpb25Db21tb247XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiLCB7XG4gIGJ1aWxkZXI6IFtcImlkXCIsIFwicGFyYW1zXCIsIFwiYm9keVwiLCBcImdlbmVyYXRvclwiLCBcImFzeW5jXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcInBhcmFtc1wiLCBcImJvZHlcIiwgXCJyZXR1cm5UeXBlXCIsIFwidHlwZVBhcmFtZXRlcnNcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgZnVuY3Rpb25EZWNsYXJhdGlvbkNvbW1vbiwgZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiwge1xuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkJsb2NrU3RhdGVtZW50XCIpXG4gICAgfVxuICB9KSxcbiAgYWxpYXNlczogW1wiU2NvcGFibGVcIiwgXCJGdW5jdGlvblwiLCBcIkJsb2NrUGFyZW50XCIsIFwiRnVuY3Rpb25QYXJlbnRcIiwgXCJTdGF0ZW1lbnRcIiwgXCJQdXJlaXNoXCIsIFwiRGVjbGFyYXRpb25cIl0sXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSByZXR1cm4gKCkgPT4ge307XG4gICAgY29uc3QgaWRlbnRpZmllciA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBhcmVudCwga2V5LCBub2RlKSB7XG4gICAgICBpZiAoISgwLCBfaXMuZGVmYXVsdCkoXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIiwgcGFyZW50KSkge1xuICAgICAgICBpZGVudGlmaWVyKG5vZGUsIFwiaWRcIiwgbm9kZS5pZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSgpXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJGdW5jdGlvbkV4cHJlc3Npb25cIiwge1xuICBpbmhlcml0czogXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIsXG4gIGFsaWFzZXM6IFtcIlNjb3BhYmxlXCIsIFwiRnVuY3Rpb25cIiwgXCJCbG9ja1BhcmVudFwiLCBcIkZ1bmN0aW9uUGFyZW50XCIsIFwiRXhwcmVzc2lvblwiLCBcIlB1cmVpc2hcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgZnVuY3Rpb25Db21tb24sIGZ1bmN0aW9uVHlwZUFubm90YXRpb25Db21tb24sIHtcbiAgICBpZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJCbG9ja1N0YXRlbWVudFwiKVxuICAgIH1cbiAgfSlcbn0pO1xuY29uc3QgcGF0dGVybkxpa2VDb21tb24gPSB7XG4gIHR5cGVBbm5vdGF0aW9uOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVHlwZUFubm90YXRpb25cIiwgXCJUU1R5cGVBbm5vdGF0aW9uXCIsIFwiTm9vcFwiKSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICBkZWNvcmF0b3JzOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjb3JhdG9yXCIpKSlcbiAgfVxufTtcbmV4cG9ydHMucGF0dGVybkxpa2VDb21tb24gPSBwYXR0ZXJuTGlrZUNvbW1vbjtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJZGVudGlmaWVyXCIsIHtcbiAgYnVpbGRlcjogW1wibmFtZVwiXSxcbiAgdmlzaXRvcjogW1widHlwZUFubm90YXRpb25cIiwgXCJkZWNvcmF0b3JzXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCIsIFwiUGF0dGVybkxpa2VcIiwgXCJMVmFsXCIsIFwiVFNFbnRpdHlOYW1lXCJdLFxuICBmaWVsZHM6IE9iamVjdC5hc3NpZ24oe30sIHBhdHRlcm5MaWtlQ29tbW9uLCB7XG4gICAgbmFtZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKSwgT2JqZWN0LmFzc2lnbihmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCEoMCwgX2lzVmFsaWRJZGVudGlmaWVyLmRlZmF1bHQpKHZhbCwgZmFsc2UpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgXCIke3ZhbH1cIiBpcyBub3QgYSB2YWxpZCBpZGVudGlmaWVyIG5hbWVgKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgICB9KSlcbiAgICB9LFxuICAgIG9wdGlvbmFsOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9KSxcblxuICB2YWxpZGF0ZShwYXJlbnQsIGtleSwgbm9kZSkge1xuICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykgcmV0dXJuO1xuICAgIGNvbnN0IG1hdGNoID0gL1xcLihcXHcrKSQvLmV4ZWMoa2V5KTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm47XG4gICAgY29uc3QgWywgcGFyZW50S2V5XSA9IG1hdGNoO1xuICAgIGNvbnN0IG5vbkNvbXAgPSB7XG4gICAgICBjb21wdXRlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKHBhcmVudEtleSA9PT0gXCJwcm9wZXJ0eVwiKSB7XG4gICAgICBpZiAoKDAsIF9pcy5kZWZhdWx0KShcIk1lbWJlckV4cHJlc3Npb25cIiwgcGFyZW50LCBub25Db21wKSkgcmV0dXJuO1xuICAgICAgaWYgKCgwLCBfaXMuZGVmYXVsdCkoXCJPcHRpb25hbE1lbWJlckV4cHJlc3Npb25cIiwgcGFyZW50LCBub25Db21wKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocGFyZW50S2V5ID09PSBcImtleVwiKSB7XG4gICAgICBpZiAoKDAsIF9pcy5kZWZhdWx0KShcIlByb3BlcnR5XCIsIHBhcmVudCwgbm9uQ29tcCkpIHJldHVybjtcbiAgICAgIGlmICgoMCwgX2lzLmRlZmF1bHQpKFwiTWV0aG9kXCIsIHBhcmVudCwgbm9uQ29tcCkpIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHBhcmVudEtleSA9PT0gXCJleHBvcnRlZFwiKSB7XG4gICAgICBpZiAoKDAsIF9pcy5kZWZhdWx0KShcIkV4cG9ydFNwZWNpZmllclwiLCBwYXJlbnQpKSByZXR1cm47XG4gICAgfSBlbHNlIGlmIChwYXJlbnRLZXkgPT09IFwiaW1wb3J0ZWRcIikge1xuICAgICAgaWYgKCgwLCBfaXMuZGVmYXVsdCkoXCJJbXBvcnRTcGVjaWZpZXJcIiwgcGFyZW50LCB7XG4gICAgICAgIGltcG9ydGVkOiBub2RlXG4gICAgICB9KSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocGFyZW50S2V5ID09PSBcIm1ldGFcIikge1xuICAgICAgaWYgKCgwLCBfaXMuZGVmYXVsdCkoXCJNZXRhUHJvcGVydHlcIiwgcGFyZW50LCB7XG4gICAgICAgIG1ldGE6IG5vZGVcbiAgICAgIH0pKSByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCgoMCwgX2hlbHBlclZhbGlkYXRvcklkZW50aWZpZXIuaXNLZXl3b3JkKShub2RlLm5hbWUpIHx8ICgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc1Jlc2VydmVkV29yZCkobm9kZS5uYW1lLCBmYWxzZSkpICYmIG5vZGUubmFtZSAhPT0gXCJ0aGlzXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFwiJHtub2RlLm5hbWV9XCIgaXMgbm90IGEgdmFsaWQgaWRlbnRpZmllcmApO1xuICAgIH1cbiAgfVxuXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJZlN0YXRlbWVudFwiLCB7XG4gIHZpc2l0b3I6IFtcInRlc3RcIiwgXCJjb25zZXF1ZW50XCIsIFwiYWx0ZXJuYXRlXCJdLFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJDb25kaXRpb25hbFwiXSxcbiAgZmllbGRzOiB7XG4gICAgdGVzdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH0sXG4gICAgY29uc2VxdWVudDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RhdGVtZW50XCIpXG4gICAgfSxcbiAgICBhbHRlcm5hdGU6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RhdGVtZW50XCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJMYWJlbGVkU3RhdGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1wibGFiZWxcIiwgXCJib2R5XCJdLFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIl0sXG4gIGZpZWxkczoge1xuICAgIGxhYmVsOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIpXG4gICAgfSxcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJTdGF0ZW1lbnRcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlN0cmluZ0xpdGVyYWxcIiwge1xuICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCIsIFwiTGl0ZXJhbFwiLCBcIkltbXV0YWJsZVwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTnVtZXJpY0xpdGVyYWxcIiwge1xuICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgZGVwcmVjYXRlZEFsaWFzOiBcIk51bWJlckxpdGVyYWxcIixcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJudW1iZXJcIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCIsIFwiTGl0ZXJhbFwiLCBcIkltbXV0YWJsZVwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTnVsbExpdGVyYWxcIiwge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCIsIFwiUHVyZWlzaFwiLCBcIkxpdGVyYWxcIiwgXCJJbW11dGFibGVcIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkJvb2xlYW5MaXRlcmFsXCIsIHtcbiAgYnVpbGRlcjogW1widmFsdWVcIl0sXG4gIGZpZWxkczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiLCBcIlB1cmVpc2hcIiwgXCJMaXRlcmFsXCIsIFwiSW1tdXRhYmxlXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJSZWdFeHBMaXRlcmFsXCIsIHtcbiAgYnVpbGRlcjogW1wicGF0dGVyblwiLCBcImZsYWdzXCJdLFxuICBkZXByZWNhdGVkQWxpYXM6IFwiUmVnZXhMaXRlcmFsXCIsXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCIsIFwiTGl0ZXJhbFwiXSxcbiAgZmllbGRzOiB7XG4gICAgcGF0dGVybjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKVxuICAgIH0sXG4gICAgZmxhZ3M6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIiksIE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykgcmV0dXJuO1xuICAgICAgICBjb25zdCBpbnZhbGlkID0gL1teZ2ltc3V5XS8uZXhlYyh2YWwpO1xuXG4gICAgICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgXCIke2ludmFsaWRbMF19XCIgaXMgbm90IGEgdmFsaWQgUmVnRXhwIGZsYWdgKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgICB9KSksXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJMb2dpY2FsRXhwcmVzc2lvblwiLCB7XG4gIGJ1aWxkZXI6IFtcIm9wZXJhdG9yXCIsIFwibGVmdFwiLCBcInJpZ2h0XCJdLFxuICB2aXNpdG9yOiBbXCJsZWZ0XCIsIFwicmlnaHRcIl0sXG4gIGFsaWFzZXM6IFtcIkJpbmFyeVwiLCBcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIG9wZXJhdG9yOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoLi4uX2NvbnN0YW50cy5MT0dJQ0FMX09QRVJBVE9SUylcbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJNZW1iZXJFeHByZXNzaW9uXCIsIHtcbiAgYnVpbGRlcjogW1wib2JqZWN0XCIsIFwicHJvcGVydHlcIiwgXCJjb21wdXRlZFwiLCAuLi4oIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcgPyBbXCJvcHRpb25hbFwiXSA6IFtdKV0sXG4gIHZpc2l0b3I6IFtcIm9iamVjdFwiLCBcInByb3BlcnR5XCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCIsIFwiTFZhbFwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHtcbiAgICBvYmplY3Q6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIHByb3BlcnR5OiB7XG4gICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBub3JtYWwgPSAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiwgXCJQcml2YXRlTmFtZVwiKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIik7XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gbm9kZS5jb21wdXRlZCA/IGNvbXB1dGVkIDogbm9ybWFsO1xuICAgICAgICAgIHZhbGlkYXRvcihub2RlLCBrZXksIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFsaWRhdG9yLm9uZU9mTm9kZVR5cGVzID0gW1wiRXhwcmVzc2lvblwiLCBcIklkZW50aWZpZXJcIiwgXCJQcml2YXRlTmFtZVwiXTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvcjtcbiAgICAgIH0oKVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LCAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/IHtcbiAgICBvcHRpb25hbDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKHRydWUsIGZhbHNlKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9IDoge30pXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJOZXdFeHByZXNzaW9uXCIsIHtcbiAgaW5oZXJpdHM6IFwiQ2FsbEV4cHJlc3Npb25cIlxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUHJvZ3JhbVwiLCB7XG4gIHZpc2l0b3I6IFtcImRpcmVjdGl2ZXNcIiwgXCJib2R5XCJdLFxuICBidWlsZGVyOiBbXCJib2R5XCIsIFwiZGlyZWN0aXZlc1wiLCBcInNvdXJjZVR5cGVcIiwgXCJpbnRlcnByZXRlclwiXSxcbiAgZmllbGRzOiB7XG4gICAgc291cmNlRmlsZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKVxuICAgIH0sXG4gICAgc291cmNlVHlwZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwic2NyaXB0XCIsIFwibW9kdWxlXCIpLFxuICAgICAgZGVmYXVsdDogXCJzY3JpcHRcIlxuICAgIH0sXG4gICAgaW50ZXJwcmV0ZXI6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkludGVycHJldGVyRGlyZWN0aXZlXCIpLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBkaXJlY3RpdmVzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJEaXJlY3RpdmVcIikpKSxcbiAgICAgIGRlZmF1bHQ6IFtdXG4gICAgfSxcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJTdGF0ZW1lbnRcIikpKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiU2NvcGFibGVcIiwgXCJCbG9ja1BhcmVudFwiLCBcIkJsb2NrXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJPYmplY3RFeHByZXNzaW9uXCIsIHtcbiAgdmlzaXRvcjogW1wicHJvcGVydGllc1wiXSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgcHJvcGVydGllczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiT2JqZWN0TWV0aG9kXCIsIFwiT2JqZWN0UHJvcGVydHlcIiwgXCJTcHJlYWRFbGVtZW50XCIpKSlcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk9iamVjdE1ldGhvZFwiLCB7XG4gIGJ1aWxkZXI6IFtcImtpbmRcIiwgXCJrZXlcIiwgXCJwYXJhbXNcIiwgXCJib2R5XCIsIFwiY29tcHV0ZWRcIiwgXCJnZW5lcmF0b3JcIiwgXCJhc3luY1wiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCBmdW5jdGlvbkNvbW1vbiwgZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiwge1xuICAgIGtpbmQ6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwibWV0aG9kXCIsIFwiZ2V0XCIsIFwic2V0XCIpXG4gICAgfSwgIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcgPyB7XG4gICAgICBkZWZhdWx0OiBcIm1ldGhvZFwiXG4gICAgfSA6IHt9KSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGtleToge1xuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiLCBcIk51bWVyaWNMaXRlcmFsXCIpO1xuICAgICAgICBjb25zdCBjb21wdXRlZCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKTtcblxuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBub2RlLmNvbXB1dGVkID8gY29tcHV0ZWQgOiBub3JtYWw7XG4gICAgICAgICAgdmFsaWRhdG9yKG5vZGUsIGtleSwgdmFsKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YWxpZGF0b3Iub25lT2ZOb2RlVHlwZXMgPSBbXCJFeHByZXNzaW9uXCIsIFwiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJOdW1lcmljTGl0ZXJhbFwiXTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvcjtcbiAgICAgIH0oKVxuICAgIH0sXG4gICAgZGVjb3JhdG9yczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjb3JhdG9yXCIpKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgYm9keToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiQmxvY2tTdGF0ZW1lbnRcIilcbiAgICB9XG4gIH0pLFxuICB2aXNpdG9yOiBbXCJrZXlcIiwgXCJwYXJhbXNcIiwgXCJib2R5XCIsIFwiZGVjb3JhdG9yc1wiLCBcInJldHVyblR5cGVcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiXSxcbiAgYWxpYXNlczogW1wiVXNlcldoaXRlc3BhY2FibGVcIiwgXCJGdW5jdGlvblwiLCBcIlNjb3BhYmxlXCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJGdW5jdGlvblBhcmVudFwiLCBcIk1ldGhvZFwiLCBcIk9iamVjdE1lbWJlclwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiT2JqZWN0UHJvcGVydHlcIiwge1xuICBidWlsZGVyOiBbXCJrZXlcIiwgXCJ2YWx1ZVwiLCBcImNvbXB1dGVkXCIsIFwic2hvcnRoYW5kXCIsIC4uLighcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/IFtcImRlY29yYXRvcnNcIl0gOiBbXSldLFxuICBmaWVsZHM6IHtcbiAgICBjb21wdXRlZDoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGtleToge1xuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiLCBcIk51bWVyaWNMaXRlcmFsXCIpO1xuICAgICAgICBjb25zdCBjb21wdXRlZCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKTtcblxuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBub2RlLmNvbXB1dGVkID8gY29tcHV0ZWQgOiBub3JtYWw7XG4gICAgICAgICAgdmFsaWRhdG9yKG5vZGUsIGtleSwgdmFsKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YWxpZGF0b3Iub25lT2ZOb2RlVHlwZXMgPSBbXCJFeHByZXNzaW9uXCIsIFwiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJOdW1lcmljTGl0ZXJhbFwiXTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvcjtcbiAgICAgIH0oKVxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIiwgXCJQYXR0ZXJuTGlrZVwiKVxuICAgIH0sXG4gICAgc2hvcnRoYW5kOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSwgT2JqZWN0LmFzc2lnbihmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHZhbCAmJiBub2RlLmNvbXB1dGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb3BlcnR5IHNob3J0aGFuZCBvZiBPYmplY3RQcm9wZXJ0eSBjYW5ub3QgYmUgdHJ1ZSBpZiBjb21wdXRlZCBpcyB0cnVlXCIpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXG4gICAgICB9KSwgZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh2YWwgJiYgISgwLCBfaXMuZGVmYXVsdCkoXCJJZGVudGlmaWVyXCIsIG5vZGUua2V5KSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9wZXJ0eSBzaG9ydGhhbmQgb2YgT2JqZWN0UHJvcGVydHkgY2Fubm90IGJlIHRydWUgaWYga2V5IGlzIG5vdCBhbiBJZGVudGlmaWVyXCIpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBkZWNvcmF0b3JzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJEZWNvcmF0b3JcIikpKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9LFxuICB2aXNpdG9yOiBbXCJrZXlcIiwgXCJ2YWx1ZVwiLCBcImRlY29yYXRvcnNcIl0sXG4gIGFsaWFzZXM6IFtcIlVzZXJXaGl0ZXNwYWNhYmxlXCIsIFwiUHJvcGVydHlcIiwgXCJPYmplY3RNZW1iZXJcIl0sXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcGF0dGVybiA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiLCBcIlBhdHRlcm5cIik7XG4gICAgY29uc3QgZXhwcmVzc2lvbiA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBhcmVudCwga2V5LCBub2RlKSB7XG4gICAgICBpZiAoIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcpIHJldHVybjtcbiAgICAgIGNvbnN0IHZhbGlkYXRvciA9ICgwLCBfaXMuZGVmYXVsdCkoXCJPYmplY3RQYXR0ZXJuXCIsIHBhcmVudCkgPyBwYXR0ZXJuIDogZXhwcmVzc2lvbjtcbiAgICAgIHZhbGlkYXRvcihub2RlLCBcInZhbHVlXCIsIG5vZGUudmFsdWUpO1xuICAgIH07XG4gIH0oKVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUmVzdEVsZW1lbnRcIiwge1xuICB2aXNpdG9yOiBbXCJhcmd1bWVudFwiLCBcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBidWlsZGVyOiBbXCJhcmd1bWVudFwiXSxcbiAgYWxpYXNlczogW1wiTFZhbFwiLCBcIlBhdHRlcm5MaWtlXCJdLFxuICBkZXByZWNhdGVkQWxpYXM6IFwiUmVzdFByb3BlcnR5XCIsXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgcGF0dGVybkxpa2VDb21tb24sIHtcbiAgICBhcmd1bWVudDoge1xuICAgICAgdmFsaWRhdGU6ICFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HID8gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJMVmFsXCIpIDogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiUGF0dGVyblwiLCBcIk1lbWJlckV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIG9wdGlvbmFsOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9KSxcblxuICB2YWxpZGF0ZShwYXJlbnQsIGtleSkge1xuICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykgcmV0dXJuO1xuICAgIGNvbnN0IG1hdGNoID0gLyhcXHcrKVxcWyhcXGQrKVxcXS8uZXhlYyhrZXkpO1xuICAgIGlmICghbWF0Y2gpIHRocm93IG5ldyBFcnJvcihcIkludGVybmFsIEJhYmVsIGVycm9yOiBtYWxmb3JtZWQga2V5LlwiKTtcbiAgICBjb25zdCBbLCBsaXN0S2V5LCBpbmRleF0gPSBtYXRjaDtcblxuICAgIGlmIChwYXJlbnRbbGlzdEtleV0ubGVuZ3RoID4gaW5kZXggKyAxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBSZXN0RWxlbWVudCBtdXN0IGJlIGxhc3QgZWxlbWVudCBvZiAke2xpc3RLZXl9YCk7XG4gICAgfVxuICB9XG5cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlJldHVyblN0YXRlbWVudFwiLCB7XG4gIHZpc2l0b3I6IFtcImFyZ3VtZW50XCJdLFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJUZXJtaW5hdG9ybGVzc1wiLCBcIkNvbXBsZXRpb25TdGF0ZW1lbnRcIl0sXG4gIGZpZWxkczoge1xuICAgIGFyZ3VtZW50OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlNlcXVlbmNlRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25zXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHByZXNzaW9uczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKSkpXG4gICAgfVxuICB9LFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJFeHByZXNzaW9uV3JhcHBlclwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiU3dpdGNoQ2FzZVwiLCB7XG4gIHZpc2l0b3I6IFtcInRlc3RcIiwgXCJjb25zZXF1ZW50XCJdLFxuICBmaWVsZHM6IHtcbiAgICB0ZXN0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGNvbnNlcXVlbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlN0YXRlbWVudFwiKSkpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJTd2l0Y2hTdGF0ZW1lbnRcIiwge1xuICB2aXNpdG9yOiBbXCJkaXNjcmltaW5hbnRcIiwgXCJjYXNlc1wiXSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJTY29wYWJsZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgZGlzY3JpbWluYW50OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfSxcbiAgICBjYXNlczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3dpdGNoQ2FzZVwiKSkpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUaGlzRXhwcmVzc2lvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRocm93U3RhdGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1wiYXJndW1lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIlRlcm1pbmF0b3JsZXNzXCIsIFwiQ29tcGxldGlvblN0YXRlbWVudFwiXSxcbiAgZmllbGRzOiB7XG4gICAgYXJndW1lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRyeVN0YXRlbWVudFwiLCB7XG4gIHZpc2l0b3I6IFtcImJsb2NrXCIsIFwiaGFuZGxlclwiLCBcImZpbmFsaXplclwiXSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCJdLFxuICBmaWVsZHM6IHtcbiAgICBibG9jazoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiQmxvY2tTdGF0ZW1lbnRcIiksIE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCFub2RlLmhhbmRsZXIgJiYgIW5vZGUuZmluYWxpemVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRyeVN0YXRlbWVudCBleHBlY3RzIGVpdGhlciBhIGhhbmRsZXIgb3IgZmluYWxpemVyLCBvciBib3RoXCIpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG9uZU9mTm9kZVR5cGVzOiBbXCJCbG9ja1N0YXRlbWVudFwiXVxuICAgICAgfSkpXG4gICAgfSxcbiAgICBoYW5kbGVyOiB7XG4gICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkNhdGNoQ2xhdXNlXCIpXG4gICAgfSxcbiAgICBmaW5hbGl6ZXI6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiQmxvY2tTdGF0ZW1lbnRcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlVuYXJ5RXhwcmVzc2lvblwiLCB7XG4gIGJ1aWxkZXI6IFtcIm9wZXJhdG9yXCIsIFwiYXJndW1lbnRcIiwgXCJwcmVmaXhcIl0sXG4gIGZpZWxkczoge1xuICAgIHByZWZpeDoge1xuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgYXJndW1lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIG9wZXJhdG9yOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoLi4uX2NvbnN0YW50cy5VTkFSWV9PUEVSQVRPUlMpXG4gICAgfVxuICB9LFxuICB2aXNpdG9yOiBbXCJhcmd1bWVudFwiXSxcbiAgYWxpYXNlczogW1wiVW5hcnlMaWtlXCIsIFwiRXhwcmVzc2lvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVXBkYXRlRXhwcmVzc2lvblwiLCB7XG4gIGJ1aWxkZXI6IFtcIm9wZXJhdG9yXCIsIFwiYXJndW1lbnRcIiwgXCJwcmVmaXhcIl0sXG4gIGZpZWxkczoge1xuICAgIHByZWZpeDoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGFyZ3VtZW50OiB7XG4gICAgICB2YWxpZGF0ZTogIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcgPyAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIikgOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiwgXCJNZW1iZXJFeHByZXNzaW9uXCIpXG4gICAgfSxcbiAgICBvcGVyYXRvcjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKC4uLl9jb25zdGFudHMuVVBEQVRFX09QRVJBVE9SUylcbiAgICB9XG4gIH0sXG4gIHZpc2l0b3I6IFtcImFyZ3VtZW50XCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIsIHtcbiAgYnVpbGRlcjogW1wia2luZFwiLCBcImRlY2xhcmF0aW9uc1wiXSxcbiAgdmlzaXRvcjogW1wiZGVjbGFyYXRpb25zXCJdLFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZGVjbGFyZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAga2luZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwidmFyXCIsIFwibGV0XCIsIFwiY29uc3RcIilcbiAgICB9LFxuICAgIGRlY2xhcmF0aW9uczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVmFyaWFibGVEZWNsYXJhdG9yXCIpKSlcbiAgICB9XG4gIH0sXG5cbiAgdmFsaWRhdGUocGFyZW50LCBrZXksIG5vZGUpIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcpIHJldHVybjtcbiAgICBpZiAoISgwLCBfaXMuZGVmYXVsdCkoXCJGb3JYU3RhdGVtZW50XCIsIHBhcmVudCwge1xuICAgICAgbGVmdDogbm9kZVxuICAgIH0pKSByZXR1cm47XG5cbiAgICBpZiAobm9kZS5kZWNsYXJhdGlvbnMubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeGFjdGx5IG9uZSBWYXJpYWJsZURlY2xhcmF0b3IgaXMgcmVxdWlyZWQgaW4gdGhlIFZhcmlhYmxlRGVjbGFyYXRpb24gb2YgYSAke3BhcmVudC50eXBlfWApO1xuICAgIH1cbiAgfVxuXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJWYXJpYWJsZURlY2xhcmF0b3JcIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiLCBcImluaXRcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiB7XG4gICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcpIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJMVmFsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgbm9ybWFsID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiQXJyYXlQYXR0ZXJuXCIsIFwiT2JqZWN0UGF0dGVyblwiKTtcbiAgICAgICAgY29uc3Qgd2l0aG91dCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbCkge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IG5vZGUuaW5pdCA/IG5vcm1hbCA6IHdpdGhvdXQ7XG4gICAgICAgICAgdmFsaWRhdG9yKG5vZGUsIGtleSwgdmFsKTtcbiAgICAgICAgfTtcbiAgICAgIH0oKVxuICAgIH0sXG4gICAgZGVmaW5pdGU6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIilcbiAgICB9LFxuICAgIGluaXQ6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiV2hpbGVTdGF0ZW1lbnRcIiwge1xuICB2aXNpdG9yOiBbXCJ0ZXN0XCIsIFwiYm9keVwiXSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJMb29wXCIsIFwiV2hpbGVcIiwgXCJTY29wYWJsZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdGVzdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH0sXG4gICAgYm9keToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RhdGVtZW50XCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJXaXRoU3RhdGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1wib2JqZWN0XCIsIFwiYm9keVwiXSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCJdLFxuICBmaWVsZHM6IHtcbiAgICBvYmplY3Q6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlN0YXRlbWVudFwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQXNzaWdubWVudFBhdHRlcm5cIiwge1xuICB2aXNpdG9yOiBbXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJkZWNvcmF0b3JzXCJdLFxuICBidWlsZGVyOiBbXCJsZWZ0XCIsIFwicmlnaHRcIl0sXG4gIGFsaWFzZXM6IFtcIlBhdHRlcm5cIiwgXCJQYXR0ZXJuTGlrZVwiLCBcIkxWYWxcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgcGF0dGVybkxpa2VDb21tb24sIHtcbiAgICBsZWZ0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiT2JqZWN0UGF0dGVyblwiLCBcIkFycmF5UGF0dGVyblwiLCBcIk1lbWJlckV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfSxcbiAgICBkZWNvcmF0b3JzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJEZWNvcmF0b3JcIikpKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9KVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQXJyYXlQYXR0ZXJuXCIsIHtcbiAgdmlzaXRvcjogW1wiZWxlbWVudHNcIiwgXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgYnVpbGRlcjogW1wiZWxlbWVudHNcIl0sXG4gIGFsaWFzZXM6IFtcIlBhdHRlcm5cIiwgXCJQYXR0ZXJuTGlrZVwiLCBcIkxWYWxcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgcGF0dGVybkxpa2VDb21tb24sIHtcbiAgICBlbGVtZW50czoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZU9yVmFsdWVUeXBlKShcIm51bGxcIiwgXCJQYXR0ZXJuTGlrZVwiKSkpXG4gICAgfSxcbiAgICBkZWNvcmF0b3JzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJEZWNvcmF0b3JcIikpKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBvcHRpb25hbDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfSlcbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIsIHtcbiAgYnVpbGRlcjogW1wicGFyYW1zXCIsIFwiYm9keVwiLCBcImFzeW5jXCJdLFxuICB2aXNpdG9yOiBbXCJwYXJhbXNcIiwgXCJib2R5XCIsIFwicmV0dXJuVHlwZVwiLCBcInR5cGVQYXJhbWV0ZXJzXCJdLFxuICBhbGlhc2VzOiBbXCJTY29wYWJsZVwiLCBcIkZ1bmN0aW9uXCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJGdW5jdGlvblBhcmVudFwiLCBcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCJdLFxuICBmaWVsZHM6IE9iamVjdC5hc3NpZ24oe30sIGZ1bmN0aW9uQ29tbW9uLCBmdW5jdGlvblR5cGVBbm5vdGF0aW9uQ29tbW9uLCB7XG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIilcbiAgICB9LFxuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkJsb2NrU3RhdGVtZW50XCIsIFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfSlcbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkNsYXNzQm9keVwiLCB7XG4gIHZpc2l0b3I6IFtcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkNsYXNzTWV0aG9kXCIsIFwiQ2xhc3NQcml2YXRlTWV0aG9kXCIsIFwiQ2xhc3NQcm9wZXJ0eVwiLCBcIkNsYXNzUHJpdmF0ZVByb3BlcnR5XCIsIFwiVFNEZWNsYXJlTWV0aG9kXCIsIFwiVFNJbmRleFNpZ25hdHVyZVwiKSkpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJDbGFzc0V4cHJlc3Npb25cIiwge1xuICBidWlsZGVyOiBbXCJpZFwiLCBcInN1cGVyQ2xhc3NcIiwgXCJib2R5XCIsIFwiZGVjb3JhdG9yc1wiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJib2R5XCIsIFwic3VwZXJDbGFzc1wiLCBcIm1peGluc1wiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwic3VwZXJUeXBlUGFyYW1ldGVyc1wiLCBcImltcGxlbWVudHNcIiwgXCJkZWNvcmF0b3JzXCJdLFxuICBhbGlhc2VzOiBbXCJTY29wYWJsZVwiLCBcIkNsYXNzXCIsIFwiRXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgdHlwZVBhcmFtZXRlcnM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCBcIlRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIsIFwiTm9vcFwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJDbGFzc0JvZHlcIilcbiAgICB9LFxuICAgIHN1cGVyQ2xhc3M6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH0sXG4gICAgc3VwZXJUeXBlUGFyYW1ldGVyczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiwgXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGltcGxlbWVudHM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIsIFwiQ2xhc3NJbXBsZW1lbnRzXCIpKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZGVjb3JhdG9yczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjb3JhdG9yXCIpKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgbWl4aW5zOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJbnRlcmZhY2VFeHRlbmRzXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkNsYXNzRGVjbGFyYXRpb25cIiwge1xuICBpbmhlcml0czogXCJDbGFzc0V4cHJlc3Npb25cIixcbiAgYWxpYXNlczogW1wiU2NvcGFibGVcIiwgXCJDbGFzc1wiLCBcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICAgIH0sXG4gICAgdHlwZVBhcmFtZXRlcnM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCBcIlRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIsIFwiTm9vcFwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJDbGFzc0JvZHlcIilcbiAgICB9LFxuICAgIHN1cGVyQ2xhc3M6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH0sXG4gICAgc3VwZXJUeXBlUGFyYW1ldGVyczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiwgXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGltcGxlbWVudHM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIsIFwiQ2xhc3NJbXBsZW1lbnRzXCIpKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZGVjb3JhdG9yczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjb3JhdG9yXCIpKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgbWl4aW5zOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJbnRlcmZhY2VFeHRlbmRzXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGRlY2xhcmU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGFic3RyYWN0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9LFxuICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwYXJlbnQsIGtleSwgbm9kZSkge1xuICAgICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSByZXR1cm47XG5cbiAgICAgIGlmICghKDAsIF9pcy5kZWZhdWx0KShcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiLCBwYXJlbnQpKSB7XG4gICAgICAgIGlkZW50aWZpZXIobm9kZSwgXCJpZFwiLCBub2RlLmlkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KClcbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wic291cmNlXCJdLFxuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiLCBcIk1vZHVsZURlY2xhcmF0aW9uXCIsIFwiRXhwb3J0RGVjbGFyYXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHNvdXJjZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RyaW5nTGl0ZXJhbFwiKVxuICAgIH0sXG4gICAgZXhwb3J0S2luZDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcInR5cGVcIiwgXCJ2YWx1ZVwiKSksXG4gICAgYXNzZXJ0aW9uczoge1xuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJbXBvcnRBdHRyaWJ1dGVcIikpKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wiZGVjbGFyYXRpb25cIl0sXG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCIsIFwiTW9kdWxlRGVjbGFyYXRpb25cIiwgXCJFeHBvcnREZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZGVjbGFyYXRpb246IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiwgXCJUU0RlY2xhcmVGdW5jdGlvblwiLCBcIkNsYXNzRGVjbGFyYXRpb25cIiwgXCJFeHByZXNzaW9uXCIpXG4gICAgfSxcbiAgICBleHBvcnRLaW5kOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKCgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwidmFsdWVcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJkZWNsYXJhdGlvblwiLCBcInNwZWNpZmllcnNcIiwgXCJzb3VyY2VcIl0sXG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCIsIFwiTW9kdWxlRGVjbGFyYXRpb25cIiwgXCJFeHBvcnREZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZGVjbGFyYXRpb246IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjbGFyYXRpb25cIiksIE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh2YWwgJiYgbm9kZS5zcGVjaWZpZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPbmx5IGRlY2xhcmF0aW9uIG9yIHNwZWNpZmllcnMgaXMgYWxsb3dlZCBvbiBFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG9uZU9mTm9kZVR5cGVzOiBbXCJEZWNsYXJhdGlvblwiXVxuICAgICAgfSksIGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbCkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcpIHJldHVybjtcblxuICAgICAgICBpZiAodmFsICYmIG5vZGUuc291cmNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBleHBvcnQgYSBkZWNsYXJhdGlvbiBmcm9tIGEgc291cmNlXCIpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgYXNzZXJ0aW9uczoge1xuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJbXBvcnRBdHRyaWJ1dGVcIikpKVxuICAgIH0sXG4gICAgc3BlY2lmaWVyczoge1xuICAgICAgZGVmYXVsdDogW10sXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzb3VyY2VkID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHBvcnRTcGVjaWZpZXJcIiwgXCJFeHBvcnREZWZhdWx0U3BlY2lmaWVyXCIsIFwiRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCIpO1xuICAgICAgICBjb25zdCBzb3VyY2VsZXNzID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHBvcnRTcGVjaWZpZXJcIik7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykgcmV0dXJuIHNvdXJjZWQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBub2RlLnNvdXJjZSA/IHNvdXJjZWQgOiBzb3VyY2VsZXNzO1xuICAgICAgICAgIHZhbGlkYXRvcihub2RlLCBrZXksIHZhbCk7XG4gICAgICAgIH07XG4gICAgICB9KCkpKVxuICAgIH0sXG4gICAgc291cmNlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJTdHJpbmdMaXRlcmFsXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGV4cG9ydEtpbmQ6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoKDAsIF91dGlscy5hc3NlcnRPbmVPZikoXCJ0eXBlXCIsIFwidmFsdWVcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkV4cG9ydFNwZWNpZmllclwiLCB7XG4gIHZpc2l0b3I6IFtcImxvY2FsXCIsIFwiZXhwb3J0ZWRcIl0sXG4gIGFsaWFzZXM6IFtcIk1vZHVsZVNwZWNpZmllclwiXSxcbiAgZmllbGRzOiB7XG4gICAgbG9jYWw6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIilcbiAgICB9LFxuICAgIGV4cG9ydGVkOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRm9yT2ZTdGF0ZW1lbnRcIiwge1xuICB2aXNpdG9yOiBbXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJib2R5XCJdLFxuICBidWlsZGVyOiBbXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJib2R5XCIsIFwiYXdhaXRcIl0sXG4gIGFsaWFzZXM6IFtcIlNjb3BhYmxlXCIsIFwiU3RhdGVtZW50XCIsIFwiRm9yXCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJMb29wXCIsIFwiRm9yWFN0YXRlbWVudFwiXSxcbiAgZmllbGRzOiB7XG4gICAgbGVmdDoge1xuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVmFyaWFibGVEZWNsYXJhdGlvblwiLCBcIkxWYWxcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbiA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKTtcbiAgICAgICAgY29uc3QgbHZhbCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiLCBcIk1lbWJlckV4cHJlc3Npb25cIiwgXCJBcnJheVBhdHRlcm5cIiwgXCJPYmplY3RQYXR0ZXJuXCIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgICAgICAgaWYgKCgwLCBfaXMuZGVmYXVsdCkoXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIsIHZhbCkpIHtcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uKG5vZGUsIGtleSwgdmFsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbHZhbChub2RlLCBrZXksIHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSgpXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH0sXG4gICAgYm9keToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RhdGVtZW50XCIpXG4gICAgfSxcbiAgICBhd2FpdDoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkltcG9ydERlY2xhcmF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wic3BlY2lmaWVyc1wiLCBcInNvdXJjZVwiXSxcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCIsIFwiRGVjbGFyYXRpb25cIiwgXCJNb2R1bGVEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgYXNzZXJ0aW9uczoge1xuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJbXBvcnRBdHRyaWJ1dGVcIikpKVxuICAgIH0sXG4gICAgc3BlY2lmaWVyczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSW1wb3J0U3BlY2lmaWVyXCIsIFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiLCBcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSkpXG4gICAgfSxcbiAgICBzb3VyY2U6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlN0cmluZ0xpdGVyYWxcIilcbiAgICB9LFxuICAgIGltcG9ydEtpbmQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcInR5cGVcIiwgXCJ0eXBlb2ZcIiwgXCJ2YWx1ZVwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJbXBvcnREZWZhdWx0U3BlY2lmaWVyXCIsIHtcbiAgdmlzaXRvcjogW1wibG9jYWxcIl0sXG4gIGFsaWFzZXM6IFtcIk1vZHVsZVNwZWNpZmllclwiXSxcbiAgZmllbGRzOiB7XG4gICAgbG9jYWw6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiLCB7XG4gIHZpc2l0b3I6IFtcImxvY2FsXCJdLFxuICBhbGlhc2VzOiBbXCJNb2R1bGVTcGVjaWZpZXJcIl0sXG4gIGZpZWxkczoge1xuICAgIGxvY2FsOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJbXBvcnRTcGVjaWZpZXJcIiwge1xuICB2aXNpdG9yOiBbXCJsb2NhbFwiLCBcImltcG9ydGVkXCJdLFxuICBhbGlhc2VzOiBbXCJNb2R1bGVTcGVjaWZpZXJcIl0sXG4gIGZpZWxkczoge1xuICAgIGxvY2FsOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIpXG4gICAgfSxcbiAgICBpbXBvcnRlZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIilcbiAgICB9LFxuICAgIGltcG9ydEtpbmQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcInR5cGVcIiwgXCJ0eXBlb2ZcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTWV0YVByb3BlcnR5XCIsIHtcbiAgdmlzaXRvcjogW1wibWV0YVwiLCBcInByb3BlcnR5XCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBtZXRhOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIpLCBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbCkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52LkJBQkVMX1RZUEVTXzhfQlJFQUtJTkcpIHJldHVybjtcbiAgICAgICAgbGV0IHByb3BlcnR5O1xuXG4gICAgICAgIHN3aXRjaCAodmFsLm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIHByb3BlcnR5ID0gXCJzZW50XCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJuZXdcIjpcbiAgICAgICAgICAgIHByb3BlcnR5ID0gXCJ0YXJnZXRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcImltcG9ydFwiOlxuICAgICAgICAgICAgcHJvcGVydHkgPSBcIm1ldGFcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEoMCwgX2lzLmRlZmF1bHQpKFwiSWRlbnRpZmllclwiLCBub2RlLnByb3BlcnR5LCB7XG4gICAgICAgICAgbmFtZTogcHJvcGVydHlcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5yZWNvZ25pc2VkIE1ldGFQcm9wZXJ0eVwiKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBvbmVPZk5vZGVUeXBlczogW1wiSWRlbnRpZmllclwiXVxuICAgICAgfSkpXG4gICAgfSxcbiAgICBwcm9wZXJ0eToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICAgIH1cbiAgfVxufSk7XG5jb25zdCBjbGFzc01ldGhvZE9yUHJvcGVydHlDb21tb24gPSB7XG4gIGFic3RyYWN0OiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgYWNjZXNzaWJpbGl0eToge1xuICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcInB1YmxpY1wiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgb3ZlcnJpZGU6IHtcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIG9wdGlvbmFsOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAga2V5OiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IG5vcm1hbCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJOdW1lcmljTGl0ZXJhbFwiKTtcbiAgICAgIGNvbnN0IGNvbXB1dGVkID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbCkge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBub2RlLmNvbXB1dGVkID8gY29tcHV0ZWQgOiBub3JtYWw7XG4gICAgICAgIHZhbGlkYXRvcihub2RlLCBrZXksIHZhbCk7XG4gICAgICB9O1xuICAgIH0oKSwgKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiLCBcIk51bWVyaWNMaXRlcmFsXCIsIFwiRXhwcmVzc2lvblwiKSlcbiAgfVxufTtcbmV4cG9ydHMuY2xhc3NNZXRob2RPclByb3BlcnR5Q29tbW9uID0gY2xhc3NNZXRob2RPclByb3BlcnR5Q29tbW9uO1xuY29uc3QgY2xhc3NNZXRob2RPckRlY2xhcmVNZXRob2RDb21tb24gPSBPYmplY3QuYXNzaWduKHt9LCBmdW5jdGlvbkNvbW1vbiwgY2xhc3NNZXRob2RPclByb3BlcnR5Q29tbW9uLCB7XG4gIHBhcmFtczoge1xuICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiwgXCJQYXR0ZXJuXCIsIFwiUmVzdEVsZW1lbnRcIiwgXCJUU1BhcmFtZXRlclByb3BlcnR5XCIpKSlcbiAgfSxcbiAga2luZDoge1xuICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcImdldFwiLCBcInNldFwiLCBcIm1ldGhvZFwiLCBcImNvbnN0cnVjdG9yXCIpLFxuICAgIGRlZmF1bHQ6IFwibWV0aG9kXCJcbiAgfSxcbiAgYWNjZXNzOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKSwgKDAsIF91dGlscy5hc3NlcnRPbmVPZikoXCJwdWJsaWNcIiwgXCJwcml2YXRlXCIsIFwicHJvdGVjdGVkXCIpKSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICBkZWNvcmF0b3JzOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjb3JhdG9yXCIpKSksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfVxufSk7XG5leHBvcnRzLmNsYXNzTWV0aG9kT3JEZWNsYXJlTWV0aG9kQ29tbW9uID0gY2xhc3NNZXRob2RPckRlY2xhcmVNZXRob2RDb21tb247XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQ2xhc3NNZXRob2RcIiwge1xuICBhbGlhc2VzOiBbXCJGdW5jdGlvblwiLCBcIlNjb3BhYmxlXCIsIFwiQmxvY2tQYXJlbnRcIiwgXCJGdW5jdGlvblBhcmVudFwiLCBcIk1ldGhvZFwiXSxcbiAgYnVpbGRlcjogW1wia2luZFwiLCBcImtleVwiLCBcInBhcmFtc1wiLCBcImJvZHlcIiwgXCJjb21wdXRlZFwiLCBcInN0YXRpY1wiLCBcImdlbmVyYXRvclwiLCBcImFzeW5jXCJdLFxuICB2aXNpdG9yOiBbXCJrZXlcIiwgXCJwYXJhbXNcIiwgXCJib2R5XCIsIFwiZGVjb3JhdG9yc1wiLCBcInJldHVyblR5cGVcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCBjbGFzc01ldGhvZE9yRGVjbGFyZU1ldGhvZENvbW1vbiwgZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiwge1xuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkJsb2NrU3RhdGVtZW50XCIpXG4gICAgfVxuICB9KVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiT2JqZWN0UGF0dGVyblwiLCB7XG4gIHZpc2l0b3I6IFtcInByb3BlcnRpZXNcIiwgXCJ0eXBlQW5ub3RhdGlvblwiLCBcImRlY29yYXRvcnNcIl0sXG4gIGJ1aWxkZXI6IFtcInByb3BlcnRpZXNcIl0sXG4gIGFsaWFzZXM6IFtcIlBhdHRlcm5cIiwgXCJQYXR0ZXJuTGlrZVwiLCBcIkxWYWxcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgcGF0dGVybkxpa2VDb21tb24sIHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJSZXN0RWxlbWVudFwiLCBcIk9iamVjdFByb3BlcnR5XCIpKSlcbiAgICB9XG4gIH0pXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJTcHJlYWRFbGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1wiYXJndW1lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIlVuYXJ5TGlrZVwiXSxcbiAgZGVwcmVjYXRlZEFsaWFzOiBcIlNwcmVhZFByb3BlcnR5XCIsXG4gIGZpZWxkczoge1xuICAgIGFyZ3VtZW50OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJTdXBlclwiLCB7XG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcInRhZ1wiLCBcInF1YXNpXCIsIFwidHlwZVBhcmFtZXRlcnNcIl0sXG4gIGJ1aWxkZXI6IFtcInRhZ1wiLCBcInF1YXNpXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0YWc6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIHF1YXNpOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUZW1wbGF0ZUxpdGVyYWxcIilcbiAgICB9LFxuICAgIHR5cGVQYXJhbWV0ZXJzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiLCBcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVGVtcGxhdGVFbGVtZW50XCIsIHtcbiAgYnVpbGRlcjogW1widmFsdWVcIiwgXCJ0YWlsXCJdLFxuICBmaWVsZHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0U2hhcGUpKHtcbiAgICAgICAgcmF3OiB7XG4gICAgICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKVxuICAgICAgICB9LFxuICAgICAgICBjb29rZWQ6IHtcbiAgICAgICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwic3RyaW5nXCIpLFxuICAgICAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICB0YWlsOiB7XG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVGVtcGxhdGVMaXRlcmFsXCIsIHtcbiAgdmlzaXRvcjogW1wicXVhc2lzXCIsIFwiZXhwcmVzc2lvbnNcIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJMaXRlcmFsXCJdLFxuICBmaWVsZHM6IHtcbiAgICBxdWFzaXM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlRlbXBsYXRlRWxlbWVudFwiKSkpXG4gICAgfSxcbiAgICBleHByZXNzaW9uczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIlRTVHlwZVwiKSksIGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbCkge1xuICAgICAgICBpZiAobm9kZS5xdWFzaXMubGVuZ3RoICE9PSB2YWwubGVuZ3RoICsgMSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE51bWJlciBvZiAke25vZGUudHlwZX0gcXVhc2lzIHNob3VsZCBiZSBleGFjdGx5IG9uZSBtb3JlIHRoYW4gdGhlIG51bWJlciBvZiBleHByZXNzaW9ucy5cXG5FeHBlY3RlZCAke3ZhbC5sZW5ndGggKyAxfSBxdWFzaXMgYnV0IGdvdCAke25vZGUucXVhc2lzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIllpZWxkRXhwcmVzc2lvblwiLCB7XG4gIGJ1aWxkZXI6IFtcImFyZ3VtZW50XCIsIFwiZGVsZWdhdGVcIl0sXG4gIHZpc2l0b3I6IFtcImFyZ3VtZW50XCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCIsIFwiVGVybWluYXRvcmxlc3NcIl0sXG4gIGZpZWxkczoge1xuICAgIGRlbGVnYXRlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSwgT2JqZWN0LmFzc2lnbihmdW5jdGlvbiAobm9kZSwga2V5LCB2YWwpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHZhbCAmJiAhbm9kZS5hcmd1bWVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9wZXJ0eSBkZWxlZ2F0ZSBvZiBZaWVsZEV4cHJlc3Npb24gY2Fubm90IGJlIHRydWUgaWYgdGhlcmUgaXMgbm8gYXJndW1lbnRcIik7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJib29sZWFuXCJcbiAgICAgIH0pKSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBhcmd1bWVudDoge1xuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJBd2FpdEV4cHJlc3Npb25cIiwge1xuICBidWlsZGVyOiBbXCJhcmd1bWVudFwiXSxcbiAgdmlzaXRvcjogW1wiYXJndW1lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJUZXJtaW5hdG9ybGVzc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgYXJndW1lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkltcG9ydFwiLCB7XG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkJpZ0ludExpdGVyYWxcIiwge1xuICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCIsIFwiTGl0ZXJhbFwiLCBcIkltbXV0YWJsZVwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCIsIHtcbiAgdmlzaXRvcjogW1wiZXhwb3J0ZWRcIl0sXG4gIGFsaWFzZXM6IFtcIk1vZHVsZVNwZWNpZmllclwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwb3J0ZWQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiLCB7XG4gIGJ1aWxkZXI6IFtcIm9iamVjdFwiLCBcInByb3BlcnR5XCIsIFwiY29tcHV0ZWRcIiwgXCJvcHRpb25hbFwiXSxcbiAgdmlzaXRvcjogW1wib2JqZWN0XCIsIFwicHJvcGVydHlcIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIG9iamVjdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH0sXG4gICAgcHJvcGVydHk6IHtcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIik7XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gbm9kZS5jb21wdXRlZCA/IGNvbXB1dGVkIDogbm9ybWFsO1xuICAgICAgICAgIHZhbGlkYXRvcihub2RlLCBrZXksIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFsaWRhdG9yLm9uZU9mTm9kZVR5cGVzID0gW1wiRXhwcmVzc2lvblwiLCBcIklkZW50aWZpZXJcIl07XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3I7XG4gICAgICB9KClcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgb3B0aW9uYWw6IHtcbiAgICAgIHZhbGlkYXRlOiAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikgOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLCAoMCwgX3V0aWxzLmFzc2VydE9wdGlvbmFsQ2hhaW5TdGFydCkoKSlcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk9wdGlvbmFsQ2FsbEV4cHJlc3Npb25cIiwge1xuICB2aXNpdG9yOiBbXCJjYWxsZWVcIiwgXCJhcmd1bWVudHNcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInR5cGVBcmd1bWVudHNcIl0sXG4gIGJ1aWxkZXI6IFtcImNhbGxlZVwiLCBcImFyZ3VtZW50c1wiLCBcIm9wdGlvbmFsXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBjYWxsZWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIlNwcmVhZEVsZW1lbnRcIiwgXCJKU1hOYW1lc3BhY2VkTmFtZVwiLCBcIkFyZ3VtZW50UGxhY2Vob2xkZXJcIikpKVxuICAgIH0sXG4gICAgb3B0aW9uYWw6IHtcbiAgICAgIHZhbGlkYXRlOiAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikgOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLCAoMCwgX3V0aWxzLmFzc2VydE9wdGlvbmFsQ2hhaW5TdGFydCkoKSlcbiAgICB9LFxuICAgIHR5cGVBcmd1bWVudHM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHR5cGVQYXJhbWV0ZXJzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkNsYXNzUHJvcGVydHlcIiwge1xuICB2aXNpdG9yOiBbXCJrZXlcIiwgXCJ2YWx1ZVwiLCBcInR5cGVBbm5vdGF0aW9uXCIsIFwiZGVjb3JhdG9yc1wiXSxcbiAgYnVpbGRlcjogW1wia2V5XCIsIFwidmFsdWVcIiwgXCJ0eXBlQW5ub3RhdGlvblwiLCBcImRlY29yYXRvcnNcIiwgXCJjb21wdXRlZFwiLCBcInN0YXRpY1wiXSxcbiAgYWxpYXNlczogW1wiUHJvcGVydHlcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgY2xhc3NNZXRob2RPclByb3BlcnR5Q29tbW9uLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZGVmaW5pdGU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHR5cGVBbm5vdGF0aW9uOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUeXBlQW5ub3RhdGlvblwiLCBcIlRTVHlwZUFubm90YXRpb25cIiwgXCJOb29wXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGRlY29yYXRvcnM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkRlY29yYXRvclwiKSkpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHJlYWRvbmx5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBkZWNsYXJlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICB2YXJpYW5jZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVmFyaWFuY2VcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfSlcbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkNsYXNzUHJpdmF0ZVByb3BlcnR5XCIsIHtcbiAgdmlzaXRvcjogW1wia2V5XCIsIFwidmFsdWVcIiwgXCJkZWNvcmF0b3JzXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGJ1aWxkZXI6IFtcImtleVwiLCBcInZhbHVlXCIsIFwiZGVjb3JhdG9yc1wiLCBcInN0YXRpY1wiXSxcbiAgYWxpYXNlczogW1wiUHJvcGVydHlcIiwgXCJQcml2YXRlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBrZXk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlByaXZhdGVOYW1lXCIpXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICB0eXBlQW5ub3RhdGlvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVHlwZUFubm90YXRpb25cIiwgXCJUU1R5cGVBbm5vdGF0aW9uXCIsIFwiTm9vcFwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBkZWNvcmF0b3JzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJEZWNvcmF0b3JcIikpKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICByZWFkb25seToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZGVmaW5pdGU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHZhcmlhbmNlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJWYXJpYW5jZVwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJDbGFzc1ByaXZhdGVNZXRob2RcIiwge1xuICBidWlsZGVyOiBbXCJraW5kXCIsIFwia2V5XCIsIFwicGFyYW1zXCIsIFwiYm9keVwiLCBcInN0YXRpY1wiXSxcbiAgdmlzaXRvcjogW1wia2V5XCIsIFwicGFyYW1zXCIsIFwiYm9keVwiLCBcImRlY29yYXRvcnNcIiwgXCJyZXR1cm5UeXBlXCIsIFwidHlwZVBhcmFtZXRlcnNcIl0sXG4gIGFsaWFzZXM6IFtcIkZ1bmN0aW9uXCIsIFwiU2NvcGFibGVcIiwgXCJCbG9ja1BhcmVudFwiLCBcIkZ1bmN0aW9uUGFyZW50XCIsIFwiTWV0aG9kXCIsIFwiUHJpdmF0ZVwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCBjbGFzc01ldGhvZE9yRGVjbGFyZU1ldGhvZENvbW1vbiwgZnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbiwge1xuICAgIGtleToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiUHJpdmF0ZU5hbWVcIilcbiAgICB9LFxuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkJsb2NrU3RhdGVtZW50XCIpXG4gICAgfVxuICB9KVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUHJpdmF0ZU5hbWVcIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiXSxcbiAgYWxpYXNlczogW1wiUHJpdmF0ZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIilcbiAgICB9XG4gIH1cbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJBcmd1bWVudFBsYWNlaG9sZGVyXCIsIHt9KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJCaW5kRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcIm9iamVjdFwiLCBcImNhbGxlZVwiXSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/IHtcbiAgICBvYmplY3Q6IHtcbiAgICAgIHZhbGlkYXRlOiBPYmplY3QuYXNzaWduKCgpID0+IHt9LCB7XG4gICAgICAgIG9uZU9mTm9kZVR5cGVzOiBbXCJFeHByZXNzaW9uXCJdXG4gICAgICB9KVxuICAgIH0sXG4gICAgY2FsbGVlOiB7XG4gICAgICB2YWxpZGF0ZTogT2JqZWN0LmFzc2lnbigoKSA9PiB7fSwge1xuICAgICAgICBvbmVPZk5vZGVUeXBlczogW1wiRXhwcmVzc2lvblwiXVxuICAgICAgfSlcbiAgICB9XG4gIH0gOiB7XG4gICAgb2JqZWN0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfSxcbiAgICBjYWxsZWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkltcG9ydEF0dHJpYnV0ZVwiLCB7XG4gIHZpc2l0b3I6IFtcImtleVwiLCBcInZhbHVlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBrZXk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiwgXCJTdHJpbmdMaXRlcmFsXCIpXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RyaW5nTGl0ZXJhbFwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRGVjb3JhdG9yXCIsIHtcbiAgdmlzaXRvcjogW1wiZXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRG9FeHByZXNzaW9uXCIsIHtcbiAgdmlzaXRvcjogW1wiYm9keVwiXSxcbiAgYnVpbGRlcjogW1wiYm9keVwiLCBcImFzeW5jXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJCbG9ja1N0YXRlbWVudFwiKVxuICAgIH0sXG4gICAgYXN5bmM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkV4cG9ydERlZmF1bHRTcGVjaWZpZXJcIiwge1xuICB2aXNpdG9yOiBbXCJleHBvcnRlZFwiXSxcbiAgYWxpYXNlczogW1wiTW9kdWxlU3BlY2lmaWVyXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHBvcnRlZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUmVjb3JkRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcInByb3BlcnRpZXNcIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIk9iamVjdFByb3BlcnR5XCIsIFwiU3ByZWFkRWxlbWVudFwiKSkpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUdXBsZUV4cHJlc3Npb25cIiwge1xuICBmaWVsZHM6IHtcbiAgICBlbGVtZW50czoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIlNwcmVhZEVsZW1lbnRcIikpKSxcbiAgICAgIGRlZmF1bHQ6IFtdXG4gICAgfVxuICB9LFxuICB2aXNpdG9yOiBbXCJlbGVtZW50c1wiXSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRGVjaW1hbExpdGVyYWxcIiwge1xuICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCIsIFwiTGl0ZXJhbFwiLCBcIkltbXV0YWJsZVwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiU3RhdGljQmxvY2tcIiwge1xuICB2aXNpdG9yOiBbXCJib2R5XCJdLFxuICBmaWVsZHM6IHtcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJTdGF0ZW1lbnRcIikpKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiU2NvcGFibGVcIiwgXCJCbG9ja1BhcmVudFwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTW9kdWxlRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIGJvZHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlByb2dyYW1cIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRvcGljUmVmZXJlbmNlXCIsIHtcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUGlwZWxpbmVUb3BpY0V4cHJlc3Npb25cIiwge1xuICBidWlsZGVyOiBbXCJleHByZXNzaW9uXCJdLFxuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHByZXNzaW9uOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9LFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJQaXBlbGluZUJhcmVGdW5jdGlvblwiLCB7XG4gIGJ1aWxkZXI6IFtcImNhbGxlZVwiXSxcbiAgdmlzaXRvcjogW1wiY2FsbGVlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBjYWxsZWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlBpcGVsaW5lUHJpbWFyeVRvcGljUmVmZXJlbmNlXCIsIHtcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXVxufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuY29uc3QgZGVmaW5lSW50ZXJmYWNlaXNoVHlwZSA9IChuYW1lLCB0eXBlUGFyYW1ldGVyVHlwZSA9IFwiVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpID0+IHtcbiAgKDAsIF91dGlscy5kZWZhdWx0KShuYW1lLCB7XG4gICAgYnVpbGRlcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcImV4dGVuZHNcIiwgXCJib2R5XCJdLFxuICAgIHZpc2l0b3I6IFtcImlkXCIsIFwidHlwZVBhcmFtZXRlcnNcIiwgXCJleHRlbmRzXCIsIFwibWl4aW5zXCIsIFwiaW1wbGVtZW50c1wiLCBcImJvZHlcIl0sXG4gICAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dEZWNsYXJhdGlvblwiLCBcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICAgIGZpZWxkczoge1xuICAgICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgICB0eXBlUGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkodHlwZVBhcmFtZXRlclR5cGUpLFxuICAgICAgZXh0ZW5kczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIkludGVyZmFjZUV4dGVuZHNcIikpLFxuICAgICAgbWl4aW5zOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFwiSW50ZXJmYWNlRXh0ZW5kc1wiKSksXG4gICAgICBpbXBsZW1lbnRzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFwiQ2xhc3NJbXBsZW1lbnRzXCIpKSxcbiAgICAgIGJvZHk6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIk9iamVjdFR5cGVBbm5vdGF0aW9uXCIpXG4gICAgfVxuICB9KTtcbn07XG5cbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJBbnlUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiLCBcIkZsb3dCYXNlQW5ub3RhdGlvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQXJyYXlUeXBlQW5ub3RhdGlvblwiLCB7XG4gIHZpc2l0b3I6IFtcImVsZW1lbnRUeXBlXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIGVsZW1lbnRUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJCb29sZWFuVHlwZUFubm90YXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIiwgXCJGbG93QmFzZUFubm90YXRpb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkJvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb25cIiwge1xuICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dUeXBlXCJdLFxuICBmaWVsZHM6IHtcbiAgICB2YWx1ZTogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiLCBcIkZsb3dCYXNlQW5ub3RhdGlvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiQ2xhc3NJbXBsZW1lbnRzXCIsIHtcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIilcbiAgfVxufSk7XG5kZWZpbmVJbnRlcmZhY2Vpc2hUeXBlKFwiRGVjbGFyZUNsYXNzXCIpO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkRlY2xhcmVGdW5jdGlvblwiLCB7XG4gIHZpc2l0b3I6IFtcImlkXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd0RlY2xhcmF0aW9uXCIsIFwiU3RhdGVtZW50XCIsIFwiRGVjbGFyYXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHByZWRpY2F0ZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJEZWNsYXJlZFByZWRpY2F0ZVwiKVxuICB9XG59KTtcbmRlZmluZUludGVyZmFjZWlzaFR5cGUoXCJEZWNsYXJlSW50ZXJmYWNlXCIpO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkRlY2xhcmVNb2R1bGVcIiwge1xuICBidWlsZGVyOiBbXCJpZFwiLCBcImJvZHlcIiwgXCJraW5kXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcImJvZHlcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93RGVjbGFyYXRpb25cIiwgXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShbXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiXSksXG4gICAgYm9keTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiQmxvY2tTdGF0ZW1lbnRcIiksXG4gICAga2luZDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcIkNvbW1vbkpTXCIsIFwiRVNcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIsIHtcbiAgdmlzaXRvcjogW1widHlwZUFubm90YXRpb25cIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93RGVjbGFyYXRpb25cIiwgXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlR5cGVBbm5vdGF0aW9uXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkRlY2xhcmVUeXBlQWxpYXNcIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwicmlnaHRcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93RGVjbGFyYXRpb25cIiwgXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpLFxuICAgIHJpZ2h0OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJEZWNsYXJlT3BhcXVlVHlwZVwiLCB7XG4gIHZpc2l0b3I6IFtcImlkXCIsIFwidHlwZVBhcmFtZXRlcnNcIiwgXCJzdXBlcnR5cGVcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93RGVjbGFyYXRpb25cIiwgXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpLFxuICAgIHN1cGVydHlwZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJGbG93VHlwZVwiKSxcbiAgICBpbXBsdHlwZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJGbG93VHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJEZWNsYXJlVmFyaWFibGVcIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dEZWNsYXJhdGlvblwiLCBcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJkZWNsYXJhdGlvblwiLCBcInNwZWNpZmllcnNcIiwgXCJzb3VyY2VcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93RGVjbGFyYXRpb25cIiwgXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZGVjbGFyYXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiRmxvd1wiKSxcbiAgICBzcGVjaWZpZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFtcIkV4cG9ydFNwZWNpZmllclwiLCBcIkV4cG9ydE5hbWVzcGFjZVNwZWNpZmllclwiXSkpLFxuICAgIHNvdXJjZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJTdHJpbmdMaXRlcmFsXCIpLFxuICAgIGRlZmF1bHQ6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRGVjbGFyZUV4cG9ydEFsbERlY2xhcmF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wic291cmNlXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd0RlY2xhcmF0aW9uXCIsIFwiU3RhdGVtZW50XCIsIFwiRGVjbGFyYXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHNvdXJjZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiU3RyaW5nTGl0ZXJhbFwiKSxcbiAgICBleHBvcnRLaW5kOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKCgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwidHlwZVwiLCBcInZhbHVlXCIpKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJEZWNsYXJlZFByZWRpY2F0ZVwiLCB7XG4gIHZpc2l0b3I6IFtcInZhbHVlXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1ByZWRpY2F0ZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRXhpc3RzVHlwZUFubm90YXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkZ1bmN0aW9uVHlwZUFubm90YXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInBhcmFtc1wiLCBcInJlc3RcIiwgXCJyZXR1cm5UeXBlXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiKSxcbiAgICBwYXJhbXM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFwiRnVuY3Rpb25UeXBlUGFyYW1cIikpLFxuICAgIHJlc3Q6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiRnVuY3Rpb25UeXBlUGFyYW1cIiksXG4gICAgdGhpczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJGdW5jdGlvblR5cGVQYXJhbVwiKSxcbiAgICByZXR1cm5UeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJGdW5jdGlvblR5cGVQYXJhbVwiLCB7XG4gIHZpc2l0b3I6IFtcIm5hbWVcIiwgXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiXSxcbiAgZmllbGRzOiB7XG4gICAgbmFtZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKSxcbiAgICBvcHRpb25hbDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJHZW5lcmljVHlwZUFubm90YXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiLCBcInR5cGVQYXJhbWV0ZXJzXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoW1wiSWRlbnRpZmllclwiLCBcIlF1YWxpZmllZFR5cGVJZGVudGlmaWVyXCJdKSxcbiAgICB0eXBlUGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJbmZlcnJlZFByZWRpY2F0ZVwiLCB7XG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93UHJlZGljYXRlXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJJbnRlcmZhY2VFeHRlbmRzXCIsIHtcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShbXCJJZGVudGlmaWVyXCIsIFwiUXVhbGlmaWVkVHlwZUlkZW50aWZpZXJcIl0pLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpXG4gIH1cbn0pO1xuZGVmaW5lSW50ZXJmYWNlaXNoVHlwZShcIkludGVyZmFjZURlY2xhcmF0aW9uXCIpO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkludGVyZmFjZVR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wiZXh0ZW5kc1wiLCBcImJvZHlcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXh0ZW5kczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIkludGVyZmFjZUV4dGVuZHNcIikpLFxuICAgIGJvZHk6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIk9iamVjdFR5cGVBbm5vdGF0aW9uXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1widHlwZXNcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZXM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFwiRmxvd1R5cGVcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk1peGVkVHlwZUFubm90YXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIiwgXCJGbG93QmFzZUFubm90YXRpb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkVtcHR5VHlwZUFubm90YXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIiwgXCJGbG93QmFzZUFubm90YXRpb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk51bGxhYmxlVHlwZUFubm90YXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dUeXBlXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRmxvd1R5cGVcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgYnVpbGRlcjogW1widmFsdWVcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcIm51bWJlclwiKSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiTnVtYmVyVHlwZUFubm90YXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIiwgXCJGbG93QmFzZUFubm90YXRpb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk9iamVjdFR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wicHJvcGVydGllc1wiLCBcImluZGV4ZXJzXCIsIFwiY2FsbFByb3BlcnRpZXNcIiwgXCJpbnRlcm5hbFNsb3RzXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl0sXG4gIGJ1aWxkZXI6IFtcInByb3BlcnRpZXNcIiwgXCJpbmRleGVyc1wiLCBcImNhbGxQcm9wZXJ0aWVzXCIsIFwiaW50ZXJuYWxTbG90c1wiLCBcImV4YWN0XCJdLFxuICBmaWVsZHM6IHtcbiAgICBwcm9wZXJ0aWVzOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShbXCJPYmplY3RUeXBlUHJvcGVydHlcIiwgXCJPYmplY3RUeXBlU3ByZWFkUHJvcGVydHlcIl0pKSxcbiAgICBpbmRleGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIk9iamVjdFR5cGVJbmRleGVyXCIpKSxcbiAgICBjYWxsUHJvcGVydGllczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIk9iamVjdFR5cGVDYWxsUHJvcGVydHlcIikpLFxuICAgIGludGVybmFsU2xvdHM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoKDAsIF91dGlscy5hcnJheU9mVHlwZSkoXCJPYmplY3RUeXBlSW50ZXJuYWxTbG90XCIpKSxcbiAgICBleGFjdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaW5leGFjdDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJPYmplY3RUeXBlSW50ZXJuYWxTbG90XCIsIHtcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ2YWx1ZVwiLCBcIm9wdGlvbmFsXCIsIFwic3RhdGljXCIsIFwibWV0aG9kXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiVXNlcldoaXRlc3BhY2FibGVcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHZhbHVlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKSxcbiAgICBvcHRpb25hbDogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSksXG4gICAgc3RhdGljOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKSxcbiAgICBtZXRob2Q6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk9iamVjdFR5cGVDYWxsUHJvcGVydHlcIiwge1xuICB2aXNpdG9yOiBbXCJ2YWx1ZVwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIlVzZXJXaGl0ZXNwYWNhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICB2YWx1ZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRmxvd1R5cGVcIiksXG4gICAgc3RhdGljOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJPYmplY3RUeXBlSW5kZXhlclwiLCB7XG4gIHZpc2l0b3I6IFtcImlkXCIsIFwia2V5XCIsIFwidmFsdWVcIiwgXCJ2YXJpYW5jZVwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIlVzZXJXaGl0ZXNwYWNhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIGtleTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRmxvd1R5cGVcIiksXG4gICAgdmFsdWU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dUeXBlXCIpLFxuICAgIHN0YXRpYzogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSksXG4gICAgdmFyaWFuY2U6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVmFyaWFuY2VcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiT2JqZWN0VHlwZVByb3BlcnR5XCIsIHtcbiAgdmlzaXRvcjogW1wia2V5XCIsIFwidmFsdWVcIiwgXCJ2YXJpYW5jZVwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIlVzZXJXaGl0ZXNwYWNhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBrZXk6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShbXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiXSksXG4gICAgdmFsdWU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dUeXBlXCIpLFxuICAgIGtpbmQ6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwiaW5pdFwiLCBcImdldFwiLCBcInNldFwiKSksXG4gICAgc3RhdGljOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKSxcbiAgICBwcm90bzogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSksXG4gICAgb3B0aW9uYWw6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikpLFxuICAgIHZhcmlhbmNlOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlZhcmlhbmNlXCIpLFxuICAgIG1ldGhvZDogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiT2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5XCIsIHtcbiAgdmlzaXRvcjogW1wiYXJndW1lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJVc2VyV2hpdGVzcGFjYWJsZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgYXJndW1lbnQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dUeXBlXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIk9wYXF1ZVR5cGVcIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwic3VwZXJ0eXBlXCIsIFwiaW1wbHR5cGVcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93RGVjbGFyYXRpb25cIiwgXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpLFxuICAgIHN1cGVydHlwZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJGbG93VHlwZVwiKSxcbiAgICBpbXBsdHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRmxvd1R5cGVcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUXVhbGlmaWVkVHlwZUlkZW50aWZpZXJcIiwge1xuICB2aXNpdG9yOiBbXCJpZFwiLCBcInF1YWxpZmljYXRpb25cIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHF1YWxpZmljYXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShbXCJJZGVudGlmaWVyXCIsIFwiUXVhbGlmaWVkVHlwZUlkZW50aWZpZXJcIl0pXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlN0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGJ1aWxkZXI6IFtcInZhbHVlXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIHZhbHVlOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlN0cmluZ1R5cGVBbm5vdGF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dUeXBlXCIsIFwiRmxvd0Jhc2VBbm5vdGF0aW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJTeW1ib2xUeXBlQW5ub3RhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiLCBcIkZsb3dCYXNlQW5ub3RhdGlvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVGhpc1R5cGVBbm5vdGF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dUeXBlXCIsIFwiRmxvd0Jhc2VBbm5vdGF0aW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUdXBsZVR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1widHlwZXNcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZXM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFwiRmxvd1R5cGVcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlR5cGVvZlR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1wiYXJndW1lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgYXJndW1lbnQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dUeXBlXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlR5cGVBbGlhc1wiLCB7XG4gIHZpc2l0b3I6IFtcImlkXCIsIFwidHlwZVBhcmFtZXRlcnNcIiwgXCJyaWdodFwiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dEZWNsYXJhdGlvblwiLCBcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICB0eXBlUGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiksXG4gICAgcmlnaHQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dUeXBlXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRmxvd1wiXSxcbiAgdmlzaXRvcjogW1widHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUeXBlQ2FzdEV4cHJlc3Npb25cIiwge1xuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJFeHByZXNzaW9uV3JhcHBlclwiLCBcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkV4cHJlc3Npb25cIiksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlR5cGVBbm5vdGF0aW9uXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlR5cGVQYXJhbWV0ZXJcIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCJdLFxuICB2aXNpdG9yOiBbXCJib3VuZFwiLCBcImRlZmF1bHRcIiwgXCJ2YXJpYW5jZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgbmFtZTogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwic3RyaW5nXCIpKSxcbiAgICBib3VuZDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUeXBlQW5ub3RhdGlvblwiKSxcbiAgICBkZWZhdWx0OiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIkZsb3dUeXBlXCIpLFxuICAgIHZhcmlhbmNlOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlZhcmlhbmNlXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkZsb3dcIl0sXG4gIHZpc2l0b3I6IFtcInBhcmFtc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgcGFyYW1zOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIlR5cGVQYXJhbWV0ZXJcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRmxvd1wiXSxcbiAgdmlzaXRvcjogW1wicGFyYW1zXCJdLFxuICBmaWVsZHM6IHtcbiAgICBwYXJhbXM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXJyYXlPZlR5cGUpKFwiRmxvd1R5cGVcIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlVuaW9uVHlwZUFubm90YXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJ0eXBlc1wiXSxcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dUeXBlXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlczogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hcnJheU9mVHlwZSkoXCJGbG93VHlwZVwiKSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVmFyaWFuY2VcIiwge1xuICBhbGlhc2VzOiBbXCJGbG93XCJdLFxuICBidWlsZGVyOiBbXCJraW5kXCJdLFxuICBmaWVsZHM6IHtcbiAgICBraW5kOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcIm1pbnVzXCIsIFwicGx1c1wiKSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVm9pZFR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRmxvd1wiLCBcIkZsb3dUeXBlXCIsIFwiRmxvd0Jhc2VBbm5vdGF0aW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJFbnVtRGVjbGFyYXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJib2R5XCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICBib2R5OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoW1wiRW51bUJvb2xlYW5Cb2R5XCIsIFwiRW51bU51bWJlckJvZHlcIiwgXCJFbnVtU3RyaW5nQm9keVwiLCBcIkVudW1TeW1ib2xCb2R5XCJdKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJFbnVtQm9vbGVhbkJvZHlcIiwge1xuICBhbGlhc2VzOiBbXCJFbnVtQm9keVwiXSxcbiAgdmlzaXRvcjogW1wibWVtYmVyc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwbGljaXRUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKSxcbiAgICBtZW1iZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlQXJyYXlPZlR5cGUpKFwiRW51bUJvb2xlYW5NZW1iZXJcIiksXG4gICAgaGFzVW5rbm93bk1lbWJlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkVudW1OdW1iZXJCb2R5XCIsIHtcbiAgYWxpYXNlczogW1wiRW51bUJvZHlcIl0sXG4gIHZpc2l0b3I6IFtcIm1lbWJlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cGxpY2l0VHlwZTogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSksXG4gICAgbWVtYmVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIkVudW1OdW1iZXJNZW1iZXJcIiksXG4gICAgaGFzVW5rbm93bk1lbWJlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkVudW1TdHJpbmdCb2R5XCIsIHtcbiAgYWxpYXNlczogW1wiRW51bUJvZHlcIl0sXG4gIHZpc2l0b3I6IFtcIm1lbWJlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cGxpY2l0VHlwZTogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSksXG4gICAgbWVtYmVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShbXCJFbnVtU3RyaW5nTWVtYmVyXCIsIFwiRW51bURlZmF1bHRlZE1lbWJlclwiXSksXG4gICAgaGFzVW5rbm93bk1lbWJlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIikpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkVudW1TeW1ib2xCb2R5XCIsIHtcbiAgYWxpYXNlczogW1wiRW51bUJvZHlcIl0sXG4gIHZpc2l0b3I6IFtcIm1lbWJlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIG1lbWJlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJFbnVtRGVmYXVsdGVkTWVtYmVyXCIpLFxuICAgIGhhc1Vua25vd25NZW1iZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJFbnVtQm9vbGVhbk1lbWJlclwiLCB7XG4gIGFsaWFzZXM6IFtcIkVudW1NZW1iZXJcIl0sXG4gIHZpc2l0b3I6IFtcImlkXCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICBpbml0OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJCb29sZWFuTGl0ZXJhbFwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJFbnVtTnVtYmVyTWVtYmVyXCIsIHtcbiAgYWxpYXNlczogW1wiRW51bU1lbWJlclwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJpbml0XCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICBpbml0OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJOdW1lcmljTGl0ZXJhbFwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJFbnVtU3RyaW5nTWVtYmVyXCIsIHtcbiAgYWxpYXNlczogW1wiRW51bU1lbWJlclwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJpbml0XCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKSxcbiAgICBpbml0OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJTdHJpbmdMaXRlcmFsXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkVudW1EZWZhdWx0ZWRNZW1iZXJcIiwge1xuICBhbGlhc2VzOiBbXCJFbnVtTWVtYmVyXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiXSxcbiAgZmllbGRzOiB7XG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSW5kZXhlZEFjY2Vzc1R5cGVcIiwge1xuICB2aXNpdG9yOiBbXCJvYmplY3RUeXBlXCIsIFwiaW5kZXhUeXBlXCJdLFxuICBhbGlhc2VzOiBbXCJGbG93XCIsIFwiRmxvd1R5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIG9iamVjdFR5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkZsb3dUeXBlXCIpLFxuICAgIGluZGV4VHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRmxvd1R5cGVcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiT3B0aW9uYWxJbmRleGVkQWNjZXNzVHlwZVwiLCB7XG4gIHZpc2l0b3I6IFtcIm9iamVjdFR5cGVcIiwgXCJpbmRleFR5cGVcIl0sXG4gIGFsaWFzZXM6IFtcIkZsb3dcIiwgXCJGbG93VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgb2JqZWN0VHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRmxvd1R5cGVcIiksXG4gICAgaW5kZXhUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJGbG93VHlwZVwiKSxcbiAgICBvcHRpb25hbDogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSlcbiAgfVxufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWSVNJVE9SX0tFWVNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLlZJU0lUT1JfS0VZUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBTElBU19LRVlTXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlscy5BTElBU19LRVlTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZMSVBQRURfQUxJQVNfS0VZU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuRkxJUFBFRF9BTElBU19LRVlTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5PREVfRklFTERTXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlscy5OT0RFX0ZJRUxEUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCVUlMREVSX0tFWVNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLkJVSUxERVJfS0VZUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJERVBSRUNBVEVEX0tFWVNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLkRFUFJFQ0FURURfS0VZUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOT0RFX1BBUkVOVF9WQUxJREFUSU9OU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuTk9ERV9QQVJFTlRfVkFMSURBVElPTlM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUExBQ0VIT0xERVJTXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9wbGFjZWhvbGRlcnMuUExBQ0VIT0xERVJTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBMQUNFSE9MREVSU19BTElBU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcGxhY2Vob2xkZXJzLlBMQUNFSE9MREVSU19BTElBUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQTEFDRUhPTERFUlNfRkxJUFBFRF9BTElBU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcGxhY2Vob2xkZXJzLlBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTO1xuICB9XG59KTtcbmV4cG9ydHMuVFlQRVMgPSB2b2lkIDA7XG5cbnZhciBfdG9GYXN0UHJvcGVydGllcyA9IHJlcXVpcmUoXCJ0by1mYXN0LXByb3BlcnRpZXNcIik7XG5cbnJlcXVpcmUoXCIuL2NvcmVcIik7XG5cbnJlcXVpcmUoXCIuL2Zsb3dcIik7XG5cbnJlcXVpcmUoXCIuL2pzeFwiKTtcblxucmVxdWlyZShcIi4vbWlzY1wiKTtcblxucmVxdWlyZShcIi4vZXhwZXJpbWVudGFsXCIpO1xuXG5yZXF1aXJlKFwiLi90eXBlc2NyaXB0XCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbnZhciBfcGxhY2Vob2xkZXJzID0gcmVxdWlyZShcIi4vcGxhY2Vob2xkZXJzXCIpO1xuXG5fdG9GYXN0UHJvcGVydGllcyhfdXRpbHMuVklTSVRPUl9LRVlTKTtcblxuX3RvRmFzdFByb3BlcnRpZXMoX3V0aWxzLkFMSUFTX0tFWVMpO1xuXG5fdG9GYXN0UHJvcGVydGllcyhfdXRpbHMuRkxJUFBFRF9BTElBU19LRVlTKTtcblxuX3RvRmFzdFByb3BlcnRpZXMoX3V0aWxzLk5PREVfRklFTERTKTtcblxuX3RvRmFzdFByb3BlcnRpZXMoX3V0aWxzLkJVSUxERVJfS0VZUyk7XG5cbl90b0Zhc3RQcm9wZXJ0aWVzKF91dGlscy5ERVBSRUNBVEVEX0tFWVMpO1xuXG5fdG9GYXN0UHJvcGVydGllcyhfcGxhY2Vob2xkZXJzLlBMQUNFSE9MREVSU19BTElBUyk7XG5cbl90b0Zhc3RQcm9wZXJ0aWVzKF9wbGFjZWhvbGRlcnMuUExBQ0VIT0xERVJTX0ZMSVBQRURfQUxJQVMpO1xuXG5jb25zdCBUWVBFUyA9IE9iamVjdC5rZXlzKF91dGlscy5WSVNJVE9SX0tFWVMpLmNvbmNhdChPYmplY3Qua2V5cyhfdXRpbHMuRkxJUFBFRF9BTElBU19LRVlTKSkuY29uY2F0KE9iamVjdC5rZXlzKF91dGlscy5ERVBSRUNBVEVEX0tFWVMpKTtcbmV4cG9ydHMuVFlQRVMgPSBUWVBFUzsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSlNYQXR0cmlidXRlXCIsIHtcbiAgdmlzaXRvcjogW1wibmFtZVwiLCBcInZhbHVlXCJdLFxuICBhbGlhc2VzOiBbXCJKU1hcIiwgXCJJbW11dGFibGVcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWElkZW50aWZpZXJcIiwgXCJKU1hOYW1lc3BhY2VkTmFtZVwiKVxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYRWxlbWVudFwiLCBcIkpTWEZyYWdtZW50XCIsIFwiU3RyaW5nTGl0ZXJhbFwiLCBcIkpTWEV4cHJlc3Npb25Db250YWluZXJcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWENsb3NpbmdFbGVtZW50XCIsIHtcbiAgdmlzaXRvcjogW1wibmFtZVwiXSxcbiAgYWxpYXNlczogW1wiSlNYXCIsIFwiSW1tdXRhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hJZGVudGlmaWVyXCIsIFwiSlNYTWVtYmVyRXhwcmVzc2lvblwiLCBcIkpTWE5hbWVzcGFjZWROYW1lXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJKU1hFbGVtZW50XCIsIHtcbiAgYnVpbGRlcjogW1wib3BlbmluZ0VsZW1lbnRcIiwgXCJjbG9zaW5nRWxlbWVudFwiLCBcImNoaWxkcmVuXCIsIFwic2VsZkNsb3NpbmdcIl0sXG4gIHZpc2l0b3I6IFtcIm9wZW5pbmdFbGVtZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJjbG9zaW5nRWxlbWVudFwiXSxcbiAgYWxpYXNlczogW1wiSlNYXCIsIFwiSW1tdXRhYmxlXCIsIFwiRXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgb3BlbmluZ0VsZW1lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWE9wZW5pbmdFbGVtZW50XCIpXG4gICAgfSxcbiAgICBjbG9zaW5nRWxlbWVudDoge1xuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hDbG9zaW5nRWxlbWVudFwiKVxuICAgIH0sXG4gICAgY2hpbGRyZW46IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWFRleHRcIiwgXCJKU1hFeHByZXNzaW9uQ29udGFpbmVyXCIsIFwiSlNYU3ByZWFkQ2hpbGRcIiwgXCJKU1hFbGVtZW50XCIsIFwiSlNYRnJhZ21lbnRcIikpKVxuICAgIH0sXG4gICAgc2VsZkNsb3Npbmc6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWEVtcHR5RXhwcmVzc2lvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkpTWFwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCB7XG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGFsaWFzZXM6IFtcIkpTWFwiLCBcIkltbXV0YWJsZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIkpTWEVtcHR5RXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSlNYU3ByZWFkQ2hpbGRcIiwge1xuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCJdLFxuICBhbGlhc2VzOiBbXCJKU1hcIiwgXCJJbW11dGFibGVcIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWElkZW50aWZpZXJcIiwge1xuICBidWlsZGVyOiBbXCJuYW1lXCJdLFxuICBhbGlhc2VzOiBbXCJKU1hcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWE1lbWJlckV4cHJlc3Npb25cIiwge1xuICB2aXNpdG9yOiBbXCJvYmplY3RcIiwgXCJwcm9wZXJ0eVwiXSxcbiAgYWxpYXNlczogW1wiSlNYXCJdLFxuICBmaWVsZHM6IHtcbiAgICBvYmplY3Q6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWE1lbWJlckV4cHJlc3Npb25cIiwgXCJKU1hJZGVudGlmaWVyXCIpXG4gICAgfSxcbiAgICBwcm9wZXJ0eToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYSWRlbnRpZmllclwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSlNYTmFtZXNwYWNlZE5hbWVcIiwge1xuICB2aXNpdG9yOiBbXCJuYW1lc3BhY2VcIiwgXCJuYW1lXCJdLFxuICBhbGlhc2VzOiBbXCJKU1hcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWVzcGFjZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYSWRlbnRpZmllclwiKVxuICAgIH0sXG4gICAgbmFtZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYSWRlbnRpZmllclwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSlNYT3BlbmluZ0VsZW1lbnRcIiwge1xuICBidWlsZGVyOiBbXCJuYW1lXCIsIFwiYXR0cmlidXRlc1wiLCBcInNlbGZDbG9zaW5nXCJdLFxuICB2aXNpdG9yOiBbXCJuYW1lXCIsIFwiYXR0cmlidXRlc1wiXSxcbiAgYWxpYXNlczogW1wiSlNYXCIsIFwiSW1tdXRhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hJZGVudGlmaWVyXCIsIFwiSlNYTWVtYmVyRXhwcmVzc2lvblwiLCBcIkpTWE5hbWVzcGFjZWROYW1lXCIpXG4gICAgfSxcbiAgICBzZWxmQ2xvc2luZzoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmNoYWluKSgoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJhcnJheVwiKSwgKDAsIF91dGlscy5hc3NlcnRFYWNoKSgoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWEF0dHJpYnV0ZVwiLCBcIkpTWFNwcmVhZEF0dHJpYnV0ZVwiKSkpXG4gICAgfSxcbiAgICB0eXBlUGFyYW1ldGVyczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiwgXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWFNwcmVhZEF0dHJpYnV0ZVwiLCB7XG4gIHZpc2l0b3I6IFtcImFyZ3VtZW50XCJdLFxuICBhbGlhc2VzOiBbXCJKU1hcIl0sXG4gIGZpZWxkczoge1xuICAgIGFyZ3VtZW50OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJKU1hUZXh0XCIsIHtcbiAgYWxpYXNlczogW1wiSlNYXCIsIFwiSW1tdXRhYmxlXCJdLFxuICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWEZyYWdtZW50XCIsIHtcbiAgYnVpbGRlcjogW1wib3BlbmluZ0ZyYWdtZW50XCIsIFwiY2xvc2luZ0ZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIl0sXG4gIHZpc2l0b3I6IFtcIm9wZW5pbmdGcmFnbWVudFwiLCBcImNoaWxkcmVuXCIsIFwiY2xvc2luZ0ZyYWdtZW50XCJdLFxuICBhbGlhc2VzOiBbXCJKU1hcIiwgXCJJbW11dGFibGVcIiwgXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBvcGVuaW5nRnJhZ21lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWE9wZW5pbmdGcmFnbWVudFwiKVxuICAgIH0sXG4gICAgY2xvc2luZ0ZyYWdtZW50OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hDbG9zaW5nRnJhZ21lbnRcIilcbiAgICB9LFxuICAgIGNoaWxkcmVuOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hUZXh0XCIsIFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCBcIkpTWFNwcmVhZENoaWxkXCIsIFwiSlNYRWxlbWVudFwiLCBcIkpTWEZyYWdtZW50XCIpKSlcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkpTWE9wZW5pbmdGcmFnbWVudFwiLCB7XG4gIGFsaWFzZXM6IFtcIkpTWFwiLCBcIkltbXV0YWJsZVwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiSlNYQ2xvc2luZ0ZyYWdtZW50XCIsIHtcbiAgYWxpYXNlczogW1wiSlNYXCIsIFwiSW1tdXRhYmxlXCJdXG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgX3BsYWNlaG9sZGVycyA9IHJlcXVpcmUoXCIuL3BsYWNlaG9sZGVyc1wiKTtcblxue1xuICAoMCwgX3V0aWxzLmRlZmF1bHQpKFwiTm9vcFwiLCB7XG4gICAgdmlzaXRvcjogW11cbiAgfSk7XG59XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUGxhY2Vob2xkZXJcIiwge1xuICB2aXNpdG9yOiBbXSxcbiAgYnVpbGRlcjogW1wiZXhwZWN0ZWROb2RlXCIsIFwibmFtZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgbmFtZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICAgIH0sXG4gICAgZXhwZWN0ZWROb2RlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoLi4uX3BsYWNlaG9sZGVycy5QTEFDRUhPTERFUlMpXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJWOEludHJpbnNpY0lkZW50aWZpZXJcIiwge1xuICBidWlsZGVyOiBbXCJuYW1lXCJdLFxuICBmaWVsZHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwic3RyaW5nXCIpXG4gICAgfVxuICB9XG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUExBQ0VIT0xERVJTX0ZMSVBQRURfQUxJQVMgPSBleHBvcnRzLlBMQUNFSE9MREVSU19BTElBUyA9IGV4cG9ydHMuUExBQ0VIT0xERVJTID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmNvbnN0IFBMQUNFSE9MREVSUyA9IFtcIklkZW50aWZpZXJcIiwgXCJTdHJpbmdMaXRlcmFsXCIsIFwiRXhwcmVzc2lvblwiLCBcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCIsIFwiQmxvY2tTdGF0ZW1lbnRcIiwgXCJDbGFzc0JvZHlcIiwgXCJQYXR0ZXJuXCJdO1xuZXhwb3J0cy5QTEFDRUhPTERFUlMgPSBQTEFDRUhPTERFUlM7XG5jb25zdCBQTEFDRUhPTERFUlNfQUxJQVMgPSB7XG4gIERlY2xhcmF0aW9uOiBbXCJTdGF0ZW1lbnRcIl0sXG4gIFBhdHRlcm46IFtcIlBhdHRlcm5MaWtlXCIsIFwiTFZhbFwiXVxufTtcbmV4cG9ydHMuUExBQ0VIT0xERVJTX0FMSUFTID0gUExBQ0VIT0xERVJTX0FMSUFTO1xuXG5mb3IgKGNvbnN0IHR5cGUgb2YgUExBQ0VIT0xERVJTKSB7XG4gIGNvbnN0IGFsaWFzID0gX3V0aWxzLkFMSUFTX0tFWVNbdHlwZV07XG4gIGlmIChhbGlhcyAhPSBudWxsICYmIGFsaWFzLmxlbmd0aCkgUExBQ0VIT0xERVJTX0FMSUFTW3R5cGVdID0gYWxpYXM7XG59XG5cbmNvbnN0IFBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTID0ge307XG5leHBvcnRzLlBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTID0gUExBQ0VIT0xERVJTX0ZMSVBQRURfQUxJQVM7XG5PYmplY3Qua2V5cyhQTEFDRUhPTERFUlNfQUxJQVMpLmZvckVhY2godHlwZSA9PiB7XG4gIFBMQUNFSE9MREVSU19BTElBU1t0eXBlXS5mb3JFYWNoKGFsaWFzID0+IHtcbiAgICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKFBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTLCBhbGlhcykpIHtcbiAgICAgIFBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTW2FsaWFzXSA9IFtdO1xuICAgIH1cblxuICAgIFBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTW2FsaWFzXS5wdXNoKHR5cGUpO1xuICB9KTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5cbnZhciBfaXMgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9pc1wiKTtcblxuY29uc3QgYm9vbCA9ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIik7XG5jb25zdCB0U0Z1bmN0aW9uVHlwZUFubm90YXRpb25Db21tb24gPSB7XG4gIHJldHVyblR5cGU6IHtcbiAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVBbm5vdGF0aW9uXCIsIFwiTm9vcFwiKSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICB0eXBlUGFyYW1ldGVyczoge1xuICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIsIFwiTm9vcFwiKSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9XG59O1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTUGFyYW1ldGVyUHJvcGVydHlcIiwge1xuICBhbGlhc2VzOiBbXCJMVmFsXCJdLFxuICB2aXNpdG9yOiBbXCJwYXJhbWV0ZXJcIl0sXG4gIGZpZWxkczoge1xuICAgIGFjY2Vzc2liaWxpdHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcInB1YmxpY1wiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgcmVhZG9ubHk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHBhcmFtZXRlcjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiLCBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpXG4gICAgfSxcbiAgICBvdmVycmlkZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZGVjb3JhdG9yczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRGVjb3JhdG9yXCIpKSksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNEZWNsYXJlRnVuY3Rpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInBhcmFtc1wiLCBcInJldHVyblR5cGVcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgX2NvcmUuZnVuY3Rpb25EZWNsYXJhdGlvbkNvbW1vbiwgdFNGdW5jdGlvblR5cGVBbm5vdGF0aW9uQ29tbW9uKVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNEZWNsYXJlTWV0aG9kXCIsIHtcbiAgdmlzaXRvcjogW1wiZGVjb3JhdG9yc1wiLCBcImtleVwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwicGFyYW1zXCIsIFwicmV0dXJuVHlwZVwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCBfY29yZS5jbGFzc01ldGhvZE9yRGVjbGFyZU1ldGhvZENvbW1vbiwgdFNGdW5jdGlvblR5cGVBbm5vdGF0aW9uQ29tbW9uKVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNRdWFsaWZpZWROYW1lXCIsIHtcbiAgYWxpYXNlczogW1wiVFNFbnRpdHlOYW1lXCJdLFxuICB2aXNpdG9yOiBbXCJsZWZ0XCIsIFwicmlnaHRcIl0sXG4gIGZpZWxkczoge1xuICAgIGxlZnQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTRW50aXR5TmFtZVwiKSxcbiAgICByaWdodDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICB9XG59KTtcbmNvbnN0IHNpZ25hdHVyZURlY2xhcmF0aW9uQ29tbW9uID0ge1xuICB0eXBlUGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiKSxcbiAgcGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShbXCJJZGVudGlmaWVyXCIsIFwiUmVzdEVsZW1lbnRcIl0pLFxuICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVBbm5vdGF0aW9uXCIpXG59O1xuY29uc3QgY2FsbENvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uID0ge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVFbGVtZW50XCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInBhcmFtZXRlcnNcIiwgXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiBzaWduYXR1cmVEZWNsYXJhdGlvbkNvbW1vblxufTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvblwiLCBjYWxsQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb24pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb25cIiwgY2FsbENvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uKTtcbmNvbnN0IG5hbWVkVHlwZUVsZW1lbnRDb21tb24gPSB7XG4gIGtleTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRXhwcmVzc2lvblwiKSxcbiAgY29tcHV0ZWQ6ICgwLCBfdXRpbHMudmFsaWRhdGUpKGJvb2wpLFxuICBvcHRpb25hbDogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKShib29sKVxufTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU1Byb3BlcnR5U2lnbmF0dXJlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlRWxlbWVudFwiXSxcbiAgdmlzaXRvcjogW1wia2V5XCIsIFwidHlwZUFubm90YXRpb25cIiwgXCJpbml0aWFsaXplclwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCBuYW1lZFR5cGVFbGVtZW50Q29tbW9uLCB7XG4gICAgcmVhZG9ubHk6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlQW5ub3RhdGlvblwiKSxcbiAgICBpbml0aWFsaXplcjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJFeHByZXNzaW9uXCIpLFxuICAgIGtpbmQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcImdldFwiLCBcInNldFwiKVxuICAgIH1cbiAgfSlcbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTTWV0aG9kU2lnbmF0dXJlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlRWxlbWVudFwiXSxcbiAgdmlzaXRvcjogW1wia2V5XCIsIFwidHlwZVBhcmFtZXRlcnNcIiwgXCJwYXJhbWV0ZXJzXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgc2lnbmF0dXJlRGVjbGFyYXRpb25Db21tb24sIG5hbWVkVHlwZUVsZW1lbnRDb21tb24sIHtcbiAgICBraW5kOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoXCJtZXRob2RcIiwgXCJnZXRcIiwgXCJzZXRcIilcbiAgICB9XG4gIH0pXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0luZGV4U2lnbmF0dXJlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlRWxlbWVudFwiXSxcbiAgdmlzaXRvcjogW1wicGFyYW1ldGVyc1wiLCBcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICByZWFkb25seTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKShib29sKSxcbiAgICBzdGF0aWM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgcGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlQW5ub3RhdGlvblwiKVxuICB9XG59KTtcbmNvbnN0IHRzS2V5d29yZFR5cGVzID0gW1wiVFNBbnlLZXl3b3JkXCIsIFwiVFNCb29sZWFuS2V5d29yZFwiLCBcIlRTQmlnSW50S2V5d29yZFwiLCBcIlRTSW50cmluc2ljS2V5d29yZFwiLCBcIlRTTmV2ZXJLZXl3b3JkXCIsIFwiVFNOdWxsS2V5d29yZFwiLCBcIlRTTnVtYmVyS2V5d29yZFwiLCBcIlRTT2JqZWN0S2V5d29yZFwiLCBcIlRTU3RyaW5nS2V5d29yZFwiLCBcIlRTU3ltYm9sS2V5d29yZFwiLCBcIlRTVW5kZWZpbmVkS2V5d29yZFwiLCBcIlRTVW5rbm93bktleXdvcmRcIiwgXCJUU1ZvaWRLZXl3b3JkXCJdO1xuXG5mb3IgKGNvbnN0IHR5cGUgb2YgdHNLZXl3b3JkVHlwZXMpIHtcbiAgKDAsIF91dGlscy5kZWZhdWx0KSh0eXBlLCB7XG4gICAgYWxpYXNlczogW1wiVFNUeXBlXCIsIFwiVFNCYXNlVHlwZVwiXSxcbiAgICB2aXNpdG9yOiBbXSxcbiAgICBmaWVsZHM6IHt9XG4gIH0pO1xufVxuXG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNUaGlzVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiLCBcIlRTQmFzZVR5cGVcIl0sXG4gIHZpc2l0b3I6IFtdLFxuICBmaWVsZHM6IHt9XG59KTtcbmNvbnN0IGZuT3JDdHJCYXNlID0ge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVQYXJhbWV0ZXJzXCIsIFwicGFyYW1ldGVyc1wiLCBcInR5cGVBbm5vdGF0aW9uXCJdXG59O1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTRnVuY3Rpb25UeXBlXCIsIE9iamVjdC5hc3NpZ24oe30sIGZuT3JDdHJCYXNlLCB7XG4gIGZpZWxkczogc2lnbmF0dXJlRGVjbGFyYXRpb25Db21tb25cbn0pKTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0NvbnN0cnVjdG9yVHlwZVwiLCBPYmplY3QuYXNzaWduKHt9LCBmbk9yQ3RyQmFzZSwge1xuICBmaWVsZHM6IE9iamVjdC5hc3NpZ24oe30sIHNpZ25hdHVyZURlY2xhcmF0aW9uQ29tbW9uLCB7XG4gICAgYWJzdHJhY3Q6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbClcbiAgfSlcbn0pKTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU1R5cGVSZWZlcmVuY2VcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVOYW1lXCIsIFwidHlwZVBhcmFtZXRlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVOYW1lOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU0VudGl0eU5hbWVcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU1R5cGVQcmVkaWNhdGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInBhcmFtZXRlck5hbWVcIiwgXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgYnVpbGRlcjogW1wicGFyYW1ldGVyTmFtZVwiLCBcInR5cGVBbm5vdGF0aW9uXCIsIFwiYXNzZXJ0c1wiXSxcbiAgZmllbGRzOiB7XG4gICAgcGFyYW1ldGVyTmFtZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFtcIklkZW50aWZpZXJcIiwgXCJUU1RoaXNUeXBlXCJdKSxcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVBbm5vdGF0aW9uXCIpLFxuICAgIGFzc2VydHM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbClcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNUeXBlUXVlcnlcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcImV4cHJOYW1lXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHByTmFtZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFtcIlRTRW50aXR5TmFtZVwiLCBcIlRTSW1wb3J0VHlwZVwiXSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNUeXBlTGl0ZXJhbFwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiXSxcbiAgdmlzaXRvcjogW1wibWVtYmVyc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgbWVtYmVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlRTVHlwZUVsZW1lbnRcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNBcnJheVR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcImVsZW1lbnRUeXBlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBlbGVtZW50VHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTVHVwbGVUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJlbGVtZW50VHlwZXNcIl0sXG4gIGZpZWxkczoge1xuICAgIGVsZW1lbnRUeXBlczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShbXCJUU1R5cGVcIiwgXCJUU05hbWVkVHVwbGVNZW1iZXJcIl0pXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTT3B0aW9uYWxUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU1Jlc3RUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU05hbWVkVHVwbGVNZW1iZXJcIiwge1xuICB2aXNpdG9yOiBbXCJsYWJlbFwiLCBcImVsZW1lbnRUeXBlXCJdLFxuICBidWlsZGVyOiBbXCJsYWJlbFwiLCBcImVsZW1lbnRUeXBlXCIsIFwib3B0aW9uYWxcIl0sXG4gIGZpZWxkczoge1xuICAgIGxhYmVsOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIG9wdGlvbmFsOiB7XG4gICAgICB2YWxpZGF0ZTogYm9vbCxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBlbGVtZW50VHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuY29uc3QgdW5pb25PckludGVyc2VjdGlvbiA9IHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZXM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJUU1R5cGVcIilcbiAgfVxufTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU1VuaW9uVHlwZVwiLCB1bmlvbk9ySW50ZXJzZWN0aW9uKTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0ludGVyc2VjdGlvblR5cGVcIiwgdW5pb25PckludGVyc2VjdGlvbik7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNDb25kaXRpb25hbFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcImNoZWNrVHlwZVwiLCBcImV4dGVuZHNUeXBlXCIsIFwidHJ1ZVR5cGVcIiwgXCJmYWxzZVR5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIGNoZWNrVHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpLFxuICAgIGV4dGVuZHNUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgdHJ1ZVR5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKSxcbiAgICBmYWxzZVR5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0luZmVyVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiXSxcbiAgdmlzaXRvcjogW1widHlwZVBhcmFtZXRlclwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZVBhcmFtZXRlcjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTUGFyZW50aGVzaXplZFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTVHlwZU9wZXJhdG9yXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgb3BlcmF0b3I6ICgwLCBfdXRpbHMudmFsaWRhdGUpKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKSksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0luZGV4ZWRBY2Nlc3NUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJvYmplY3RUeXBlXCIsIFwiaW5kZXhUeXBlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBvYmplY3RUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgaW5kZXhUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNNYXBwZWRUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlUGFyYW1ldGVyXCIsIFwidHlwZUFubm90YXRpb25cIiwgXCJuYW1lVHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgcmVhZG9ubHk6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgdHlwZVBhcmFtZXRlcjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyXCIpLFxuICAgIG9wdGlvbmFsOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpLFxuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVwiKSxcbiAgICBuYW1lVHlwZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNMaXRlcmFsVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiLCBcIlRTQmFzZVR5cGVcIl0sXG4gIHZpc2l0b3I6IFtcImxpdGVyYWxcIl0sXG4gIGZpZWxkczoge1xuICAgIGxpdGVyYWw6IHtcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHVuYXJ5RXhwcmVzc2lvbiA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiTnVtZXJpY0xpdGVyYWxcIiwgXCJCaWdJbnRMaXRlcmFsXCIpO1xuICAgICAgICBjb25zdCB1bmFyeU9wZXJhdG9yID0gKDAsIF91dGlscy5hc3NlcnRPbmVPZikoXCItXCIpO1xuICAgICAgICBjb25zdCBsaXRlcmFsID0gKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJOdW1lcmljTGl0ZXJhbFwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJCb29sZWFuTGl0ZXJhbFwiLCBcIkJpZ0ludExpdGVyYWxcIik7XG5cbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yKHBhcmVudCwga2V5LCBub2RlKSB7XG4gICAgICAgICAgaWYgKCgwLCBfaXMuZGVmYXVsdCkoXCJVbmFyeUV4cHJlc3Npb25cIiwgbm9kZSkpIHtcbiAgICAgICAgICAgIHVuYXJ5T3BlcmF0b3Iobm9kZSwgXCJvcGVyYXRvclwiLCBub2RlLm9wZXJhdG9yKTtcbiAgICAgICAgICAgIHVuYXJ5RXhwcmVzc2lvbihub2RlLCBcImFyZ3VtZW50XCIsIG5vZGUuYXJndW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXRlcmFsKHBhcmVudCwga2V5LCBub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YWxpZGF0b3Iub25lT2ZOb2RlVHlwZXMgPSBbXCJOdW1lcmljTGl0ZXJhbFwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJCb29sZWFuTGl0ZXJhbFwiLCBcIkJpZ0ludExpdGVyYWxcIiwgXCJVbmFyeUV4cHJlc3Npb25cIl07XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3I7XG4gICAgICB9KClcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCIsIFwidHlwZVBhcmFtZXRlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTRW50aXR5TmFtZVwiKSxcbiAgICB0eXBlUGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTSW50ZXJmYWNlRGVjbGFyYXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcImV4dGVuZHNcIiwgXCJib2R5XCJdLFxuICBmaWVsZHM6IHtcbiAgICBkZWNsYXJlOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpLFxuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpLFxuICAgIGV4dGVuZHM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoKDAsIF91dGlscy5hcnJheU9mVHlwZSkoXCJUU0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50c1wiKSksXG4gICAgYm9keTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNJbnRlcmZhY2VCb2R5XCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTSW50ZXJmYWNlQm9keVwiLCB7XG4gIHZpc2l0b3I6IFtcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIGJvZHk6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJUU1R5cGVFbGVtZW50XCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTVHlwZUFsaWFzRGVjbGFyYXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBkZWNsYXJlOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpLFxuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpLFxuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNBc0V4cHJlc3Npb25cIiwge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkV4cHJlc3Npb25cIiksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU1R5cGVBc3NlcnRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiLCBcImV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgZXhwcmVzc2lvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0VudW1EZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcIm1lbWJlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIGRlY2xhcmU6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgY29uc3Q6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgbWVtYmVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlRTRW51bU1lbWJlclwiKSxcbiAgICBpbml0aWFsaXplcjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTRW51bU1lbWJlclwiLCB7XG4gIHZpc2l0b3I6IFtcImlkXCIsIFwiaW5pdGlhbGl6ZXJcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoW1wiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIl0pLFxuICAgIGluaXRpYWxpemVyOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNNb2R1bGVEZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIGRlY2xhcmU6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgZ2xvYmFsOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpLFxuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoW1wiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIl0pLFxuICAgIGJvZHk6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShbXCJUU01vZHVsZUJsb2NrXCIsIFwiVFNNb2R1bGVEZWNsYXJhdGlvblwiXSlcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNNb2R1bGVCbG9ja1wiLCB7XG4gIGFsaWFzZXM6IFtcIlNjb3BhYmxlXCIsIFwiQmxvY2tcIiwgXCJCbG9ja1BhcmVudFwiXSxcbiAgdmlzaXRvcjogW1wiYm9keVwiXSxcbiAgZmllbGRzOiB7XG4gICAgYm9keTogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlN0YXRlbWVudFwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0ltcG9ydFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcImFyZ3VtZW50XCIsIFwicXVhbGlmaWVyXCIsIFwidHlwZVBhcmFtZXRlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIGFyZ3VtZW50OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJTdHJpbmdMaXRlcmFsXCIpLFxuICAgIHF1YWxpZmllcjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU0VudGl0eU5hbWVcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcIm1vZHVsZVJlZmVyZW5jZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgaXNFeHBvcnQ6ICgwLCBfdXRpbHMudmFsaWRhdGUpKGJvb2wpLFxuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIG1vZHVsZVJlZmVyZW5jZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFtcIlRTRW50aXR5TmFtZVwiLCBcIlRTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2VcIl0pLFxuICAgIGltcG9ydEtpbmQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcInR5cGVcIiwgXCJ2YWx1ZVwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlXCIsIHtcbiAgdmlzaXRvcjogW1wiZXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiU3RyaW5nTGl0ZXJhbFwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU05vbk51bGxFeHByZXNzaW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXSxcbiAgdmlzaXRvcjogW1wiZXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICB9XG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJUU0V4cG9ydEFzc2lnbm1lbnRcIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIl0sXG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpXG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTVHlwZUFubm90YXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgdHlwZUFubm90YXRpb246IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlRTVHlwZVwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiLCB7XG4gIHZpc2l0b3I6IFtcInBhcmFtc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgcGFyYW1zOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5jaGFpbikoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYXJyYXlcIiksICgwLCBfdXRpbHMuYXNzZXJ0RWFjaCkoKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVcIikpKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJwYXJhbXNcIl0sXG4gIGZpZWxkczoge1xuICAgIHBhcmFtczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuY2hhaW4pKCgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImFycmF5XCIpLCAoMCwgX3V0aWxzLmFzc2VydEVhY2gpKCgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyXCIpKSlcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlRTVHlwZVBhcmFtZXRlclwiLCB7XG4gIGJ1aWxkZXI6IFtcImNvbnN0cmFpbnRcIiwgXCJkZWZhdWx0XCIsIFwibmFtZVwiXSxcbiAgdmlzaXRvcjogW1wiY29uc3RyYWludFwiLCBcImRlZmF1bHRcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9LFxuICAgIGNvbnN0cmFpbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlRTVHlwZVwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBkZWZhdWx0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnZhbGlkYXRlID0gdmFsaWRhdGU7XG5leHBvcnRzLnR5cGVJcyA9IHR5cGVJcztcbmV4cG9ydHMudmFsaWRhdGVUeXBlID0gdmFsaWRhdGVUeXBlO1xuZXhwb3J0cy52YWxpZGF0ZU9wdGlvbmFsID0gdmFsaWRhdGVPcHRpb25hbDtcbmV4cG9ydHMudmFsaWRhdGVPcHRpb25hbFR5cGUgPSB2YWxpZGF0ZU9wdGlvbmFsVHlwZTtcbmV4cG9ydHMuYXJyYXlPZiA9IGFycmF5T2Y7XG5leHBvcnRzLmFycmF5T2ZUeXBlID0gYXJyYXlPZlR5cGU7XG5leHBvcnRzLnZhbGlkYXRlQXJyYXlPZlR5cGUgPSB2YWxpZGF0ZUFycmF5T2ZUeXBlO1xuZXhwb3J0cy5hc3NlcnRFYWNoID0gYXNzZXJ0RWFjaDtcbmV4cG9ydHMuYXNzZXJ0T25lT2YgPSBhc3NlcnRPbmVPZjtcbmV4cG9ydHMuYXNzZXJ0Tm9kZVR5cGUgPSBhc3NlcnROb2RlVHlwZTtcbmV4cG9ydHMuYXNzZXJ0Tm9kZU9yVmFsdWVUeXBlID0gYXNzZXJ0Tm9kZU9yVmFsdWVUeXBlO1xuZXhwb3J0cy5hc3NlcnRWYWx1ZVR5cGUgPSBhc3NlcnRWYWx1ZVR5cGU7XG5leHBvcnRzLmFzc2VydFNoYXBlID0gYXNzZXJ0U2hhcGU7XG5leHBvcnRzLmFzc2VydE9wdGlvbmFsQ2hhaW5TdGFydCA9IGFzc2VydE9wdGlvbmFsQ2hhaW5TdGFydDtcbmV4cG9ydHMuY2hhaW4gPSBjaGFpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmluZVR5cGU7XG5leHBvcnRzLk5PREVfUEFSRU5UX1ZBTElEQVRJT05TID0gZXhwb3J0cy5ERVBSRUNBVEVEX0tFWVMgPSBleHBvcnRzLkJVSUxERVJfS0VZUyA9IGV4cG9ydHMuTk9ERV9GSUVMRFMgPSBleHBvcnRzLkZMSVBQRURfQUxJQVNfS0VZUyA9IGV4cG9ydHMuQUxJQVNfS0VZUyA9IGV4cG9ydHMuVklTSVRPUl9LRVlTID0gdm9pZCAwO1xuXG52YXIgX2lzID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvaXNcIik7XG5cbnZhciBfdmFsaWRhdGUgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy92YWxpZGF0ZVwiKTtcblxuY29uc3QgVklTSVRPUl9LRVlTID0ge307XG5leHBvcnRzLlZJU0lUT1JfS0VZUyA9IFZJU0lUT1JfS0VZUztcbmNvbnN0IEFMSUFTX0tFWVMgPSB7fTtcbmV4cG9ydHMuQUxJQVNfS0VZUyA9IEFMSUFTX0tFWVM7XG5jb25zdCBGTElQUEVEX0FMSUFTX0tFWVMgPSB7fTtcbmV4cG9ydHMuRkxJUFBFRF9BTElBU19LRVlTID0gRkxJUFBFRF9BTElBU19LRVlTO1xuY29uc3QgTk9ERV9GSUVMRFMgPSB7fTtcbmV4cG9ydHMuTk9ERV9GSUVMRFMgPSBOT0RFX0ZJRUxEUztcbmNvbnN0IEJVSUxERVJfS0VZUyA9IHt9O1xuZXhwb3J0cy5CVUlMREVSX0tFWVMgPSBCVUlMREVSX0tFWVM7XG5jb25zdCBERVBSRUNBVEVEX0tFWVMgPSB7fTtcbmV4cG9ydHMuREVQUkVDQVRFRF9LRVlTID0gREVQUkVDQVRFRF9LRVlTO1xuY29uc3QgTk9ERV9QQVJFTlRfVkFMSURBVElPTlMgPSB7fTtcbmV4cG9ydHMuTk9ERV9QQVJFTlRfVkFMSURBVElPTlMgPSBOT0RFX1BBUkVOVF9WQUxJREFUSU9OUztcblxuZnVuY3Rpb24gZ2V0VHlwZSh2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHJldHVybiBcImFycmF5XCI7XG4gIH0gZWxzZSBpZiAodmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFwibnVsbFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0eXBlb2YgdmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHZhbGlkYXRlKSB7XG4gIHJldHVybiB7XG4gICAgdmFsaWRhdGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHlwZUlzKHR5cGVOYW1lKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZU5hbWUgPT09IFwic3RyaW5nXCIgPyBhc3NlcnROb2RlVHlwZSh0eXBlTmFtZSkgOiBhc3NlcnROb2RlVHlwZSguLi50eXBlTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZSh0eXBlTmFtZSkge1xuICByZXR1cm4gdmFsaWRhdGUodHlwZUlzKHR5cGVOYW1lKSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uYWwodmFsaWRhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICB2YWxpZGF0ZSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbmFsVHlwZSh0eXBlTmFtZSkge1xuICByZXR1cm4ge1xuICAgIHZhbGlkYXRlOiB0eXBlSXModHlwZU5hbWUpLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFycmF5T2YoZWxlbWVudFR5cGUpIHtcbiAgcmV0dXJuIGNoYWluKGFzc2VydFZhbHVlVHlwZShcImFycmF5XCIpLCBhc3NlcnRFYWNoKGVsZW1lbnRUeXBlKSk7XG59XG5cbmZ1bmN0aW9uIGFycmF5T2ZUeXBlKHR5cGVOYW1lKSB7XG4gIHJldHVybiBhcnJheU9mKHR5cGVJcyh0eXBlTmFtZSkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFycmF5T2ZUeXBlKHR5cGVOYW1lKSB7XG4gIHJldHVybiB2YWxpZGF0ZShhcnJheU9mVHlwZSh0eXBlTmFtZSkpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRFYWNoKGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRvcihub2RlLCBrZXksIHZhbCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3Via2V5ID0gYCR7a2V5fVske2l9XWA7XG4gICAgICBjb25zdCB2ID0gdmFsW2ldO1xuICAgICAgY2FsbGJhY2sobm9kZSwgc3Via2V5LCB2KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5CQUJFTF9UWVBFU184X0JSRUFLSU5HKSAoMCwgX3ZhbGlkYXRlLnZhbGlkYXRlQ2hpbGQpKG5vZGUsIHN1YmtleSwgdik7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdG9yLmVhY2ggPSBjYWxsYmFjaztcbiAgcmV0dXJuIHZhbGlkYXRvcjtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T25lT2YoLi4udmFsdWVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgaWYgKHZhbHVlcy5pbmRleE9mKHZhbCkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQcm9wZXJ0eSAke2tleX0gZXhwZWN0ZWQgdmFsdWUgdG8gYmUgb25lIG9mICR7SlNPTi5zdHJpbmdpZnkodmFsdWVzKX0gYnV0IGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCl9YCk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGUub25lT2YgPSB2YWx1ZXM7XG4gIHJldHVybiB2YWxpZGF0ZTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Tm9kZVR5cGUoLi4udHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUobm9kZSwga2V5LCB2YWwpIHtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXMpIHtcbiAgICAgIGlmICgoMCwgX2lzLmRlZmF1bHQpKHR5cGUsIHZhbCkpIHtcbiAgICAgICAgKDAsIF92YWxpZGF0ZS52YWxpZGF0ZUNoaWxkKShub2RlLCBrZXksIHZhbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQcm9wZXJ0eSAke2tleX0gb2YgJHtub2RlLnR5cGV9IGV4cGVjdGVkIG5vZGUgdG8gYmUgb2YgYSB0eXBlICR7SlNPTi5zdHJpbmdpZnkodHlwZXMpfSBidXQgaW5zdGVhZCBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbC50eXBlKX1gKTtcbiAgfVxuXG4gIHZhbGlkYXRlLm9uZU9mTm9kZVR5cGVzID0gdHlwZXM7XG4gIHJldHVybiB2YWxpZGF0ZTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Tm9kZU9yVmFsdWVUeXBlKC4uLnR5cGVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIHR5cGVzKSB7XG4gICAgICBpZiAoZ2V0VHlwZSh2YWwpID09PSB0eXBlIHx8ICgwLCBfaXMuZGVmYXVsdCkodHlwZSwgdmFsKSkge1xuICAgICAgICAoMCwgX3ZhbGlkYXRlLnZhbGlkYXRlQ2hpbGQpKG5vZGUsIGtleSwgdmFsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFByb3BlcnR5ICR7a2V5fSBvZiAke25vZGUudHlwZX0gZXhwZWN0ZWQgbm9kZSB0byBiZSBvZiBhIHR5cGUgJHtKU09OLnN0cmluZ2lmeSh0eXBlcyl9IGJ1dCBpbnN0ZWFkIGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCA9PSBudWxsID8gdm9pZCAwIDogdmFsLnR5cGUpfWApO1xuICB9XG5cbiAgdmFsaWRhdGUub25lT2ZOb2RlT3JWYWx1ZVR5cGVzID0gdHlwZXM7XG4gIHJldHVybiB2YWxpZGF0ZTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VmFsdWVUeXBlKHR5cGUpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUobm9kZSwga2V5LCB2YWwpIHtcbiAgICBjb25zdCB2YWxpZCA9IGdldFR5cGUodmFsKSA9PT0gdHlwZTtcblxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFByb3BlcnR5ICR7a2V5fSBleHBlY3RlZCB0eXBlIG9mICR7dHlwZX0gYnV0IGdvdCAke2dldFR5cGUodmFsKX1gKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIHZhbGlkYXRlO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRTaGFwZShzaGFwZSkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShub2RlLCBrZXksIHZhbCkge1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBPYmplY3Qua2V5cyhzaGFwZSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICgwLCBfdmFsaWRhdGUudmFsaWRhdGVGaWVsZCkobm9kZSwgcHJvcGVydHksIHZhbFtwcm9wZXJ0eV0sIHNoYXBlW3Byb3BlcnR5XSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQcm9wZXJ0eSAke2tleX0gb2YgJHtub2RlLnR5cGV9IGV4cGVjdGVkIHRvIGhhdmUgdGhlIGZvbGxvd2luZzpcXG4ke2Vycm9ycy5qb2luKFwiXFxuXCIpfWApO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlLnNoYXBlT2YgPSBzaGFwZTtcbiAgcmV0dXJuIHZhbGlkYXRlO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25hbENoYWluU3RhcnQoKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUpIHtcbiAgICB2YXIgX2N1cnJlbnQ7XG5cbiAgICBsZXQgY3VycmVudCA9IG5vZGU7XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICB0eXBlXG4gICAgICB9ID0gY3VycmVudDtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiT3B0aW9uYWxDYWxsRXhwcmVzc2lvblwiKSB7XG4gICAgICAgIGlmIChjdXJyZW50Lm9wdGlvbmFsKSByZXR1cm47XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNhbGxlZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiKSB7XG4gICAgICAgIGlmIChjdXJyZW50Lm9wdGlvbmFsKSByZXR1cm47XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm9iamVjdDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vbi1vcHRpb25hbCAke25vZGUudHlwZX0gbXVzdCBjaGFpbiBmcm9tIGFuIG9wdGlvbmFsIE9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvbiBvciBPcHRpb25hbENhbGxFeHByZXNzaW9uLiBGb3VuZCBjaGFpbiBmcm9tICR7KF9jdXJyZW50ID0gY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jdXJyZW50LnR5cGV9YCk7XG4gIH1cblxuICByZXR1cm4gdmFsaWRhdGU7XG59XG5cbmZ1bmN0aW9uIGNoYWluKC4uLmZucykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZSguLi5hcmdzKSB7XG4gICAgZm9yIChjb25zdCBmbiBvZiBmbnMpIHtcbiAgICAgIGZuKC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlLmNoYWluT2YgPSBmbnM7XG5cbiAgaWYgKGZucy5sZW5ndGggPj0gMiAmJiBcInR5cGVcIiBpbiBmbnNbMF0gJiYgZm5zWzBdLnR5cGUgPT09IFwiYXJyYXlcIiAmJiAhKFwiZWFjaFwiIGluIGZuc1sxXSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFuIGFzc2VydFZhbHVlVHlwZShcImFycmF5XCIpIHZhbGlkYXRvciBjYW4gb25seSBiZSBmb2xsb3dlZCBieSBhbiBhc3NlcnRFYWNoKC4uLikgdmFsaWRhdG9yLmApO1xuICB9XG5cbiAgcmV0dXJuIHZhbGlkYXRlO1xufVxuXG5jb25zdCB2YWxpZFR5cGVPcHRzID0gW1wiYWxpYXNlc1wiLCBcImJ1aWxkZXJcIiwgXCJkZXByZWNhdGVkQWxpYXNcIiwgXCJmaWVsZHNcIiwgXCJpbmhlcml0c1wiLCBcInZpc2l0b3JcIiwgXCJ2YWxpZGF0ZVwiXTtcbmNvbnN0IHZhbGlkRmllbGRLZXlzID0gW1wiZGVmYXVsdFwiLCBcIm9wdGlvbmFsXCIsIFwidmFsaWRhdGVcIl07XG5cbmZ1bmN0aW9uIGRlZmluZVR5cGUodHlwZSwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGluaGVyaXRzID0gb3B0cy5pbmhlcml0cyAmJiBzdG9yZVtvcHRzLmluaGVyaXRzXSB8fCB7fTtcbiAgbGV0IGZpZWxkcyA9IG9wdHMuZmllbGRzO1xuXG4gIGlmICghZmllbGRzKSB7XG4gICAgZmllbGRzID0ge307XG5cbiAgICBpZiAoaW5oZXJpdHMuZmllbGRzKSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5oZXJpdHMuZmllbGRzKTtcblxuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGluaGVyaXRzLmZpZWxkc1trZXldO1xuICAgICAgICBjb25zdCBkZWYgPSBmaWVsZC5kZWZhdWx0O1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlZikgPyBkZWYubGVuZ3RoID4gMCA6IGRlZiAmJiB0eXBlb2YgZGVmID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmllbGQgZGVmYXVsdHMgY2FuIG9ubHkgYmUgcHJpbWl0aXZlcyBvciBlbXB0eSBhcnJheXMgY3VycmVudGx5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmllbGRzW2tleV0gPSB7XG4gICAgICAgICAgZGVmYXVsdDogQXJyYXkuaXNBcnJheShkZWYpID8gW10gOiBkZWYsXG4gICAgICAgICAgb3B0aW9uYWw6IGZpZWxkLm9wdGlvbmFsLFxuICAgICAgICAgIHZhbGlkYXRlOiBmaWVsZC52YWxpZGF0ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHZpc2l0b3IgPSBvcHRzLnZpc2l0b3IgfHwgaW5oZXJpdHMudmlzaXRvciB8fCBbXTtcbiAgY29uc3QgYWxpYXNlcyA9IG9wdHMuYWxpYXNlcyB8fCBpbmhlcml0cy5hbGlhc2VzIHx8IFtdO1xuICBjb25zdCBidWlsZGVyID0gb3B0cy5idWlsZGVyIHx8IGluaGVyaXRzLmJ1aWxkZXIgfHwgb3B0cy52aXNpdG9yIHx8IFtdO1xuXG4gIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhvcHRzKSkge1xuICAgIGlmICh2YWxpZFR5cGVPcHRzLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZSBvcHRpb24gXCIke2t9XCIgb24gJHt0eXBlfWApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLmRlcHJlY2F0ZWRBbGlhcykge1xuICAgIERFUFJFQ0FURURfS0VZU1tvcHRzLmRlcHJlY2F0ZWRBbGlhc10gPSB0eXBlO1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgdmlzaXRvci5jb25jYXQoYnVpbGRlcikpIHtcbiAgICBmaWVsZHNba2V5XSA9IGZpZWxkc1trZXldIHx8IHt9O1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZmllbGRzKSkge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2tleV07XG5cbiAgICBpZiAoZmllbGQuZGVmYXVsdCAhPT0gdW5kZWZpbmVkICYmIGJ1aWxkZXIuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgZmllbGQub3B0aW9uYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5kZWZhdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpZWxkLmRlZmF1bHQgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoIWZpZWxkLnZhbGlkYXRlICYmIGZpZWxkLmRlZmF1bHQgIT0gbnVsbCkge1xuICAgICAgZmllbGQudmFsaWRhdGUgPSBhc3NlcnRWYWx1ZVR5cGUoZ2V0VHlwZShmaWVsZC5kZWZhdWx0KSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGZpZWxkKSkge1xuICAgICAgaWYgKHZhbGlkRmllbGRLZXlzLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBmaWVsZCBrZXkgXCIke2t9XCIgb24gJHt0eXBlfS4ke2tleX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBWSVNJVE9SX0tFWVNbdHlwZV0gPSBvcHRzLnZpc2l0b3IgPSB2aXNpdG9yO1xuICBCVUlMREVSX0tFWVNbdHlwZV0gPSBvcHRzLmJ1aWxkZXIgPSBidWlsZGVyO1xuICBOT0RFX0ZJRUxEU1t0eXBlXSA9IG9wdHMuZmllbGRzID0gZmllbGRzO1xuICBBTElBU19LRVlTW3R5cGVdID0gb3B0cy5hbGlhc2VzID0gYWxpYXNlcztcbiAgYWxpYXNlcy5mb3JFYWNoKGFsaWFzID0+IHtcbiAgICBGTElQUEVEX0FMSUFTX0tFWVNbYWxpYXNdID0gRkxJUFBFRF9BTElBU19LRVlTW2FsaWFzXSB8fCBbXTtcbiAgICBGTElQUEVEX0FMSUFTX0tFWVNbYWxpYXNdLnB1c2godHlwZSk7XG4gIH0pO1xuXG4gIGlmIChvcHRzLnZhbGlkYXRlKSB7XG4gICAgTk9ERV9QQVJFTlRfVkFMSURBVElPTlNbdHlwZV0gPSBvcHRzLnZhbGlkYXRlO1xuICB9XG5cbiAgc3RvcmVbdHlwZV0gPSBvcHRzO1xufVxuXG5jb25zdCBzdG9yZSA9IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHtcbiAgcmVhY3Q6IHRydWUsXG4gIGFzc2VydE5vZGU6IHRydWUsXG4gIGNyZWF0ZVR5cGVBbm5vdGF0aW9uQmFzZWRPblR5cGVvZjogdHJ1ZSxcbiAgY3JlYXRlVW5pb25UeXBlQW5ub3RhdGlvbjogdHJ1ZSxcbiAgY3JlYXRlRmxvd1VuaW9uVHlwZTogdHJ1ZSxcbiAgY3JlYXRlVFNVbmlvblR5cGU6IHRydWUsXG4gIGNsb25lTm9kZTogdHJ1ZSxcbiAgY2xvbmU6IHRydWUsXG4gIGNsb25lRGVlcDogdHJ1ZSxcbiAgY2xvbmVEZWVwV2l0aG91dExvYzogdHJ1ZSxcbiAgY2xvbmVXaXRob3V0TG9jOiB0cnVlLFxuICBhZGRDb21tZW50OiB0cnVlLFxuICBhZGRDb21tZW50czogdHJ1ZSxcbiAgaW5oZXJpdElubmVyQ29tbWVudHM6IHRydWUsXG4gIGluaGVyaXRMZWFkaW5nQ29tbWVudHM6IHRydWUsXG4gIGluaGVyaXRzQ29tbWVudHM6IHRydWUsXG4gIGluaGVyaXRUcmFpbGluZ0NvbW1lbnRzOiB0cnVlLFxuICByZW1vdmVDb21tZW50czogdHJ1ZSxcbiAgZW5zdXJlQmxvY2s6IHRydWUsXG4gIHRvQmluZGluZ0lkZW50aWZpZXJOYW1lOiB0cnVlLFxuICB0b0Jsb2NrOiB0cnVlLFxuICB0b0NvbXB1dGVkS2V5OiB0cnVlLFxuICB0b0V4cHJlc3Npb246IHRydWUsXG4gIHRvSWRlbnRpZmllcjogdHJ1ZSxcbiAgdG9LZXlBbGlhczogdHJ1ZSxcbiAgdG9TZXF1ZW5jZUV4cHJlc3Npb246IHRydWUsXG4gIHRvU3RhdGVtZW50OiB0cnVlLFxuICB2YWx1ZVRvTm9kZTogdHJ1ZSxcbiAgYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uOiB0cnVlLFxuICBpbmhlcml0czogdHJ1ZSxcbiAgcHJlcGVuZFRvTWVtYmVyRXhwcmVzc2lvbjogdHJ1ZSxcbiAgcmVtb3ZlUHJvcGVydGllczogdHJ1ZSxcbiAgcmVtb3ZlUHJvcGVydGllc0RlZXA6IHRydWUsXG4gIHJlbW92ZVR5cGVEdXBsaWNhdGVzOiB0cnVlLFxuICBnZXRCaW5kaW5nSWRlbnRpZmllcnM6IHRydWUsXG4gIGdldE91dGVyQmluZGluZ0lkZW50aWZpZXJzOiB0cnVlLFxuICB0cmF2ZXJzZTogdHJ1ZSxcbiAgdHJhdmVyc2VGYXN0OiB0cnVlLFxuICBzaGFsbG93RXF1YWw6IHRydWUsXG4gIGlzOiB0cnVlLFxuICBpc0JpbmRpbmc6IHRydWUsXG4gIGlzQmxvY2tTY29wZWQ6IHRydWUsXG4gIGlzSW1tdXRhYmxlOiB0cnVlLFxuICBpc0xldDogdHJ1ZSxcbiAgaXNOb2RlOiB0cnVlLFxuICBpc05vZGVzRXF1aXZhbGVudDogdHJ1ZSxcbiAgaXNQbGFjZWhvbGRlclR5cGU6IHRydWUsXG4gIGlzUmVmZXJlbmNlZDogdHJ1ZSxcbiAgaXNTY29wZTogdHJ1ZSxcbiAgaXNTcGVjaWZpZXJEZWZhdWx0OiB0cnVlLFxuICBpc1R5cGU6IHRydWUsXG4gIGlzVmFsaWRFUzNJZGVudGlmaWVyOiB0cnVlLFxuICBpc1ZhbGlkSWRlbnRpZmllcjogdHJ1ZSxcbiAgaXNWYXI6IHRydWUsXG4gIG1hdGNoZXNQYXR0ZXJuOiB0cnVlLFxuICB2YWxpZGF0ZTogdHJ1ZSxcbiAgYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb246IHRydWVcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhc3NlcnROb2RlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hc3NlcnROb2RlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2YuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVVbmlvblR5cGVBbm5vdGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVGbG93VW5pb25UeXBlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlRmxvd1VuaW9uVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY3JlYXRlRmxvd1VuaW9uVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVRTVW5pb25UeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUU1VuaW9uVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNsb25lTm9kZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY2xvbmVOb2RlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2xvbmVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Nsb25lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2xvbmVEZWVwXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jbG9uZURlZXAuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbG9uZURlZXBXaXRob3V0TG9jXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jbG9uZURlZXBXaXRob3V0TG9jLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2xvbmVXaXRob3V0TG9jXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jbG9uZVdpdGhvdXRMb2MuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRDb21tZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hZGRDb21tZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkQ29tbWVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2FkZENvbW1lbnRzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5oZXJpdElubmVyQ29tbWVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luaGVyaXRJbm5lckNvbW1lbnRzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5oZXJpdExlYWRpbmdDb21tZW50c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5oZXJpdExlYWRpbmdDb21tZW50cy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImluaGVyaXRzQ29tbWVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luaGVyaXRzQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmhlcml0VHJhaWxpbmdDb21tZW50c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW1vdmVDb21tZW50c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcmVtb3ZlQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbnN1cmVCbG9ja1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZW5zdXJlQmxvY2suZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0JpbmRpbmdJZGVudGlmaWVyTmFtZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdG9CaW5kaW5nSWRlbnRpZmllck5hbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0Jsb2NrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90b0Jsb2NrLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9Db21wdXRlZEtleVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdG9Db21wdXRlZEtleS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdG9FeHByZXNzaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9JZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90b0lkZW50aWZpZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0tleUFsaWFzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90b0tleUFsaWFzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9TZXF1ZW5jZUV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RvU2VxdWVuY2VFeHByZXNzaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9TdGF0ZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RvU3RhdGVtZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmFsdWVUb05vZGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3ZhbHVlVG9Ob2RlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hcHBlbmRUb01lbWJlckV4cHJlc3Npb24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmhlcml0c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5oZXJpdHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwcmVwZW5kVG9NZW1iZXJFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9wcmVwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlUHJvcGVydGllc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcmVtb3ZlUHJvcGVydGllcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVByb3BlcnRpZXNEZWVwXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9yZW1vdmVQcm9wZXJ0aWVzRGVlcC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVR5cGVEdXBsaWNhdGVzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9yZW1vdmVUeXBlRHVwbGljYXRlcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEJpbmRpbmdJZGVudGlmaWVyc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZ2V0QmluZGluZ0lkZW50aWZpZXJzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2dldE91dGVyQmluZGluZ0lkZW50aWZpZXJzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhdmVyc2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RyYXZlcnNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhdmVyc2VGYXN0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90cmF2ZXJzZUZhc3QuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGFsbG93RXF1YWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3NoYWxsb3dFcXVhbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzQmluZGluZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNCaW5kaW5nLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNCbG9ja1Njb3BlZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNCbG9ja1Njb3BlZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSW1tdXRhYmxlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0ltbXV0YWJsZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTGV0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0xldC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTm9kZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNOb2RlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOb2Rlc0VxdWl2YWxlbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzTm9kZXNFcXVpdmFsZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNQbGFjZWhvbGRlclR5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXJUeXBlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNSZWZlcmVuY2VkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc1JlZmVyZW5jZWQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1Njb3BlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc1Njb3BlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNTcGVjaWZpZXJEZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc1NwZWNpZmllckRlZmF1bHQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1R5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVmFsaWRFUzNJZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc1ZhbGlkRVMzSWRlbnRpZmllci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVmFsaWRJZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc1ZhbGlkSWRlbnRpZmllci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVmFyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc1Zhci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1hdGNoZXNQYXR0ZXJuXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9tYXRjaGVzUGF0dGVybi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZhbGlkYXRlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF92YWxpZGF0ZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJ1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9idWlsZE1hdGNoTWVtYmVyRXhwcmVzc2lvbi5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMucmVhY3QgPSB2b2lkIDA7XG5cbnZhciBfaXNSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvcmVhY3QvaXNSZWFjdENvbXBvbmVudFwiKTtcblxudmFyIF9pc0NvbXBhdFRhZyA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvcmVhY3QvaXNDb21wYXRUYWdcIik7XG5cbnZhciBfYnVpbGRDaGlsZHJlbiA9IHJlcXVpcmUoXCIuL2J1aWxkZXJzL3JlYWN0L2J1aWxkQ2hpbGRyZW5cIik7XG5cbnZhciBfYXNzZXJ0Tm9kZSA9IHJlcXVpcmUoXCIuL2Fzc2VydHMvYXNzZXJ0Tm9kZVwiKTtcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRzL2dlbmVyYXRlZFwiKTtcblxuT2JqZWN0LmtleXMoX2dlbmVyYXRlZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2dlbmVyYXRlZFtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9nZW5lcmF0ZWRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mID0gcmVxdWlyZShcIi4vYnVpbGRlcnMvZmxvdy9jcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2ZcIik7XG5cbnZhciBfY3JlYXRlRmxvd1VuaW9uVHlwZSA9IHJlcXVpcmUoXCIuL2J1aWxkZXJzL2Zsb3cvY3JlYXRlRmxvd1VuaW9uVHlwZVwiKTtcblxudmFyIF9jcmVhdGVUU1VuaW9uVHlwZSA9IHJlcXVpcmUoXCIuL2J1aWxkZXJzL3R5cGVzY3JpcHQvY3JlYXRlVFNVbmlvblR5cGVcIik7XG5cbnZhciBfZ2VuZXJhdGVkMiA9IHJlcXVpcmUoXCIuL2J1aWxkZXJzL2dlbmVyYXRlZFwiKTtcblxuT2JqZWN0LmtleXMoX2dlbmVyYXRlZDIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9nZW5lcmF0ZWQyW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2dlbmVyYXRlZDJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfdXBwZXJjYXNlID0gcmVxdWlyZShcIi4vYnVpbGRlcnMvZ2VuZXJhdGVkL3VwcGVyY2FzZVwiKTtcblxuT2JqZWN0LmtleXMoX3VwcGVyY2FzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3VwcGVyY2FzZVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF91cHBlcmNhc2Vba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfY2xvbmVOb2RlID0gcmVxdWlyZShcIi4vY2xvbmUvY2xvbmVOb2RlXCIpO1xuXG52YXIgX2Nsb25lID0gcmVxdWlyZShcIi4vY2xvbmUvY2xvbmVcIik7XG5cbnZhciBfY2xvbmVEZWVwID0gcmVxdWlyZShcIi4vY2xvbmUvY2xvbmVEZWVwXCIpO1xuXG52YXIgX2Nsb25lRGVlcFdpdGhvdXRMb2MgPSByZXF1aXJlKFwiLi9jbG9uZS9jbG9uZURlZXBXaXRob3V0TG9jXCIpO1xuXG52YXIgX2Nsb25lV2l0aG91dExvYyA9IHJlcXVpcmUoXCIuL2Nsb25lL2Nsb25lV2l0aG91dExvY1wiKTtcblxudmFyIF9hZGRDb21tZW50ID0gcmVxdWlyZShcIi4vY29tbWVudHMvYWRkQ29tbWVudFwiKTtcblxudmFyIF9hZGRDb21tZW50cyA9IHJlcXVpcmUoXCIuL2NvbW1lbnRzL2FkZENvbW1lbnRzXCIpO1xuXG52YXIgX2luaGVyaXRJbm5lckNvbW1lbnRzID0gcmVxdWlyZShcIi4vY29tbWVudHMvaW5oZXJpdElubmVyQ29tbWVudHNcIik7XG5cbnZhciBfaW5oZXJpdExlYWRpbmdDb21tZW50cyA9IHJlcXVpcmUoXCIuL2NvbW1lbnRzL2luaGVyaXRMZWFkaW5nQ29tbWVudHNcIik7XG5cbnZhciBfaW5oZXJpdHNDb21tZW50cyA9IHJlcXVpcmUoXCIuL2NvbW1lbnRzL2luaGVyaXRzQ29tbWVudHNcIik7XG5cbnZhciBfaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMgPSByZXF1aXJlKFwiLi9jb21tZW50cy9pbmhlcml0VHJhaWxpbmdDb21tZW50c1wiKTtcblxudmFyIF9yZW1vdmVDb21tZW50cyA9IHJlcXVpcmUoXCIuL2NvbW1lbnRzL3JlbW92ZUNvbW1lbnRzXCIpO1xuXG52YXIgX2dlbmVyYXRlZDMgPSByZXF1aXJlKFwiLi9jb25zdGFudHMvZ2VuZXJhdGVkXCIpO1xuXG5PYmplY3Qua2V5cyhfZ2VuZXJhdGVkMykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2dlbmVyYXRlZDNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZ2VuZXJhdGVkM1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbk9iamVjdC5rZXlzKF9jb25zdGFudHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9jb25zdGFudHNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfY29uc3RhbnRzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX2Vuc3VyZUJsb2NrID0gcmVxdWlyZShcIi4vY29udmVydGVycy9lbnN1cmVCbG9ja1wiKTtcblxudmFyIF90b0JpbmRpbmdJZGVudGlmaWVyTmFtZSA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9CaW5kaW5nSWRlbnRpZmllck5hbWVcIik7XG5cbnZhciBfdG9CbG9jayA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9CbG9ja1wiKTtcblxudmFyIF90b0NvbXB1dGVkS2V5ID0gcmVxdWlyZShcIi4vY29udmVydGVycy90b0NvbXB1dGVkS2V5XCIpO1xuXG52YXIgX3RvRXhwcmVzc2lvbiA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9FeHByZXNzaW9uXCIpO1xuXG52YXIgX3RvSWRlbnRpZmllciA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9JZGVudGlmaWVyXCIpO1xuXG52YXIgX3RvS2V5QWxpYXMgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvS2V5QWxpYXNcIik7XG5cbnZhciBfdG9TZXF1ZW5jZUV4cHJlc3Npb24gPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvU2VxdWVuY2VFeHByZXNzaW9uXCIpO1xuXG52YXIgX3RvU3RhdGVtZW50ID0gcmVxdWlyZShcIi4vY29udmVydGVycy90b1N0YXRlbWVudFwiKTtcblxudmFyIF92YWx1ZVRvTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdmFsdWVUb05vZGVcIik7XG5cbnZhciBfZGVmaW5pdGlvbnMgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcblxuT2JqZWN0LmtleXMoX2RlZmluaXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfZGVmaW5pdGlvbnNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZGVmaW5pdGlvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uID0gcmVxdWlyZShcIi4vbW9kaWZpY2F0aW9ucy9hcHBlbmRUb01lbWJlckV4cHJlc3Npb25cIik7XG5cbnZhciBfaW5oZXJpdHMgPSByZXF1aXJlKFwiLi9tb2RpZmljYXRpb25zL2luaGVyaXRzXCIpO1xuXG52YXIgX3ByZXBlbmRUb01lbWJlckV4cHJlc3Npb24gPSByZXF1aXJlKFwiLi9tb2RpZmljYXRpb25zL3ByZXBlbmRUb01lbWJlckV4cHJlc3Npb25cIik7XG5cbnZhciBfcmVtb3ZlUHJvcGVydGllcyA9IHJlcXVpcmUoXCIuL21vZGlmaWNhdGlvbnMvcmVtb3ZlUHJvcGVydGllc1wiKTtcblxudmFyIF9yZW1vdmVQcm9wZXJ0aWVzRGVlcCA9IHJlcXVpcmUoXCIuL21vZGlmaWNhdGlvbnMvcmVtb3ZlUHJvcGVydGllc0RlZXBcIik7XG5cbnZhciBfcmVtb3ZlVHlwZUR1cGxpY2F0ZXMgPSByZXF1aXJlKFwiLi9tb2RpZmljYXRpb25zL2Zsb3cvcmVtb3ZlVHlwZUR1cGxpY2F0ZXNcIik7XG5cbnZhciBfZ2V0QmluZGluZ0lkZW50aWZpZXJzID0gcmVxdWlyZShcIi4vcmV0cmlldmVycy9nZXRCaW5kaW5nSWRlbnRpZmllcnNcIik7XG5cbnZhciBfZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnMgPSByZXF1aXJlKFwiLi9yZXRyaWV2ZXJzL2dldE91dGVyQmluZGluZ0lkZW50aWZpZXJzXCIpO1xuXG52YXIgX3RyYXZlcnNlID0gcmVxdWlyZShcIi4vdHJhdmVyc2UvdHJhdmVyc2VcIik7XG5cbk9iamVjdC5rZXlzKF90cmF2ZXJzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3RyYXZlcnNlW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyYXZlcnNlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX3RyYXZlcnNlRmFzdCA9IHJlcXVpcmUoXCIuL3RyYXZlcnNlL3RyYXZlcnNlRmFzdFwiKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKFwiLi91dGlscy9zaGFsbG93RXF1YWxcIik7XG5cbnZhciBfaXMgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzXCIpO1xuXG52YXIgX2lzQmluZGluZyA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNCaW5kaW5nXCIpO1xuXG52YXIgX2lzQmxvY2tTY29wZWQgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzQmxvY2tTY29wZWRcIik7XG5cbnZhciBfaXNJbW11dGFibGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzSW1tdXRhYmxlXCIpO1xuXG52YXIgX2lzTGV0ID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc0xldFwiKTtcblxudmFyIF9pc05vZGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzTm9kZVwiKTtcblxudmFyIF9pc05vZGVzRXF1aXZhbGVudCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNOb2Rlc0VxdWl2YWxlbnRcIik7XG5cbnZhciBfaXNQbGFjZWhvbGRlclR5cGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzUGxhY2Vob2xkZXJUeXBlXCIpO1xuXG52YXIgX2lzUmVmZXJlbmNlZCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNSZWZlcmVuY2VkXCIpO1xuXG52YXIgX2lzU2NvcGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzU2NvcGVcIik7XG5cbnZhciBfaXNTcGVjaWZpZXJEZWZhdWx0ID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc1NwZWNpZmllckRlZmF1bHRcIik7XG5cbnZhciBfaXNUeXBlID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc1R5cGVcIik7XG5cbnZhciBfaXNWYWxpZEVTM0lkZW50aWZpZXIgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzVmFsaWRFUzNJZGVudGlmaWVyXCIpO1xuXG52YXIgX2lzVmFsaWRJZGVudGlmaWVyID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc1ZhbGlkSWRlbnRpZmllclwiKTtcblxudmFyIF9pc1ZhciA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNWYXJcIik7XG5cbnZhciBfbWF0Y2hlc1BhdHRlcm4gPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL21hdGNoZXNQYXR0ZXJuXCIpO1xuXG52YXIgX3ZhbGlkYXRlID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy92YWxpZGF0ZVwiKTtcblxudmFyIF9idWlsZE1hdGNoTWVtYmVyRXhwcmVzc2lvbiA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb25cIik7XG5cbnZhciBfZ2VuZXJhdGVkNCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkXCIpO1xuXG5PYmplY3Qua2V5cyhfZ2VuZXJhdGVkNCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2dlbmVyYXRlZDRba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZ2VuZXJhdGVkNFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9nZW5lcmF0ZWQ1ID0gcmVxdWlyZShcIi4vYXN0LXR5cGVzL2dlbmVyYXRlZFwiKTtcblxuT2JqZWN0LmtleXMoX2dlbmVyYXRlZDUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9nZW5lcmF0ZWQ1W2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2dlbmVyYXRlZDVba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5jb25zdCByZWFjdCA9IHtcbiAgaXNSZWFjdENvbXBvbmVudDogX2lzUmVhY3RDb21wb25lbnQuZGVmYXVsdCxcbiAgaXNDb21wYXRUYWc6IF9pc0NvbXBhdFRhZy5kZWZhdWx0LFxuICBidWlsZENoaWxkcmVuOiBfYnVpbGRDaGlsZHJlbi5kZWZhdWx0XG59O1xuZXhwb3J0cy5yZWFjdCA9IHJlYWN0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi9idWlsZGVycy9nZW5lcmF0ZWRcIik7XG5cbmZ1bmN0aW9uIGFwcGVuZFRvTWVtYmVyRXhwcmVzc2lvbihtZW1iZXIsIGFwcGVuZCwgY29tcHV0ZWQgPSBmYWxzZSkge1xuICBtZW1iZXIub2JqZWN0ID0gKDAsIF9nZW5lcmF0ZWQubWVtYmVyRXhwcmVzc2lvbikobWVtYmVyLm9iamVjdCwgbWVtYmVyLnByb3BlcnR5LCBtZW1iZXIuY29tcHV0ZWQpO1xuICBtZW1iZXIucHJvcGVydHkgPSBhcHBlbmQ7XG4gIG1lbWJlci5jb21wdXRlZCA9ICEhY29tcHV0ZWQ7XG4gIHJldHVybiBtZW1iZXI7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVUeXBlRHVwbGljYXRlcztcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi4vLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWRcIik7XG5cbmZ1bmN0aW9uIGdldFF1YWxpZmllZE5hbWUobm9kZSkge1xuICByZXR1cm4gKDAsIF9nZW5lcmF0ZWQuaXNJZGVudGlmaWVyKShub2RlKSA/IG5vZGUubmFtZSA6IGAke25vZGUuaWQubmFtZX0uJHtnZXRRdWFsaWZpZWROYW1lKG5vZGUucXVhbGlmaWNhdGlvbil9YDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHlwZUR1cGxpY2F0ZXMobm9kZXMpIHtcbiAgY29uc3QgZ2VuZXJpY3MgPSB7fTtcbiAgY29uc3QgYmFzZXMgPSB7fTtcbiAgY29uc3QgdHlwZUdyb3VwcyA9IFtdO1xuICBjb25zdCB0eXBlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKCFub2RlKSBjb250aW51ZTtcblxuICAgIGlmICh0eXBlcy5pbmRleE9mKG5vZGUpID49IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc0FueVR5cGVBbm5vdGF0aW9uKShub2RlKSkge1xuICAgICAgcmV0dXJuIFtub2RlXTtcbiAgICB9XG5cbiAgICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNGbG93QmFzZUFubm90YXRpb24pKG5vZGUpKSB7XG4gICAgICBiYXNlc1tub2RlLnR5cGVdID0gbm9kZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc1VuaW9uVHlwZUFubm90YXRpb24pKG5vZGUpKSB7XG4gICAgICBpZiAodHlwZUdyb3Vwcy5pbmRleE9mKG5vZGUudHlwZXMpIDwgMCkge1xuICAgICAgICBub2RlcyA9IG5vZGVzLmNvbmNhdChub2RlLnR5cGVzKTtcbiAgICAgICAgdHlwZUdyb3Vwcy5wdXNoKG5vZGUudHlwZXMpO1xuICAgICAgfVxuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNHZW5lcmljVHlwZUFubm90YXRpb24pKG5vZGUpKSB7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0UXVhbGlmaWVkTmFtZShub2RlLmlkKTtcblxuICAgICAgaWYgKGdlbmVyaWNzW25hbWVdKSB7XG4gICAgICAgIGxldCBleGlzdGluZyA9IGdlbmVyaWNzW25hbWVdO1xuXG4gICAgICAgIGlmIChleGlzdGluZy50eXBlUGFyYW1ldGVycykge1xuICAgICAgICAgIGlmIChub2RlLnR5cGVQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBleGlzdGluZy50eXBlUGFyYW1ldGVycy5wYXJhbXMgPSByZW1vdmVUeXBlRHVwbGljYXRlcyhleGlzdGluZy50eXBlUGFyYW1ldGVycy5wYXJhbXMuY29uY2F0KG5vZGUudHlwZVBhcmFtZXRlcnMucGFyYW1zKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXN0aW5nID0gbm9kZS50eXBlUGFyYW1ldGVycztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VuZXJpY3NbbmFtZV0gPSBub2RlO1xuICAgICAgfVxuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0eXBlcy5wdXNoKG5vZGUpO1xuICB9XG5cbiAgZm9yIChjb25zdCB0eXBlIG9mIE9iamVjdC5rZXlzKGJhc2VzKSkge1xuICAgIHR5cGVzLnB1c2goYmFzZXNbdHlwZV0pO1xuICB9XG5cbiAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGdlbmVyaWNzKSkge1xuICAgIHR5cGVzLnB1c2goZ2VuZXJpY3NbbmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVzO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5oZXJpdHM7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9pbmhlcml0c0NvbW1lbnRzID0gcmVxdWlyZShcIi4uL2NvbW1lbnRzL2luaGVyaXRzQ29tbWVudHNcIik7XG5cbmZ1bmN0aW9uIGluaGVyaXRzKGNoaWxkLCBwYXJlbnQpIHtcbiAgaWYgKCFjaGlsZCB8fCAhcGFyZW50KSByZXR1cm4gY2hpbGQ7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgX2NvbnN0YW50cy5JTkhFUklUX0tFWVMub3B0aW9uYWwpIHtcbiAgICBpZiAoY2hpbGRba2V5XSA9PSBudWxsKSB7XG4gICAgICBjaGlsZFtrZXldID0gcGFyZW50W2tleV07XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocGFyZW50KSkge1xuICAgIGlmIChrZXlbMF0gPT09IFwiX1wiICYmIGtleSAhPT0gXCJfX2Nsb25lXCIpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIF9jb25zdGFudHMuSU5IRVJJVF9LRVlTLmZvcmNlKSB7XG4gICAgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldO1xuICB9XG5cbiAgKDAsIF9pbmhlcml0c0NvbW1lbnRzLmRlZmF1bHQpKGNoaWxkLCBwYXJlbnQpO1xuICByZXR1cm4gY2hpbGQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVwZW5kVG9NZW1iZXJFeHByZXNzaW9uO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi9idWlsZGVycy9nZW5lcmF0ZWRcIik7XG5cbmZ1bmN0aW9uIHByZXBlbmRUb01lbWJlckV4cHJlc3Npb24obWVtYmVyLCBwcmVwZW5kKSB7XG4gIG1lbWJlci5vYmplY3QgPSAoMCwgX2dlbmVyYXRlZC5tZW1iZXJFeHByZXNzaW9uKShwcmVwZW5kLCBtZW1iZXIub2JqZWN0KTtcbiAgcmV0dXJuIG1lbWJlcjtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZVByb3BlcnRpZXM7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuY29uc3QgQ0xFQVJfS0VZUyA9IFtcInRva2Vuc1wiLCBcInN0YXJ0XCIsIFwiZW5kXCIsIFwibG9jXCIsIFwicmF3XCIsIFwicmF3VmFsdWVcIl07XG5cbmNvbnN0IENMRUFSX0tFWVNfUExVU19DT01NRU5UUyA9IF9jb25zdGFudHMuQ09NTUVOVF9LRVlTLmNvbmNhdChbXCJjb21tZW50c1wiXSkuY29uY2F0KENMRUFSX0tFWVMpO1xuXG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0aWVzKG5vZGUsIG9wdHMgPSB7fSkge1xuICBjb25zdCBtYXAgPSBvcHRzLnByZXNlcnZlQ29tbWVudHMgPyBDTEVBUl9LRVlTIDogQ0xFQVJfS0VZU19QTFVTX0NPTU1FTlRTO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIG1hcCkge1xuICAgIGlmIChub2RlW2tleV0gIT0gbnVsbCkgbm9kZVtrZXldID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobm9kZSkpIHtcbiAgICBpZiAoa2V5WzBdID09PSBcIl9cIiAmJiBub2RlW2tleV0gIT0gbnVsbCkgbm9kZVtrZXldID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3Qgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobm9kZSk7XG5cbiAgZm9yIChjb25zdCBzeW0gb2Ygc3ltYm9scykge1xuICAgIG5vZGVbc3ltXSA9IG51bGw7XG4gIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZVByb3BlcnRpZXNEZWVwO1xuXG52YXIgX3RyYXZlcnNlRmFzdCA9IHJlcXVpcmUoXCIuLi90cmF2ZXJzZS90cmF2ZXJzZUZhc3RcIik7XG5cbnZhciBfcmVtb3ZlUHJvcGVydGllcyA9IHJlcXVpcmUoXCIuL3JlbW92ZVByb3BlcnRpZXNcIik7XG5cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnRpZXNEZWVwKHRyZWUsIG9wdHMpIHtcbiAgKDAsIF90cmF2ZXJzZUZhc3QuZGVmYXVsdCkodHJlZSwgX3JlbW92ZVByb3BlcnRpZXMuZGVmYXVsdCwgb3B0cyk7XG4gIHJldHVybiB0cmVlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlVHlwZUR1cGxpY2F0ZXM7XG5cbnZhciBfZ2VuZXJhdGVkID0gcmVxdWlyZShcIi4uLy4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkXCIpO1xuXG5mdW5jdGlvbiByZW1vdmVUeXBlRHVwbGljYXRlcyhub2Rlcykge1xuICBjb25zdCBnZW5lcmljcyA9IHt9O1xuICBjb25zdCBiYXNlcyA9IHt9O1xuICBjb25zdCB0eXBlR3JvdXBzID0gW107XG4gIGNvbnN0IHR5cGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAoIW5vZGUpIGNvbnRpbnVlO1xuXG4gICAgaWYgKHR5cGVzLmluZGV4T2Yobm9kZSkgPj0gMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzVFNBbnlLZXl3b3JkKShub2RlKSkge1xuICAgICAgcmV0dXJuIFtub2RlXTtcbiAgICB9XG5cbiAgICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNUU0Jhc2VUeXBlKShub2RlKSkge1xuICAgICAgYmFzZXNbbm9kZS50eXBlXSA9IG5vZGU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNUU1VuaW9uVHlwZSkobm9kZSkpIHtcbiAgICAgIGlmICh0eXBlR3JvdXBzLmluZGV4T2Yobm9kZS50eXBlcykgPCAwKSB7XG4gICAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KG5vZGUudHlwZXMpO1xuICAgICAgICB0eXBlR3JvdXBzLnB1c2gobm9kZS50eXBlcyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHR5cGVzLnB1c2gobm9kZSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXMoYmFzZXMpKSB7XG4gICAgdHlwZXMucHVzaChiYXNlc1t0eXBlXSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoZ2VuZXJpY3MpKSB7XG4gICAgdHlwZXMucHVzaChnZW5lcmljc1tuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gdHlwZXM7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRCaW5kaW5nSWRlbnRpZmllcnM7XG5cbnZhciBfZ2VuZXJhdGVkID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkXCIpO1xuXG5mdW5jdGlvbiBnZXRCaW5kaW5nSWRlbnRpZmllcnMobm9kZSwgZHVwbGljYXRlcywgb3V0ZXJPbmx5KSB7XG4gIGxldCBzZWFyY2ggPSBbXS5jb25jYXQobm9kZSk7XG4gIGNvbnN0IGlkcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgd2hpbGUgKHNlYXJjaC5sZW5ndGgpIHtcbiAgICBjb25zdCBpZCA9IHNlYXJjaC5zaGlmdCgpO1xuICAgIGlmICghaWQpIGNvbnRpbnVlO1xuICAgIGNvbnN0IGtleXMgPSBnZXRCaW5kaW5nSWRlbnRpZmllcnMua2V5c1tpZC50eXBlXTtcblxuICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc0lkZW50aWZpZXIpKGlkKSkge1xuICAgICAgaWYgKGR1cGxpY2F0ZXMpIHtcbiAgICAgICAgY29uc3QgX2lkcyA9IGlkc1tpZC5uYW1lXSA9IGlkc1tpZC5uYW1lXSB8fCBbXTtcblxuICAgICAgICBfaWRzLnB1c2goaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWRzW2lkLm5hbWVdID0gaWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc0V4cG9ydERlY2xhcmF0aW9uKShpZCkgJiYgISgwLCBfZ2VuZXJhdGVkLmlzRXhwb3J0QWxsRGVjbGFyYXRpb24pKGlkKSkge1xuICAgICAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzRGVjbGFyYXRpb24pKGlkLmRlY2xhcmF0aW9uKSkge1xuICAgICAgICBzZWFyY2gucHVzaChpZC5kZWNsYXJhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChvdXRlck9ubHkpIHtcbiAgICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc0Z1bmN0aW9uRGVjbGFyYXRpb24pKGlkKSkge1xuICAgICAgICBzZWFyY2gucHVzaChpZC5pZCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoKDAsIF9nZW5lcmF0ZWQuaXNGdW5jdGlvbkV4cHJlc3Npb24pKGlkKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5cykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGlkW2tleV0pIHtcbiAgICAgICAgICBzZWFyY2ggPSBzZWFyY2guY29uY2F0KGlkW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlkcztcbn1cblxuZ2V0QmluZGluZ0lkZW50aWZpZXJzLmtleXMgPSB7XG4gIERlY2xhcmVDbGFzczogW1wiaWRcIl0sXG4gIERlY2xhcmVGdW5jdGlvbjogW1wiaWRcIl0sXG4gIERlY2xhcmVNb2R1bGU6IFtcImlkXCJdLFxuICBEZWNsYXJlVmFyaWFibGU6IFtcImlkXCJdLFxuICBEZWNsYXJlSW50ZXJmYWNlOiBbXCJpZFwiXSxcbiAgRGVjbGFyZVR5cGVBbGlhczogW1wiaWRcIl0sXG4gIERlY2xhcmVPcGFxdWVUeXBlOiBbXCJpZFwiXSxcbiAgSW50ZXJmYWNlRGVjbGFyYXRpb246IFtcImlkXCJdLFxuICBUeXBlQWxpYXM6IFtcImlkXCJdLFxuICBPcGFxdWVUeXBlOiBbXCJpZFwiXSxcbiAgQ2F0Y2hDbGF1c2U6IFtcInBhcmFtXCJdLFxuICBMYWJlbGVkU3RhdGVtZW50OiBbXCJsYWJlbFwiXSxcbiAgVW5hcnlFeHByZXNzaW9uOiBbXCJhcmd1bWVudFwiXSxcbiAgQXNzaWdubWVudEV4cHJlc3Npb246IFtcImxlZnRcIl0sXG4gIEltcG9ydFNwZWNpZmllcjogW1wibG9jYWxcIl0sXG4gIEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjogW1wibG9jYWxcIl0sXG4gIEltcG9ydERlZmF1bHRTcGVjaWZpZXI6IFtcImxvY2FsXCJdLFxuICBJbXBvcnREZWNsYXJhdGlvbjogW1wic3BlY2lmaWVyc1wiXSxcbiAgRXhwb3J0U3BlY2lmaWVyOiBbXCJleHBvcnRlZFwiXSxcbiAgRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyOiBbXCJleHBvcnRlZFwiXSxcbiAgRXhwb3J0RGVmYXVsdFNwZWNpZmllcjogW1wiZXhwb3J0ZWRcIl0sXG4gIEZ1bmN0aW9uRGVjbGFyYXRpb246IFtcImlkXCIsIFwicGFyYW1zXCJdLFxuICBGdW5jdGlvbkV4cHJlc3Npb246IFtcImlkXCIsIFwicGFyYW1zXCJdLFxuICBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogW1wicGFyYW1zXCJdLFxuICBPYmplY3RNZXRob2Q6IFtcInBhcmFtc1wiXSxcbiAgQ2xhc3NNZXRob2Q6IFtcInBhcmFtc1wiXSxcbiAgRm9ySW5TdGF0ZW1lbnQ6IFtcImxlZnRcIl0sXG4gIEZvck9mU3RhdGVtZW50OiBbXCJsZWZ0XCJdLFxuICBDbGFzc0RlY2xhcmF0aW9uOiBbXCJpZFwiXSxcbiAgQ2xhc3NFeHByZXNzaW9uOiBbXCJpZFwiXSxcbiAgUmVzdEVsZW1lbnQ6IFtcImFyZ3VtZW50XCJdLFxuICBVcGRhdGVFeHByZXNzaW9uOiBbXCJhcmd1bWVudFwiXSxcbiAgT2JqZWN0UHJvcGVydHk6IFtcInZhbHVlXCJdLFxuICBBc3NpZ25tZW50UGF0dGVybjogW1wibGVmdFwiXSxcbiAgQXJyYXlQYXR0ZXJuOiBbXCJlbGVtZW50c1wiXSxcbiAgT2JqZWN0UGF0dGVybjogW1wicHJvcGVydGllc1wiXSxcbiAgVmFyaWFibGVEZWNsYXJhdGlvbjogW1wiZGVjbGFyYXRpb25zXCJdLFxuICBWYXJpYWJsZURlY2xhcmF0b3I6IFtcImlkXCJdXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2dldEJpbmRpbmdJZGVudGlmaWVycyA9IHJlcXVpcmUoXCIuL2dldEJpbmRpbmdJZGVudGlmaWVyc1wiKTtcblxudmFyIF9kZWZhdWx0ID0gZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnMobm9kZSwgZHVwbGljYXRlcykge1xuICByZXR1cm4gKDAsIF9nZXRCaW5kaW5nSWRlbnRpZmllcnMuZGVmYXVsdCkobm9kZSwgZHVwbGljYXRlcywgdHJ1ZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmF2ZXJzZTtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxuZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgaGFuZGxlcnMsIHN0YXRlKSB7XG4gIGlmICh0eXBlb2YgaGFuZGxlcnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGhhbmRsZXJzID0ge1xuICAgICAgZW50ZXI6IGhhbmRsZXJzXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBlbnRlcixcbiAgICBleGl0XG4gIH0gPSBoYW5kbGVycztcbiAgdHJhdmVyc2VTaW1wbGVJbXBsKG5vZGUsIGVudGVyLCBleGl0LCBzdGF0ZSwgW10pO1xufVxuXG5mdW5jdGlvbiB0cmF2ZXJzZVNpbXBsZUltcGwobm9kZSwgZW50ZXIsIGV4aXQsIHN0YXRlLCBhbmNlc3RvcnMpIHtcbiAgY29uc3Qga2V5cyA9IF9kZWZpbml0aW9ucy5WSVNJVE9SX0tFWVNbbm9kZS50eXBlXTtcbiAgaWYgKCFrZXlzKSByZXR1cm47XG4gIGlmIChlbnRlcikgZW50ZXIobm9kZSwgYW5jZXN0b3JzLCBzdGF0ZSk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IHN1Yk5vZGUgPSBub2RlW2tleV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJOb2RlKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJOb2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gc3ViTm9kZVtpXTtcbiAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHtcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBpbmRleDogaVxuICAgICAgICB9KTtcbiAgICAgICAgdHJhdmVyc2VTaW1wbGVJbXBsKGNoaWxkLCBlbnRlciwgZXhpdCwgc3RhdGUsIGFuY2VzdG9ycyk7XG4gICAgICAgIGFuY2VzdG9ycy5wb3AoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN1Yk5vZGUpIHtcbiAgICAgIGFuY2VzdG9ycy5wdXNoKHtcbiAgICAgICAgbm9kZSxcbiAgICAgICAga2V5XG4gICAgICB9KTtcbiAgICAgIHRyYXZlcnNlU2ltcGxlSW1wbChzdWJOb2RlLCBlbnRlciwgZXhpdCwgc3RhdGUsIGFuY2VzdG9ycyk7XG4gICAgICBhbmNlc3RvcnMucG9wKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4aXQpIGV4aXQobm9kZSwgYW5jZXN0b3JzLCBzdGF0ZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmF2ZXJzZUZhc3Q7XG5cbnZhciBfZGVmaW5pdGlvbnMgPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnNcIik7XG5cbmZ1bmN0aW9uIHRyYXZlcnNlRmFzdChub2RlLCBlbnRlciwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybjtcbiAgY29uc3Qga2V5cyA9IF9kZWZpbml0aW9ucy5WSVNJVE9SX0tFWVNbbm9kZS50eXBlXTtcbiAgaWYgKCFrZXlzKSByZXR1cm47XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBlbnRlcihub2RlLCBvcHRzKTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3Qgc3ViTm9kZSA9IG5vZGVba2V5XTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHN1Yk5vZGUpKSB7XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygc3ViTm9kZSkge1xuICAgICAgICB0cmF2ZXJzZUZhc3Qobm9kZSwgZW50ZXIsIG9wdHMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmF2ZXJzZUZhc3Qoc3ViTm9kZSwgZW50ZXIsIG9wdHMpO1xuICAgIH1cbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5oZXJpdDtcblxuZnVuY3Rpb24gaW5oZXJpdChrZXksIGNoaWxkLCBwYXJlbnQpIHtcbiAgaWYgKGNoaWxkICYmIHBhcmVudCkge1xuICAgIGNoaWxkW2tleV0gPSBBcnJheS5mcm9tKG5ldyBTZXQoW10uY29uY2F0KGNoaWxkW2tleV0sIHBhcmVudFtrZXldKS5maWx0ZXIoQm9vbGVhbikpKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2xlYW5KU1hFbGVtZW50TGl0ZXJhbENoaWxkO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuLi8uLi9idWlsZGVycy9nZW5lcmF0ZWRcIik7XG5cbmZ1bmN0aW9uIGNsZWFuSlNYRWxlbWVudExpdGVyYWxDaGlsZChjaGlsZCwgYXJncykge1xuICBjb25zdCBsaW5lcyA9IGNoaWxkLnZhbHVlLnNwbGl0KC9cXHJcXG58XFxufFxcci8pO1xuICBsZXQgbGFzdE5vbkVtcHR5TGluZSA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsaW5lc1tpXS5tYXRjaCgvW14gXFx0XS8pKSB7XG4gICAgICBsYXN0Tm9uRW1wdHlMaW5lID0gaTtcbiAgICB9XG4gIH1cblxuICBsZXQgc3RyID0gXCJcIjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgIGNvbnN0IGlzRmlyc3RMaW5lID0gaSA9PT0gMDtcbiAgICBjb25zdCBpc0xhc3RMaW5lID0gaSA9PT0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBpc0xhc3ROb25FbXB0eUxpbmUgPSBpID09PSBsYXN0Tm9uRW1wdHlMaW5lO1xuICAgIGxldCB0cmltbWVkTGluZSA9IGxpbmUucmVwbGFjZSgvXFx0L2csIFwiIFwiKTtcblxuICAgIGlmICghaXNGaXJzdExpbmUpIHtcbiAgICAgIHRyaW1tZWRMaW5lID0gdHJpbW1lZExpbmUucmVwbGFjZSgvXlsgXSsvLCBcIlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTGFzdExpbmUpIHtcbiAgICAgIHRyaW1tZWRMaW5lID0gdHJpbW1lZExpbmUucmVwbGFjZSgvWyBdKyQvLCBcIlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHJpbW1lZExpbmUpIHtcbiAgICAgIGlmICghaXNMYXN0Tm9uRW1wdHlMaW5lKSB7XG4gICAgICAgIHRyaW1tZWRMaW5lICs9IFwiIFwiO1xuICAgICAgfVxuXG4gICAgICBzdHIgKz0gdHJpbW1lZExpbmU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0cikgYXJncy5wdXNoKCgwLCBfZ2VuZXJhdGVkLnN0cmluZ0xpdGVyYWwpKHN0cikpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2hhbGxvd0VxdWFsO1xuXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwoYWN0dWFsLCBleHBlY3RlZCkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZXhwZWN0ZWQpO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoYWN0dWFsW2tleV0gIT09IGV4cGVjdGVkW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJ1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uO1xuXG52YXIgX21hdGNoZXNQYXR0ZXJuID0gcmVxdWlyZShcIi4vbWF0Y2hlc1BhdHRlcm5cIik7XG5cbmZ1bmN0aW9uIGJ1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uKG1hdGNoLCBhbGxvd1BhcnRpYWwpIHtcbiAgY29uc3QgcGFydHMgPSBtYXRjaC5zcGxpdChcIi5cIik7XG4gIHJldHVybiBtZW1iZXIgPT4gKDAsIF9tYXRjaGVzUGF0dGVybi5kZWZhdWx0KShtZW1iZXIsIHBhcnRzLCBhbGxvd1BhcnRpYWwpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc0FycmF5RXhwcmVzc2lvbiA9IGlzQXJyYXlFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0Fzc2lnbm1lbnRFeHByZXNzaW9uID0gaXNBc3NpZ25tZW50RXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNCaW5hcnlFeHByZXNzaW9uID0gaXNCaW5hcnlFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0ludGVycHJldGVyRGlyZWN0aXZlID0gaXNJbnRlcnByZXRlckRpcmVjdGl2ZTtcbmV4cG9ydHMuaXNEaXJlY3RpdmUgPSBpc0RpcmVjdGl2ZTtcbmV4cG9ydHMuaXNEaXJlY3RpdmVMaXRlcmFsID0gaXNEaXJlY3RpdmVMaXRlcmFsO1xuZXhwb3J0cy5pc0Jsb2NrU3RhdGVtZW50ID0gaXNCbG9ja1N0YXRlbWVudDtcbmV4cG9ydHMuaXNCcmVha1N0YXRlbWVudCA9IGlzQnJlYWtTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzQ2FsbEV4cHJlc3Npb24gPSBpc0NhbGxFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0NhdGNoQ2xhdXNlID0gaXNDYXRjaENsYXVzZTtcbmV4cG9ydHMuaXNDb25kaXRpb25hbEV4cHJlc3Npb24gPSBpc0NvbmRpdGlvbmFsRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNDb250aW51ZVN0YXRlbWVudCA9IGlzQ29udGludWVTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzRGVidWdnZXJTdGF0ZW1lbnQgPSBpc0RlYnVnZ2VyU3RhdGVtZW50O1xuZXhwb3J0cy5pc0RvV2hpbGVTdGF0ZW1lbnQgPSBpc0RvV2hpbGVTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzRW1wdHlTdGF0ZW1lbnQgPSBpc0VtcHR5U3RhdGVtZW50O1xuZXhwb3J0cy5pc0V4cHJlc3Npb25TdGF0ZW1lbnQgPSBpc0V4cHJlc3Npb25TdGF0ZW1lbnQ7XG5leHBvcnRzLmlzRmlsZSA9IGlzRmlsZTtcbmV4cG9ydHMuaXNGb3JJblN0YXRlbWVudCA9IGlzRm9ySW5TdGF0ZW1lbnQ7XG5leHBvcnRzLmlzRm9yU3RhdGVtZW50ID0gaXNGb3JTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzRnVuY3Rpb25EZWNsYXJhdGlvbiA9IGlzRnVuY3Rpb25EZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNGdW5jdGlvbkV4cHJlc3Npb24gPSBpc0Z1bmN0aW9uRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNJZGVudGlmaWVyID0gaXNJZGVudGlmaWVyO1xuZXhwb3J0cy5pc0lmU3RhdGVtZW50ID0gaXNJZlN0YXRlbWVudDtcbmV4cG9ydHMuaXNMYWJlbGVkU3RhdGVtZW50ID0gaXNMYWJlbGVkU3RhdGVtZW50O1xuZXhwb3J0cy5pc1N0cmluZ0xpdGVyYWwgPSBpc1N0cmluZ0xpdGVyYWw7XG5leHBvcnRzLmlzTnVtZXJpY0xpdGVyYWwgPSBpc051bWVyaWNMaXRlcmFsO1xuZXhwb3J0cy5pc051bGxMaXRlcmFsID0gaXNOdWxsTGl0ZXJhbDtcbmV4cG9ydHMuaXNCb29sZWFuTGl0ZXJhbCA9IGlzQm9vbGVhbkxpdGVyYWw7XG5leHBvcnRzLmlzUmVnRXhwTGl0ZXJhbCA9IGlzUmVnRXhwTGl0ZXJhbDtcbmV4cG9ydHMuaXNMb2dpY2FsRXhwcmVzc2lvbiA9IGlzTG9naWNhbEV4cHJlc3Npb247XG5leHBvcnRzLmlzTWVtYmVyRXhwcmVzc2lvbiA9IGlzTWVtYmVyRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNOZXdFeHByZXNzaW9uID0gaXNOZXdFeHByZXNzaW9uO1xuZXhwb3J0cy5pc1Byb2dyYW0gPSBpc1Byb2dyYW07XG5leHBvcnRzLmlzT2JqZWN0RXhwcmVzc2lvbiA9IGlzT2JqZWN0RXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNPYmplY3RNZXRob2QgPSBpc09iamVjdE1ldGhvZDtcbmV4cG9ydHMuaXNPYmplY3RQcm9wZXJ0eSA9IGlzT2JqZWN0UHJvcGVydHk7XG5leHBvcnRzLmlzUmVzdEVsZW1lbnQgPSBpc1Jlc3RFbGVtZW50O1xuZXhwb3J0cy5pc1JldHVyblN0YXRlbWVudCA9IGlzUmV0dXJuU3RhdGVtZW50O1xuZXhwb3J0cy5pc1NlcXVlbmNlRXhwcmVzc2lvbiA9IGlzU2VxdWVuY2VFeHByZXNzaW9uO1xuZXhwb3J0cy5pc1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uID0gaXNQYXJlbnRoZXNpemVkRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNTd2l0Y2hDYXNlID0gaXNTd2l0Y2hDYXNlO1xuZXhwb3J0cy5pc1N3aXRjaFN0YXRlbWVudCA9IGlzU3dpdGNoU3RhdGVtZW50O1xuZXhwb3J0cy5pc1RoaXNFeHByZXNzaW9uID0gaXNUaGlzRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNUaHJvd1N0YXRlbWVudCA9IGlzVGhyb3dTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzVHJ5U3RhdGVtZW50ID0gaXNUcnlTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzVW5hcnlFeHByZXNzaW9uID0gaXNVbmFyeUV4cHJlc3Npb247XG5leHBvcnRzLmlzVXBkYXRlRXhwcmVzc2lvbiA9IGlzVXBkYXRlRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNWYXJpYWJsZURlY2xhcmF0aW9uID0gaXNWYXJpYWJsZURlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc1ZhcmlhYmxlRGVjbGFyYXRvciA9IGlzVmFyaWFibGVEZWNsYXJhdG9yO1xuZXhwb3J0cy5pc1doaWxlU3RhdGVtZW50ID0gaXNXaGlsZVN0YXRlbWVudDtcbmV4cG9ydHMuaXNXaXRoU3RhdGVtZW50ID0gaXNXaXRoU3RhdGVtZW50O1xuZXhwb3J0cy5pc0Fzc2lnbm1lbnRQYXR0ZXJuID0gaXNBc3NpZ25tZW50UGF0dGVybjtcbmV4cG9ydHMuaXNBcnJheVBhdHRlcm4gPSBpc0FycmF5UGF0dGVybjtcbmV4cG9ydHMuaXNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGlzQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG5leHBvcnRzLmlzQ2xhc3NCb2R5ID0gaXNDbGFzc0JvZHk7XG5leHBvcnRzLmlzQ2xhc3NFeHByZXNzaW9uID0gaXNDbGFzc0V4cHJlc3Npb247XG5leHBvcnRzLmlzQ2xhc3NEZWNsYXJhdGlvbiA9IGlzQ2xhc3NEZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNFeHBvcnRBbGxEZWNsYXJhdGlvbiA9IGlzRXhwb3J0QWxsRGVjbGFyYXRpb247XG5leHBvcnRzLmlzRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uID0gaXNFeHBvcnREZWZhdWx0RGVjbGFyYXRpb247XG5leHBvcnRzLmlzRXhwb3J0TmFtZWREZWNsYXJhdGlvbiA9IGlzRXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNFeHBvcnRTcGVjaWZpZXIgPSBpc0V4cG9ydFNwZWNpZmllcjtcbmV4cG9ydHMuaXNGb3JPZlN0YXRlbWVudCA9IGlzRm9yT2ZTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzSW1wb3J0RGVjbGFyYXRpb24gPSBpc0ltcG9ydERlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc0ltcG9ydERlZmF1bHRTcGVjaWZpZXIgPSBpc0ltcG9ydERlZmF1bHRTcGVjaWZpZXI7XG5leHBvcnRzLmlzSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gaXNJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI7XG5leHBvcnRzLmlzSW1wb3J0U3BlY2lmaWVyID0gaXNJbXBvcnRTcGVjaWZpZXI7XG5leHBvcnRzLmlzTWV0YVByb3BlcnR5ID0gaXNNZXRhUHJvcGVydHk7XG5leHBvcnRzLmlzQ2xhc3NNZXRob2QgPSBpc0NsYXNzTWV0aG9kO1xuZXhwb3J0cy5pc09iamVjdFBhdHRlcm4gPSBpc09iamVjdFBhdHRlcm47XG5leHBvcnRzLmlzU3ByZWFkRWxlbWVudCA9IGlzU3ByZWFkRWxlbWVudDtcbmV4cG9ydHMuaXNTdXBlciA9IGlzU3VwZXI7XG5leHBvcnRzLmlzVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uID0gaXNUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XG5leHBvcnRzLmlzVGVtcGxhdGVFbGVtZW50ID0gaXNUZW1wbGF0ZUVsZW1lbnQ7XG5leHBvcnRzLmlzVGVtcGxhdGVMaXRlcmFsID0gaXNUZW1wbGF0ZUxpdGVyYWw7XG5leHBvcnRzLmlzWWllbGRFeHByZXNzaW9uID0gaXNZaWVsZEV4cHJlc3Npb247XG5leHBvcnRzLmlzQXdhaXRFeHByZXNzaW9uID0gaXNBd2FpdEV4cHJlc3Npb247XG5leHBvcnRzLmlzSW1wb3J0ID0gaXNJbXBvcnQ7XG5leHBvcnRzLmlzQmlnSW50TGl0ZXJhbCA9IGlzQmlnSW50TGl0ZXJhbDtcbmV4cG9ydHMuaXNFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSBpc0V4cG9ydE5hbWVzcGFjZVNwZWNpZmllcjtcbmV4cG9ydHMuaXNPcHRpb25hbE1lbWJlckV4cHJlc3Npb24gPSBpc09wdGlvbmFsTWVtYmVyRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNPcHRpb25hbENhbGxFeHByZXNzaW9uID0gaXNPcHRpb25hbENhbGxFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0NsYXNzUHJvcGVydHkgPSBpc0NsYXNzUHJvcGVydHk7XG5leHBvcnRzLmlzQ2xhc3NQcml2YXRlUHJvcGVydHkgPSBpc0NsYXNzUHJpdmF0ZVByb3BlcnR5O1xuZXhwb3J0cy5pc0NsYXNzUHJpdmF0ZU1ldGhvZCA9IGlzQ2xhc3NQcml2YXRlTWV0aG9kO1xuZXhwb3J0cy5pc1ByaXZhdGVOYW1lID0gaXNQcml2YXRlTmFtZTtcbmV4cG9ydHMuaXNBbnlUeXBlQW5ub3RhdGlvbiA9IGlzQW55VHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzQXJyYXlUeXBlQW5ub3RhdGlvbiA9IGlzQXJyYXlUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNCb29sZWFuVHlwZUFubm90YXRpb24gPSBpc0Jvb2xlYW5UeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNCb29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gaXNCb29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc051bGxMaXRlcmFsVHlwZUFubm90YXRpb24gPSBpc051bGxMaXRlcmFsVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzQ2xhc3NJbXBsZW1lbnRzID0gaXNDbGFzc0ltcGxlbWVudHM7XG5leHBvcnRzLmlzRGVjbGFyZUNsYXNzID0gaXNEZWNsYXJlQ2xhc3M7XG5leHBvcnRzLmlzRGVjbGFyZUZ1bmN0aW9uID0gaXNEZWNsYXJlRnVuY3Rpb247XG5leHBvcnRzLmlzRGVjbGFyZUludGVyZmFjZSA9IGlzRGVjbGFyZUludGVyZmFjZTtcbmV4cG9ydHMuaXNEZWNsYXJlTW9kdWxlID0gaXNEZWNsYXJlTW9kdWxlO1xuZXhwb3J0cy5pc0RlY2xhcmVNb2R1bGVFeHBvcnRzID0gaXNEZWNsYXJlTW9kdWxlRXhwb3J0cztcbmV4cG9ydHMuaXNEZWNsYXJlVHlwZUFsaWFzID0gaXNEZWNsYXJlVHlwZUFsaWFzO1xuZXhwb3J0cy5pc0RlY2xhcmVPcGFxdWVUeXBlID0gaXNEZWNsYXJlT3BhcXVlVHlwZTtcbmV4cG9ydHMuaXNEZWNsYXJlVmFyaWFibGUgPSBpc0RlY2xhcmVWYXJpYWJsZTtcbmV4cG9ydHMuaXNEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb24gPSBpc0RlY2xhcmVFeHBvcnREZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNEZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb24gPSBpc0RlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNEZWNsYXJlZFByZWRpY2F0ZSA9IGlzRGVjbGFyZWRQcmVkaWNhdGU7XG5leHBvcnRzLmlzRXhpc3RzVHlwZUFubm90YXRpb24gPSBpc0V4aXN0c1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc0Z1bmN0aW9uVHlwZUFubm90YXRpb24gPSBpc0Z1bmN0aW9uVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzRnVuY3Rpb25UeXBlUGFyYW0gPSBpc0Z1bmN0aW9uVHlwZVBhcmFtO1xuZXhwb3J0cy5pc0dlbmVyaWNUeXBlQW5ub3RhdGlvbiA9IGlzR2VuZXJpY1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc0luZmVycmVkUHJlZGljYXRlID0gaXNJbmZlcnJlZFByZWRpY2F0ZTtcbmV4cG9ydHMuaXNJbnRlcmZhY2VFeHRlbmRzID0gaXNJbnRlcmZhY2VFeHRlbmRzO1xuZXhwb3J0cy5pc0ludGVyZmFjZURlY2xhcmF0aW9uID0gaXNJbnRlcmZhY2VEZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNJbnRlcmZhY2VUeXBlQW5ub3RhdGlvbiA9IGlzSW50ZXJmYWNlVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzSW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb24gPSBpc0ludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc01peGVkVHlwZUFubm90YXRpb24gPSBpc01peGVkVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzRW1wdHlUeXBlQW5ub3RhdGlvbiA9IGlzRW1wdHlUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNOdWxsYWJsZVR5cGVBbm5vdGF0aW9uID0gaXNOdWxsYWJsZVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc051bWJlckxpdGVyYWxUeXBlQW5ub3RhdGlvbiA9IGlzTnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc051bWJlclR5cGVBbm5vdGF0aW9uID0gaXNOdW1iZXJUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNPYmplY3RUeXBlQW5ub3RhdGlvbiA9IGlzT2JqZWN0VHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzT2JqZWN0VHlwZUludGVybmFsU2xvdCA9IGlzT2JqZWN0VHlwZUludGVybmFsU2xvdDtcbmV4cG9ydHMuaXNPYmplY3RUeXBlQ2FsbFByb3BlcnR5ID0gaXNPYmplY3RUeXBlQ2FsbFByb3BlcnR5O1xuZXhwb3J0cy5pc09iamVjdFR5cGVJbmRleGVyID0gaXNPYmplY3RUeXBlSW5kZXhlcjtcbmV4cG9ydHMuaXNPYmplY3RUeXBlUHJvcGVydHkgPSBpc09iamVjdFR5cGVQcm9wZXJ0eTtcbmV4cG9ydHMuaXNPYmplY3RUeXBlU3ByZWFkUHJvcGVydHkgPSBpc09iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eTtcbmV4cG9ydHMuaXNPcGFxdWVUeXBlID0gaXNPcGFxdWVUeXBlO1xuZXhwb3J0cy5pc1F1YWxpZmllZFR5cGVJZGVudGlmaWVyID0gaXNRdWFsaWZpZWRUeXBlSWRlbnRpZmllcjtcbmV4cG9ydHMuaXNTdHJpbmdMaXRlcmFsVHlwZUFubm90YXRpb24gPSBpc1N0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNTdHJpbmdUeXBlQW5ub3RhdGlvbiA9IGlzU3RyaW5nVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzU3ltYm9sVHlwZUFubm90YXRpb24gPSBpc1N5bWJvbFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc1RoaXNUeXBlQW5ub3RhdGlvbiA9IGlzVGhpc1R5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc1R1cGxlVHlwZUFubm90YXRpb24gPSBpc1R1cGxlVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzVHlwZW9mVHlwZUFubm90YXRpb24gPSBpc1R5cGVvZlR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc1R5cGVBbGlhcyA9IGlzVHlwZUFsaWFzO1xuZXhwb3J0cy5pc1R5cGVBbm5vdGF0aW9uID0gaXNUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNUeXBlQ2FzdEV4cHJlc3Npb24gPSBpc1R5cGVDYXN0RXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNUeXBlUGFyYW1ldGVyID0gaXNUeXBlUGFyYW1ldGVyO1xuZXhwb3J0cy5pc1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IGlzVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uID0gaXNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbjtcbmV4cG9ydHMuaXNVbmlvblR5cGVBbm5vdGF0aW9uID0gaXNVbmlvblR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc1ZhcmlhbmNlID0gaXNWYXJpYW5jZTtcbmV4cG9ydHMuaXNWb2lkVHlwZUFubm90YXRpb24gPSBpc1ZvaWRUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuaXNFbnVtRGVjbGFyYXRpb24gPSBpc0VudW1EZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNFbnVtQm9vbGVhbkJvZHkgPSBpc0VudW1Cb29sZWFuQm9keTtcbmV4cG9ydHMuaXNFbnVtTnVtYmVyQm9keSA9IGlzRW51bU51bWJlckJvZHk7XG5leHBvcnRzLmlzRW51bVN0cmluZ0JvZHkgPSBpc0VudW1TdHJpbmdCb2R5O1xuZXhwb3J0cy5pc0VudW1TeW1ib2xCb2R5ID0gaXNFbnVtU3ltYm9sQm9keTtcbmV4cG9ydHMuaXNFbnVtQm9vbGVhbk1lbWJlciA9IGlzRW51bUJvb2xlYW5NZW1iZXI7XG5leHBvcnRzLmlzRW51bU51bWJlck1lbWJlciA9IGlzRW51bU51bWJlck1lbWJlcjtcbmV4cG9ydHMuaXNFbnVtU3RyaW5nTWVtYmVyID0gaXNFbnVtU3RyaW5nTWVtYmVyO1xuZXhwb3J0cy5pc0VudW1EZWZhdWx0ZWRNZW1iZXIgPSBpc0VudW1EZWZhdWx0ZWRNZW1iZXI7XG5leHBvcnRzLmlzSW5kZXhlZEFjY2Vzc1R5cGUgPSBpc0luZGV4ZWRBY2Nlc3NUeXBlO1xuZXhwb3J0cy5pc09wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGUgPSBpc09wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGU7XG5leHBvcnRzLmlzSlNYQXR0cmlidXRlID0gaXNKU1hBdHRyaWJ1dGU7XG5leHBvcnRzLmlzSlNYQ2xvc2luZ0VsZW1lbnQgPSBpc0pTWENsb3NpbmdFbGVtZW50O1xuZXhwb3J0cy5pc0pTWEVsZW1lbnQgPSBpc0pTWEVsZW1lbnQ7XG5leHBvcnRzLmlzSlNYRW1wdHlFeHByZXNzaW9uID0gaXNKU1hFbXB0eUV4cHJlc3Npb247XG5leHBvcnRzLmlzSlNYRXhwcmVzc2lvbkNvbnRhaW5lciA9IGlzSlNYRXhwcmVzc2lvbkNvbnRhaW5lcjtcbmV4cG9ydHMuaXNKU1hTcHJlYWRDaGlsZCA9IGlzSlNYU3ByZWFkQ2hpbGQ7XG5leHBvcnRzLmlzSlNYSWRlbnRpZmllciA9IGlzSlNYSWRlbnRpZmllcjtcbmV4cG9ydHMuaXNKU1hNZW1iZXJFeHByZXNzaW9uID0gaXNKU1hNZW1iZXJFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0pTWE5hbWVzcGFjZWROYW1lID0gaXNKU1hOYW1lc3BhY2VkTmFtZTtcbmV4cG9ydHMuaXNKU1hPcGVuaW5nRWxlbWVudCA9IGlzSlNYT3BlbmluZ0VsZW1lbnQ7XG5leHBvcnRzLmlzSlNYU3ByZWFkQXR0cmlidXRlID0gaXNKU1hTcHJlYWRBdHRyaWJ1dGU7XG5leHBvcnRzLmlzSlNYVGV4dCA9IGlzSlNYVGV4dDtcbmV4cG9ydHMuaXNKU1hGcmFnbWVudCA9IGlzSlNYRnJhZ21lbnQ7XG5leHBvcnRzLmlzSlNYT3BlbmluZ0ZyYWdtZW50ID0gaXNKU1hPcGVuaW5nRnJhZ21lbnQ7XG5leHBvcnRzLmlzSlNYQ2xvc2luZ0ZyYWdtZW50ID0gaXNKU1hDbG9zaW5nRnJhZ21lbnQ7XG5leHBvcnRzLmlzTm9vcCA9IGlzTm9vcDtcbmV4cG9ydHMuaXNQbGFjZWhvbGRlciA9IGlzUGxhY2Vob2xkZXI7XG5leHBvcnRzLmlzVjhJbnRyaW5zaWNJZGVudGlmaWVyID0gaXNWOEludHJpbnNpY0lkZW50aWZpZXI7XG5leHBvcnRzLmlzQXJndW1lbnRQbGFjZWhvbGRlciA9IGlzQXJndW1lbnRQbGFjZWhvbGRlcjtcbmV4cG9ydHMuaXNCaW5kRXhwcmVzc2lvbiA9IGlzQmluZEV4cHJlc3Npb247XG5leHBvcnRzLmlzSW1wb3J0QXR0cmlidXRlID0gaXNJbXBvcnRBdHRyaWJ1dGU7XG5leHBvcnRzLmlzRGVjb3JhdG9yID0gaXNEZWNvcmF0b3I7XG5leHBvcnRzLmlzRG9FeHByZXNzaW9uID0gaXNEb0V4cHJlc3Npb247XG5leHBvcnRzLmlzRXhwb3J0RGVmYXVsdFNwZWNpZmllciA9IGlzRXhwb3J0RGVmYXVsdFNwZWNpZmllcjtcbmV4cG9ydHMuaXNSZWNvcmRFeHByZXNzaW9uID0gaXNSZWNvcmRFeHByZXNzaW9uO1xuZXhwb3J0cy5pc1R1cGxlRXhwcmVzc2lvbiA9IGlzVHVwbGVFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0RlY2ltYWxMaXRlcmFsID0gaXNEZWNpbWFsTGl0ZXJhbDtcbmV4cG9ydHMuaXNTdGF0aWNCbG9jayA9IGlzU3RhdGljQmxvY2s7XG5leHBvcnRzLmlzTW9kdWxlRXhwcmVzc2lvbiA9IGlzTW9kdWxlRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNUb3BpY1JlZmVyZW5jZSA9IGlzVG9waWNSZWZlcmVuY2U7XG5leHBvcnRzLmlzUGlwZWxpbmVUb3BpY0V4cHJlc3Npb24gPSBpc1BpcGVsaW5lVG9waWNFeHByZXNzaW9uO1xuZXhwb3J0cy5pc1BpcGVsaW5lQmFyZUZ1bmN0aW9uID0gaXNQaXBlbGluZUJhcmVGdW5jdGlvbjtcbmV4cG9ydHMuaXNQaXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZSA9IGlzUGlwZWxpbmVQcmltYXJ5VG9waWNSZWZlcmVuY2U7XG5leHBvcnRzLmlzVFNQYXJhbWV0ZXJQcm9wZXJ0eSA9IGlzVFNQYXJhbWV0ZXJQcm9wZXJ0eTtcbmV4cG9ydHMuaXNUU0RlY2xhcmVGdW5jdGlvbiA9IGlzVFNEZWNsYXJlRnVuY3Rpb247XG5leHBvcnRzLmlzVFNEZWNsYXJlTWV0aG9kID0gaXNUU0RlY2xhcmVNZXRob2Q7XG5leHBvcnRzLmlzVFNRdWFsaWZpZWROYW1lID0gaXNUU1F1YWxpZmllZE5hbWU7XG5leHBvcnRzLmlzVFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb24gPSBpc1RTQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc1RTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb24gPSBpc1RTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb247XG5leHBvcnRzLmlzVFNQcm9wZXJ0eVNpZ25hdHVyZSA9IGlzVFNQcm9wZXJ0eVNpZ25hdHVyZTtcbmV4cG9ydHMuaXNUU01ldGhvZFNpZ25hdHVyZSA9IGlzVFNNZXRob2RTaWduYXR1cmU7XG5leHBvcnRzLmlzVFNJbmRleFNpZ25hdHVyZSA9IGlzVFNJbmRleFNpZ25hdHVyZTtcbmV4cG9ydHMuaXNUU0FueUtleXdvcmQgPSBpc1RTQW55S2V5d29yZDtcbmV4cG9ydHMuaXNUU0Jvb2xlYW5LZXl3b3JkID0gaXNUU0Jvb2xlYW5LZXl3b3JkO1xuZXhwb3J0cy5pc1RTQmlnSW50S2V5d29yZCA9IGlzVFNCaWdJbnRLZXl3b3JkO1xuZXhwb3J0cy5pc1RTSW50cmluc2ljS2V5d29yZCA9IGlzVFNJbnRyaW5zaWNLZXl3b3JkO1xuZXhwb3J0cy5pc1RTTmV2ZXJLZXl3b3JkID0gaXNUU05ldmVyS2V5d29yZDtcbmV4cG9ydHMuaXNUU051bGxLZXl3b3JkID0gaXNUU051bGxLZXl3b3JkO1xuZXhwb3J0cy5pc1RTTnVtYmVyS2V5d29yZCA9IGlzVFNOdW1iZXJLZXl3b3JkO1xuZXhwb3J0cy5pc1RTT2JqZWN0S2V5d29yZCA9IGlzVFNPYmplY3RLZXl3b3JkO1xuZXhwb3J0cy5pc1RTU3RyaW5nS2V5d29yZCA9IGlzVFNTdHJpbmdLZXl3b3JkO1xuZXhwb3J0cy5pc1RTU3ltYm9sS2V5d29yZCA9IGlzVFNTeW1ib2xLZXl3b3JkO1xuZXhwb3J0cy5pc1RTVW5kZWZpbmVkS2V5d29yZCA9IGlzVFNVbmRlZmluZWRLZXl3b3JkO1xuZXhwb3J0cy5pc1RTVW5rbm93bktleXdvcmQgPSBpc1RTVW5rbm93bktleXdvcmQ7XG5leHBvcnRzLmlzVFNWb2lkS2V5d29yZCA9IGlzVFNWb2lkS2V5d29yZDtcbmV4cG9ydHMuaXNUU1RoaXNUeXBlID0gaXNUU1RoaXNUeXBlO1xuZXhwb3J0cy5pc1RTRnVuY3Rpb25UeXBlID0gaXNUU0Z1bmN0aW9uVHlwZTtcbmV4cG9ydHMuaXNUU0NvbnN0cnVjdG9yVHlwZSA9IGlzVFNDb25zdHJ1Y3RvclR5cGU7XG5leHBvcnRzLmlzVFNUeXBlUmVmZXJlbmNlID0gaXNUU1R5cGVSZWZlcmVuY2U7XG5leHBvcnRzLmlzVFNUeXBlUHJlZGljYXRlID0gaXNUU1R5cGVQcmVkaWNhdGU7XG5leHBvcnRzLmlzVFNUeXBlUXVlcnkgPSBpc1RTVHlwZVF1ZXJ5O1xuZXhwb3J0cy5pc1RTVHlwZUxpdGVyYWwgPSBpc1RTVHlwZUxpdGVyYWw7XG5leHBvcnRzLmlzVFNBcnJheVR5cGUgPSBpc1RTQXJyYXlUeXBlO1xuZXhwb3J0cy5pc1RTVHVwbGVUeXBlID0gaXNUU1R1cGxlVHlwZTtcbmV4cG9ydHMuaXNUU09wdGlvbmFsVHlwZSA9IGlzVFNPcHRpb25hbFR5cGU7XG5leHBvcnRzLmlzVFNSZXN0VHlwZSA9IGlzVFNSZXN0VHlwZTtcbmV4cG9ydHMuaXNUU05hbWVkVHVwbGVNZW1iZXIgPSBpc1RTTmFtZWRUdXBsZU1lbWJlcjtcbmV4cG9ydHMuaXNUU1VuaW9uVHlwZSA9IGlzVFNVbmlvblR5cGU7XG5leHBvcnRzLmlzVFNJbnRlcnNlY3Rpb25UeXBlID0gaXNUU0ludGVyc2VjdGlvblR5cGU7XG5leHBvcnRzLmlzVFNDb25kaXRpb25hbFR5cGUgPSBpc1RTQ29uZGl0aW9uYWxUeXBlO1xuZXhwb3J0cy5pc1RTSW5mZXJUeXBlID0gaXNUU0luZmVyVHlwZTtcbmV4cG9ydHMuaXNUU1BhcmVudGhlc2l6ZWRUeXBlID0gaXNUU1BhcmVudGhlc2l6ZWRUeXBlO1xuZXhwb3J0cy5pc1RTVHlwZU9wZXJhdG9yID0gaXNUU1R5cGVPcGVyYXRvcjtcbmV4cG9ydHMuaXNUU0luZGV4ZWRBY2Nlc3NUeXBlID0gaXNUU0luZGV4ZWRBY2Nlc3NUeXBlO1xuZXhwb3J0cy5pc1RTTWFwcGVkVHlwZSA9IGlzVFNNYXBwZWRUeXBlO1xuZXhwb3J0cy5pc1RTTGl0ZXJhbFR5cGUgPSBpc1RTTGl0ZXJhbFR5cGU7XG5leHBvcnRzLmlzVFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMgPSBpc1RTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzO1xuZXhwb3J0cy5pc1RTSW50ZXJmYWNlRGVjbGFyYXRpb24gPSBpc1RTSW50ZXJmYWNlRGVjbGFyYXRpb247XG5leHBvcnRzLmlzVFNJbnRlcmZhY2VCb2R5ID0gaXNUU0ludGVyZmFjZUJvZHk7XG5leHBvcnRzLmlzVFNUeXBlQWxpYXNEZWNsYXJhdGlvbiA9IGlzVFNUeXBlQWxpYXNEZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNUU0FzRXhwcmVzc2lvbiA9IGlzVFNBc0V4cHJlc3Npb247XG5leHBvcnRzLmlzVFNUeXBlQXNzZXJ0aW9uID0gaXNUU1R5cGVBc3NlcnRpb247XG5leHBvcnRzLmlzVFNFbnVtRGVjbGFyYXRpb24gPSBpc1RTRW51bURlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc1RTRW51bU1lbWJlciA9IGlzVFNFbnVtTWVtYmVyO1xuZXhwb3J0cy5pc1RTTW9kdWxlRGVjbGFyYXRpb24gPSBpc1RTTW9kdWxlRGVjbGFyYXRpb247XG5leHBvcnRzLmlzVFNNb2R1bGVCbG9jayA9IGlzVFNNb2R1bGVCbG9jaztcbmV4cG9ydHMuaXNUU0ltcG9ydFR5cGUgPSBpc1RTSW1wb3J0VHlwZTtcbmV4cG9ydHMuaXNUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uID0gaXNUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc1RTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2UgPSBpc1RTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2U7XG5leHBvcnRzLmlzVFNOb25OdWxsRXhwcmVzc2lvbiA9IGlzVFNOb25OdWxsRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNUU0V4cG9ydEFzc2lnbm1lbnQgPSBpc1RTRXhwb3J0QXNzaWdubWVudDtcbmV4cG9ydHMuaXNUU05hbWVzcGFjZUV4cG9ydERlY2xhcmF0aW9uID0gaXNUU05hbWVzcGFjZUV4cG9ydERlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc1RTVHlwZUFubm90YXRpb24gPSBpc1RTVHlwZUFubm90YXRpb247XG5leHBvcnRzLmlzVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbiA9IGlzVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbjtcbmV4cG9ydHMuaXNUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IGlzVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb247XG5leHBvcnRzLmlzVFNUeXBlUGFyYW1ldGVyID0gaXNUU1R5cGVQYXJhbWV0ZXI7XG5leHBvcnRzLmlzRXhwcmVzc2lvbiA9IGlzRXhwcmVzc2lvbjtcbmV4cG9ydHMuaXNCaW5hcnkgPSBpc0JpbmFyeTtcbmV4cG9ydHMuaXNTY29wYWJsZSA9IGlzU2NvcGFibGU7XG5leHBvcnRzLmlzQmxvY2tQYXJlbnQgPSBpc0Jsb2NrUGFyZW50O1xuZXhwb3J0cy5pc0Jsb2NrID0gaXNCbG9jaztcbmV4cG9ydHMuaXNTdGF0ZW1lbnQgPSBpc1N0YXRlbWVudDtcbmV4cG9ydHMuaXNUZXJtaW5hdG9ybGVzcyA9IGlzVGVybWluYXRvcmxlc3M7XG5leHBvcnRzLmlzQ29tcGxldGlvblN0YXRlbWVudCA9IGlzQ29tcGxldGlvblN0YXRlbWVudDtcbmV4cG9ydHMuaXNDb25kaXRpb25hbCA9IGlzQ29uZGl0aW9uYWw7XG5leHBvcnRzLmlzTG9vcCA9IGlzTG9vcDtcbmV4cG9ydHMuaXNXaGlsZSA9IGlzV2hpbGU7XG5leHBvcnRzLmlzRXhwcmVzc2lvbldyYXBwZXIgPSBpc0V4cHJlc3Npb25XcmFwcGVyO1xuZXhwb3J0cy5pc0ZvciA9IGlzRm9yO1xuZXhwb3J0cy5pc0ZvclhTdGF0ZW1lbnQgPSBpc0ZvclhTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZXhwb3J0cy5pc0Z1bmN0aW9uUGFyZW50ID0gaXNGdW5jdGlvblBhcmVudDtcbmV4cG9ydHMuaXNQdXJlaXNoID0gaXNQdXJlaXNoO1xuZXhwb3J0cy5pc0RlY2xhcmF0aW9uID0gaXNEZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNQYXR0ZXJuTGlrZSA9IGlzUGF0dGVybkxpa2U7XG5leHBvcnRzLmlzTFZhbCA9IGlzTFZhbDtcbmV4cG9ydHMuaXNUU0VudGl0eU5hbWUgPSBpc1RTRW50aXR5TmFtZTtcbmV4cG9ydHMuaXNMaXRlcmFsID0gaXNMaXRlcmFsO1xuZXhwb3J0cy5pc0ltbXV0YWJsZSA9IGlzSW1tdXRhYmxlO1xuZXhwb3J0cy5pc1VzZXJXaGl0ZXNwYWNhYmxlID0gaXNVc2VyV2hpdGVzcGFjYWJsZTtcbmV4cG9ydHMuaXNNZXRob2QgPSBpc01ldGhvZDtcbmV4cG9ydHMuaXNPYmplY3RNZW1iZXIgPSBpc09iamVjdE1lbWJlcjtcbmV4cG9ydHMuaXNQcm9wZXJ0eSA9IGlzUHJvcGVydHk7XG5leHBvcnRzLmlzVW5hcnlMaWtlID0gaXNVbmFyeUxpa2U7XG5leHBvcnRzLmlzUGF0dGVybiA9IGlzUGF0dGVybjtcbmV4cG9ydHMuaXNDbGFzcyA9IGlzQ2xhc3M7XG5leHBvcnRzLmlzTW9kdWxlRGVjbGFyYXRpb24gPSBpc01vZHVsZURlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc0V4cG9ydERlY2xhcmF0aW9uID0gaXNFeHBvcnREZWNsYXJhdGlvbjtcbmV4cG9ydHMuaXNNb2R1bGVTcGVjaWZpZXIgPSBpc01vZHVsZVNwZWNpZmllcjtcbmV4cG9ydHMuaXNQcml2YXRlID0gaXNQcml2YXRlO1xuZXhwb3J0cy5pc0Zsb3cgPSBpc0Zsb3c7XG5leHBvcnRzLmlzRmxvd1R5cGUgPSBpc0Zsb3dUeXBlO1xuZXhwb3J0cy5pc0Zsb3dCYXNlQW5ub3RhdGlvbiA9IGlzRmxvd0Jhc2VBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc0Zsb3dEZWNsYXJhdGlvbiA9IGlzRmxvd0RlY2xhcmF0aW9uO1xuZXhwb3J0cy5pc0Zsb3dQcmVkaWNhdGUgPSBpc0Zsb3dQcmVkaWNhdGU7XG5leHBvcnRzLmlzRW51bUJvZHkgPSBpc0VudW1Cb2R5O1xuZXhwb3J0cy5pc0VudW1NZW1iZXIgPSBpc0VudW1NZW1iZXI7XG5leHBvcnRzLmlzSlNYID0gaXNKU1g7XG5leHBvcnRzLmlzVFNUeXBlRWxlbWVudCA9IGlzVFNUeXBlRWxlbWVudDtcbmV4cG9ydHMuaXNUU1R5cGUgPSBpc1RTVHlwZTtcbmV4cG9ydHMuaXNUU0Jhc2VUeXBlID0gaXNUU0Jhc2VUeXBlO1xuZXhwb3J0cy5pc051bWJlckxpdGVyYWwgPSBpc051bWJlckxpdGVyYWw7XG5leHBvcnRzLmlzUmVnZXhMaXRlcmFsID0gaXNSZWdleExpdGVyYWw7XG5leHBvcnRzLmlzUmVzdFByb3BlcnR5ID0gaXNSZXN0UHJvcGVydHk7XG5leHBvcnRzLmlzU3ByZWFkUHJvcGVydHkgPSBpc1NwcmVhZFByb3BlcnR5O1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9zaGFsbG93RXF1YWxcIik7XG5cbmZ1bmN0aW9uIGlzQXJyYXlFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJBcnJheUV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQXNzaWdubWVudEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpbmFyeUV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkJpbmFyeUV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZXJwcmV0ZXJEaXJlY3RpdmUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkludGVycHJldGVyRGlyZWN0aXZlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RpcmVjdGl2ZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRGlyZWN0aXZlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RpcmVjdGl2ZUxpdGVyYWwobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRpcmVjdGl2ZUxpdGVyYWxcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQmxvY2tTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkJsb2NrU3RhdGVtZW50XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JyZWFrU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJCcmVha1N0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDYWxsRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQ2FsbEV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQ2F0Y2hDbGF1c2Uobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkNhdGNoQ2xhdXNlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0NvbmRpdGlvbmFsRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0NvbnRpbnVlU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJDb250aW51ZVN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEZWJ1Z2dlclN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRGVidWdnZXJTdGF0ZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRG9XaGlsZVN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRG9XaGlsZVN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eVN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRW1wdHlTdGF0ZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRXhwcmVzc2lvblN0YXRlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNGaWxlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJGaWxlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0ZvckluU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJGb3JJblN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNGb3JTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkZvclN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbkRlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRnVuY3Rpb25FeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0lkZW50aWZpZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIklkZW50aWZpZXJcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSWZTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIklmU3RhdGVtZW50XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0xhYmVsZWRTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkxhYmVsZWRTdGF0ZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiU3RyaW5nTGl0ZXJhbFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNOdW1lcmljTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiTnVtZXJpY0xpdGVyYWxcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbExpdGVyYWwobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk51bGxMaXRlcmFsXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW5MaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJCb29sZWFuTGl0ZXJhbFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHBMaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJSZWdFeHBMaXRlcmFsXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0xvZ2ljYWxFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJMb2dpY2FsRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNNZW1iZXJFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJNZW1iZXJFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc05ld0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk5ld0V4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUHJvZ3JhbShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiUHJvZ3JhbVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJPYmplY3RFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdE1ldGhvZChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiT2JqZWN0TWV0aG9kXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFByb3BlcnR5KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJPYmplY3RQcm9wZXJ0eVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNSZXN0RWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUmV0dXJuU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJSZXR1cm5TdGF0ZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2VxdWVuY2VFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJTZXF1ZW5jZUV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUGFyZW50aGVzaXplZEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1N3aXRjaENhc2Uobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlN3aXRjaENhc2VcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU3dpdGNoU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJTd2l0Y2hTdGF0ZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVGhpc0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRoaXNFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1Rocm93U3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUaHJvd1N0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUcnlTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRyeVN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVbmFyeUV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlVuYXJ5RXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVcGRhdGVFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJVcGRhdGVFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1ZhcmlhYmxlRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVmFyaWFibGVEZWNsYXJhdG9yKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJWYXJpYWJsZURlY2xhcmF0b3JcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2hpbGVTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIldoaWxlU3RhdGVtZW50XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dpdGhTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIldpdGhTdGF0ZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQXNzaWdubWVudFBhdHRlcm4obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5UGF0dGVybihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQXJyYXlQYXR0ZXJuXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Fycm93RnVuY3Rpb25FeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDbGFzc0JvZHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkNsYXNzQm9keVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDbGFzc0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkNsYXNzRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDbGFzc0RlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJDbGFzc0RlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0V4cG9ydEFsbERlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFeHBvcnROYW1lZERlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0V4cG9ydFNwZWNpZmllcihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRXhwb3J0U3BlY2lmaWVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Zvck9mU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJGb3JPZlN0YXRlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbXBvcnREZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiSW1wb3J0RGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSW1wb3J0RGVmYXVsdFNwZWNpZmllcihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbXBvcnRTcGVjaWZpZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkltcG9ydFNwZWNpZmllclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNNZXRhUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk1ldGFQcm9wZXJ0eVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDbGFzc01ldGhvZChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQ2xhc3NNZXRob2RcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0UGF0dGVybihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiT2JqZWN0UGF0dGVyblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTcHJlYWRFbGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJTcHJlYWRFbGVtZW50XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1N1cGVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJTdXBlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUZW1wbGF0ZUVsZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRlbXBsYXRlRWxlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUZW1wbGF0ZUxpdGVyYWwobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRlbXBsYXRlTGl0ZXJhbFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNZaWVsZEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIllpZWxkRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNBd2FpdEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkF3YWl0RXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbXBvcnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkltcG9ydFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNCaWdJbnRMaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJCaWdJbnRMaXRlcmFsXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0V4cG9ydE5hbWVzcGFjZVNwZWNpZmllcihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09wdGlvbmFsTWVtYmVyRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09wdGlvbmFsQ2FsbEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk9wdGlvbmFsQ2FsbEV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQ2xhc3NQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQ2xhc3NQcm9wZXJ0eVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDbGFzc1ByaXZhdGVQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQ2xhc3NQcml2YXRlUHJvcGVydHlcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQ2xhc3NQcml2YXRlTWV0aG9kKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJDbGFzc1ByaXZhdGVNZXRob2RcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUHJpdmF0ZU5hbWUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlByaXZhdGVOYW1lXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0FueVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJBbnlUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJBcnJheVR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW5UeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiQm9vbGVhblR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkJvb2xlYW5MaXRlcmFsVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiTnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDbGFzc0ltcGxlbWVudHMobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkNsYXNzSW1wbGVtZW50c1wiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEZWNsYXJlQ2xhc3Mobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2xhcmVDbGFzc1wiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEZWNsYXJlRnVuY3Rpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2xhcmVGdW5jdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEZWNsYXJlSW50ZXJmYWNlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJEZWNsYXJlSW50ZXJmYWNlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RlY2xhcmVNb2R1bGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2xhcmVNb2R1bGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRGVjbGFyZU1vZHVsZUV4cG9ydHMobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RlY2xhcmVUeXBlQWxpYXMobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2xhcmVUeXBlQWxpYXNcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRGVjbGFyZU9wYXF1ZVR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2xhcmVPcGFxdWVUeXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RlY2xhcmVWYXJpYWJsZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRGVjbGFyZVZhcmlhYmxlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RlY2xhcmVFeHBvcnREZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRGVjbGFyZUV4cG9ydEFsbERlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0RlY2xhcmVkUHJlZGljYXRlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJEZWNsYXJlZFByZWRpY2F0ZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFeGlzdHNUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRXhpc3RzVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb25UeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRnVuY3Rpb25UeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvblR5cGVQYXJhbShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRnVuY3Rpb25UeXBlUGFyYW1cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzR2VuZXJpY1R5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJHZW5lcmljVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSW5mZXJyZWRQcmVkaWNhdGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkluZmVycmVkUHJlZGljYXRlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyZmFjZUV4dGVuZHMobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkludGVyZmFjZUV4dGVuZHNcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZXJmYWNlRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkludGVyZmFjZURlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyZmFjZVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJJbnRlcmZhY2VUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiSW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTWl4ZWRUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiTWl4ZWRUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eVR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFbXB0eVR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc051bGxhYmxlVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk51bGxhYmxlVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJOdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk51bWJlclR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFR5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJPYmplY3RUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RUeXBlSW50ZXJuYWxTbG90KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJPYmplY3RUeXBlSW50ZXJuYWxTbG90XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFR5cGVDYWxsUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk9iamVjdFR5cGVDYWxsUHJvcGVydHlcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0VHlwZUluZGV4ZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk9iamVjdFR5cGVJbmRleGVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFR5cGVQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiT2JqZWN0VHlwZVByb3BlcnR5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiT2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09wYXF1ZVR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk9wYXF1ZVR5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUXVhbGlmaWVkVHlwZUlkZW50aWZpZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlF1YWxpZmllZFR5cGVJZGVudGlmaWVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiU3RyaW5nTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1R5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJTdHJpbmdUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTeW1ib2xUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiU3ltYm9sVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVGhpc1R5cGVBbm5vdGF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUaGlzVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVHVwbGVUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVHVwbGVUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlb2ZUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVHlwZW9mVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZUFsaWFzKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUeXBlQWxpYXNcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVDYXN0RXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVHlwZUNhc3RFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVQYXJhbWV0ZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlR5cGVQYXJhbWV0ZXJcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1VuaW9uVHlwZUFubm90YXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlVuaW9uVHlwZUFubm90YXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVmFyaWFuY2Uobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlZhcmlhbmNlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1ZvaWRUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVm9pZFR5cGVBbm5vdGF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VudW1EZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRW51bURlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VudW1Cb29sZWFuQm9keShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRW51bUJvb2xlYW5Cb2R5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VudW1OdW1iZXJCb2R5KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFbnVtTnVtYmVyQm9keVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbnVtU3RyaW5nQm9keShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRW51bVN0cmluZ0JvZHlcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRW51bVN5bWJvbEJvZHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkVudW1TeW1ib2xCb2R5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VudW1Cb29sZWFuTWVtYmVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFbnVtQm9vbGVhbk1lbWJlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbnVtTnVtYmVyTWVtYmVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFbnVtTnVtYmVyTWVtYmVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VudW1TdHJpbmdNZW1iZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkVudW1TdHJpbmdNZW1iZXJcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRW51bURlZmF1bHRlZE1lbWJlcihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiRW51bURlZmF1bHRlZE1lbWJlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbmRleGVkQWNjZXNzVHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiSW5kZXhlZEFjY2Vzc1R5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzT3B0aW9uYWxJbmRleGVkQWNjZXNzVHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiT3B0aW9uYWxJbmRleGVkQWNjZXNzVHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hBdHRyaWJ1dGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWEF0dHJpYnV0ZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hDbG9zaW5nRWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiSlNYQ2xvc2luZ0VsZW1lbnRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSlNYRWxlbWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiSlNYRWxlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hFbXB0eUV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWEVtcHR5RXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hFeHByZXNzaW9uQ29udGFpbmVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJKU1hFeHByZXNzaW9uQ29udGFpbmVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0pTWFNwcmVhZENoaWxkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJKU1hTcHJlYWRDaGlsZFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hJZGVudGlmaWVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJKU1hJZGVudGlmaWVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0pTWE1lbWJlckV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWE1lbWJlckV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSlNYTmFtZXNwYWNlZE5hbWUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWE5hbWVzcGFjZWROYW1lXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0pTWE9wZW5pbmdFbGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJKU1hPcGVuaW5nRWxlbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hTcHJlYWRBdHRyaWJ1dGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWFNwcmVhZEF0dHJpYnV0ZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hUZXh0KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJKU1hUZXh0XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0pTWEZyYWdtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJKU1hGcmFnbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hPcGVuaW5nRnJhZ21lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWE9wZW5pbmdGcmFnbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1hDbG9zaW5nRnJhZ21lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkpTWENsb3NpbmdGcmFnbWVudFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNOb29wKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJOb29wXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1BsYWNlaG9sZGVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNWOEludHJpbnNpY0lkZW50aWZpZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlY4SW50cmluc2ljSWRlbnRpZmllclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudFBsYWNlaG9sZGVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJBcmd1bWVudFBsYWNlaG9sZGVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpbmRFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJCaW5kRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNJbXBvcnRBdHRyaWJ1dGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkltcG9ydEF0dHJpYnV0ZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEZWNvcmF0b3Iobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY29yYXRvclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEb0V4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRvRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFeHBvcnREZWZhdWx0U3BlY2lmaWVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJFeHBvcnREZWZhdWx0U3BlY2lmaWVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1JlY29yZEV4cHJlc3Npb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlJlY29yZEV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVHVwbGVFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUdXBsZUV4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRGVjaW1hbExpdGVyYWwobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIkRlY2ltYWxMaXRlcmFsXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRpY0Jsb2NrKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJTdGF0aWNCbG9ja1wiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNNb2R1bGVFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJNb2R1bGVFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RvcGljUmVmZXJlbmNlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUb3BpY1JlZmVyZW5jZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNQaXBlbGluZVRvcGljRXhwcmVzc2lvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiUGlwZWxpbmVUb3BpY0V4cHJlc3Npb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUGlwZWxpbmVCYXJlRnVuY3Rpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlBpcGVsaW5lQmFyZUZ1bmN0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1BpcGVsaW5lUHJpbWFyeVRvcGljUmVmZXJlbmNlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJQaXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1BhcmFtZXRlclByb3BlcnR5KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1BhcmFtZXRlclByb3BlcnR5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTRGVjbGFyZUZ1bmN0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0RlY2xhcmVGdW5jdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0RlY2xhcmVNZXRob2Qobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTRGVjbGFyZU1ldGhvZFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1F1YWxpZmllZE5hbWUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTUXVhbGlmaWVkTmFtZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1Byb3BlcnR5U2lnbmF0dXJlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1Byb3BlcnR5U2lnbmF0dXJlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTTWV0aG9kU2lnbmF0dXJlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU01ldGhvZFNpZ25hdHVyZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0luZGV4U2lnbmF0dXJlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0luZGV4U2lnbmF0dXJlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTQW55S2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNBbnlLZXl3b3JkXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTQm9vbGVhbktleXdvcmQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTQm9vbGVhbktleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNCaWdJbnRLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0JpZ0ludEtleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNJbnRyaW5zaWNLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0ludHJpbnNpY0tleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNOZXZlcktleXdvcmQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTTmV2ZXJLZXl3b3JkXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTTnVsbEtleXdvcmQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTTnVsbEtleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNOdW1iZXJLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU051bWJlcktleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNPYmplY3RLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU09iamVjdEtleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNTdHJpbmdLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1N0cmluZ0tleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNTeW1ib2xLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1N5bWJvbEtleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNVbmRlZmluZWRLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1VuZGVmaW5lZEtleXdvcmRcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNVbmtub3duS2V5d29yZChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNVbmtub3duS2V5d29yZFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1ZvaWRLZXl3b3JkKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1ZvaWRLZXl3b3JkXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTVGhpc1R5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVGhpc1R5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNGdW5jdGlvblR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTRnVuY3Rpb25UeXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTQ29uc3RydWN0b3JUeXBlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0NvbnN0cnVjdG9yVHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVSZWZlcmVuY2Uobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVHlwZVJlZmVyZW5jZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVQcmVkaWNhdGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVHlwZVByZWRpY2F0ZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVRdWVyeShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNUeXBlUXVlcnlcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNUeXBlTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNUeXBlTGl0ZXJhbFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0FycmF5VHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNBcnJheVR5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNUdXBsZVR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVHVwbGVUeXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTT3B0aW9uYWxUeXBlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU09wdGlvbmFsVHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1Jlc3RUeXBlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1Jlc3RUeXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTTmFtZWRUdXBsZU1lbWJlcihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNOYW1lZFR1cGxlTWVtYmVyXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTVW5pb25UeXBlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1VuaW9uVHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0ludGVyc2VjdGlvblR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTSW50ZXJzZWN0aW9uVHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0NvbmRpdGlvbmFsVHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNDb25kaXRpb25hbFR5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNJbmZlclR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTSW5mZXJUeXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTUGFyZW50aGVzaXplZFR5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTUGFyZW50aGVzaXplZFR5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNUeXBlT3BlcmF0b3Iobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVHlwZU9wZXJhdG9yXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTSW5kZXhlZEFjY2Vzc1R5cGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTSW5kZXhlZEFjY2Vzc1R5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNNYXBwZWRUeXBlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU01hcHBlZFR5cGVcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNMaXRlcmFsVHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNMaXRlcmFsVHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cyhub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHNcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNJbnRlcmZhY2VEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0ludGVyZmFjZUJvZHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTSW50ZXJmYWNlQm9keVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVBbGlhc0RlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1R5cGVBbGlhc0RlY2xhcmF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTQXNFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0FzRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVBc3NlcnRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVHlwZUFzc2VydGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0VudW1EZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNFbnVtRGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNFbnVtTWVtYmVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU0VudW1NZW1iZXJcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNNb2R1bGVEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNNb2R1bGVEZWNsYXJhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU01vZHVsZUJsb2NrKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU01vZHVsZUJsb2NrXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTSW1wb3J0VHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNJbXBvcnRUeXBlXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZVwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU05vbk51bGxFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU05vbk51bGxFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTRXhwb3J0QXNzaWdubWVudChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNFeHBvcnRBc3NpZ25tZW50XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVFNUeXBlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiVFNUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVQYXJhbWV0ZXIobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlRTVHlwZVBhcmFtZXRlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFeHByZXNzaW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkFycmF5RXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQmluYXJ5RXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkNhbGxFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRnVuY3Rpb25FeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiSWRlbnRpZmllclwiID09PSBub2RlVHlwZSB8fCBcIlN0cmluZ0xpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJOdW1lcmljTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIk51bGxMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiQm9vbGVhbkxpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJSZWdFeHBMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiTG9naWNhbEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJNZW1iZXJFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiTmV3RXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIk9iamVjdEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIlRoaXNFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVW5hcnlFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVXBkYXRlRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiTWV0YVByb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IFwiU3VwZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUZW1wbGF0ZUxpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJZaWVsZEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJBd2FpdEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJbXBvcnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJCaWdJbnRMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiT3B0aW9uYWxDYWxsRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIlR5cGVDYXN0RXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkpTWEVsZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hGcmFnbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkJpbmRFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRG9FeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiUmVjb3JkRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIlR1cGxlRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkRlY2ltYWxMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiTW9kdWxlRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIlRvcGljUmVmZXJlbmNlXCIgPT09IG5vZGVUeXBlIHx8IFwiUGlwZWxpbmVUb3BpY0V4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJQaXBlbGluZUJhcmVGdW5jdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlBpcGVsaW5lUHJpbWFyeVRvcGljUmVmZXJlbmNlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNBc0V4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1R5cGVBc3NlcnRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU05vbk51bGxFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgKFwiRXhwcmVzc2lvblwiID09PSBub2RlLmV4cGVjdGVkTm9kZSB8fCBcIklkZW50aWZpZXJcIiA9PT0gbm9kZS5leHBlY3RlZE5vZGUgfHwgXCJTdHJpbmdMaXRlcmFsXCIgPT09IG5vZGUuZXhwZWN0ZWROb2RlKSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQmluYXJ5KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkJpbmFyeUV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJMb2dpY2FsRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2NvcGFibGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiQmxvY2tTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJDYXRjaENsYXVzZVwiID09PSBub2RlVHlwZSB8fCBcIkRvV2hpbGVTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJGb3JJblN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkZvclN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJQcm9ncmFtXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0TWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiU3dpdGNoU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiV2hpbGVTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkNsYXNzRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkNsYXNzRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGb3JPZlN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkNsYXNzTWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NQcml2YXRlTWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiU3RhdGljQmxvY2tcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU01vZHVsZUJsb2NrXCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgXCJCbG9ja1N0YXRlbWVudFwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQmxvY2tQYXJlbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiQmxvY2tTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJDYXRjaENsYXVzZVwiID09PSBub2RlVHlwZSB8fCBcIkRvV2hpbGVTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJGb3JJblN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkZvclN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJQcm9ncmFtXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0TWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiU3dpdGNoU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiV2hpbGVTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkZvck9mU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NNZXRob2RcIiA9PT0gbm9kZVR5cGUgfHwgXCJDbGFzc1ByaXZhdGVNZXRob2RcIiA9PT0gbm9kZVR5cGUgfHwgXCJTdGF0aWNCbG9ja1wiID09PSBub2RlVHlwZSB8fCBcIlRTTW9kdWxlQmxvY2tcIiA9PT0gbm9kZVR5cGUgfHwgbm9kZVR5cGUgPT09IFwiUGxhY2Vob2xkZXJcIiAmJiBcIkJsb2NrU3RhdGVtZW50XCIgPT09IG5vZGUuZXhwZWN0ZWROb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNCbG9jayhub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJCbG9ja1N0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIlByb2dyYW1cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU01vZHVsZUJsb2NrXCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgXCJCbG9ja1N0YXRlbWVudFwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkJsb2NrU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiQnJlYWtTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJDb250aW51ZVN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkRlYnVnZ2VyU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRG9XaGlsZVN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkVtcHR5U3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkZvckluU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRm9yU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIklmU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiTGFiZWxlZFN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIlJldHVyblN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIlN3aXRjaFN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIlRocm93U3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiVHJ5U3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIldoaWxlU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiV2l0aFN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkNsYXNzRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGb3JPZlN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkltcG9ydERlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZUNsYXNzXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZUZ1bmN0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZUludGVyZmFjZVwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVNb2R1bGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlTW9kdWxlRXhwb3J0c1wiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVUeXBlQWxpYXNcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlT3BhcXVlVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVWYXJpYWJsZVwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVFeHBvcnREZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkludGVyZmFjZURlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiT3BhcXVlVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlR5cGVBbGlhc1wiID09PSBub2RlVHlwZSB8fCBcIkVudW1EZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRTRGVjbGFyZUZ1bmN0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRTVHlwZUFsaWFzRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0VudW1EZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRTTW9kdWxlRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNFeHBvcnRBc3NpZ25tZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiVFNOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIChcIlN0YXRlbWVudFwiID09PSBub2RlLmV4cGVjdGVkTm9kZSB8fCBcIkRlY2xhcmF0aW9uXCIgPT09IG5vZGUuZXhwZWN0ZWROb2RlIHx8IFwiQmxvY2tTdGF0ZW1lbnRcIiA9PT0gbm9kZS5leHBlY3RlZE5vZGUpKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUZXJtaW5hdG9ybGVzcyhub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJCcmVha1N0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkNvbnRpbnVlU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiUmV0dXJuU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiVGhyb3dTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJZaWVsZEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJBd2FpdEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0NvbXBsZXRpb25TdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiQnJlYWtTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJDb250aW51ZVN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIlJldHVyblN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIlRocm93U3RhdGVtZW50XCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNDb25kaXRpb25hbChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJZlN0YXRlbWVudFwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTG9vcChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJEb1doaWxlU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRm9ySW5TdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJGb3JTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJXaGlsZVN0YXRlbWVudFwiID09PSBub2RlVHlwZSB8fCBcIkZvck9mU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXaGlsZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJEb1doaWxlU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiV2hpbGVTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0V4cHJlc3Npb25XcmFwcGVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIlR5cGVDYXN0RXhwcmVzc2lvblwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRm9yKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkZvckluU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRm9yU3RhdGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiRm9yT2ZTdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0ZvclhTdGF0ZW1lbnQobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiRm9ySW5TdGF0ZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJGb3JPZlN0YXRlbWVudFwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIk9iamVjdE1ldGhvZFwiID09PSBub2RlVHlwZSB8fCBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NNZXRob2RcIiA9PT0gbm9kZVR5cGUgfHwgXCJDbGFzc1ByaXZhdGVNZXRob2RcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uUGFyZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJPYmplY3RNZXRob2RcIiA9PT0gbm9kZVR5cGUgfHwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiID09PSBub2RlVHlwZSB8fCBcIkNsYXNzTWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NQcml2YXRlTWV0aG9kXCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNQdXJlaXNoKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJTdHJpbmdMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiTnVtZXJpY0xpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJOdWxsTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIkJvb2xlYW5MaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiUmVnRXhwTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQmlnSW50TGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIkRlY2ltYWxMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgXCJTdHJpbmdMaXRlcmFsXCIgPT09IG5vZGUuZXhwZWN0ZWROb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNEZWNsYXJhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkNsYXNzRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJbXBvcnREZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVDbGFzc1wiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVGdW5jdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVJbnRlcmZhY2VcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlTW9kdWxlXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZU1vZHVsZUV4cG9ydHNcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlVHlwZUFsaWFzXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZU9wYXF1ZVR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlVmFyaWFibGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJbnRlcmZhY2VEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk9wYXF1ZVR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUeXBlQWxpYXNcIiA9PT0gbm9kZVR5cGUgfHwgXCJFbnVtRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0RlY2xhcmVGdW5jdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRTSW50ZXJmYWNlRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1R5cGVBbGlhc0RlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNFbnVtRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU01vZHVsZURlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgXCJEZWNsYXJhdGlvblwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUGF0dGVybkxpa2Uobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiSWRlbnRpZmllclwiID09PSBub2RlVHlwZSB8fCBcIlJlc3RFbGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiQXNzaWdubWVudFBhdHRlcm5cIiA9PT0gbm9kZVR5cGUgfHwgXCJBcnJheVBhdHRlcm5cIiA9PT0gbm9kZVR5cGUgfHwgXCJPYmplY3RQYXR0ZXJuXCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgKFwiUGF0dGVyblwiID09PSBub2RlLmV4cGVjdGVkTm9kZSB8fCBcIklkZW50aWZpZXJcIiA9PT0gbm9kZS5leHBlY3RlZE5vZGUpKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNMVmFsKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIklkZW50aWZpZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJNZW1iZXJFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiUmVzdEVsZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJBc3NpZ25tZW50UGF0dGVyblwiID09PSBub2RlVHlwZSB8fCBcIkFycmF5UGF0dGVyblwiID09PSBub2RlVHlwZSB8fCBcIk9iamVjdFBhdHRlcm5cIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1BhcmFtZXRlclByb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBcIlBsYWNlaG9sZGVyXCIgJiYgKFwiUGF0dGVyblwiID09PSBub2RlLmV4cGVjdGVkTm9kZSB8fCBcIklkZW50aWZpZXJcIiA9PT0gbm9kZS5leHBlY3RlZE5vZGUpKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0VudGl0eU5hbWUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiSWRlbnRpZmllclwiID09PSBub2RlVHlwZSB8fCBcIlRTUXVhbGlmaWVkTmFtZVwiID09PSBub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIFwiSWRlbnRpZmllclwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTGl0ZXJhbChub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJTdHJpbmdMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiTnVtZXJpY0xpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJOdWxsTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIkJvb2xlYW5MaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiUmVnRXhwTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIlRlbXBsYXRlTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIkJpZ0ludExpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNpbWFsTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIFwiU3RyaW5nTGl0ZXJhbFwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSW1tdXRhYmxlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIlN0cmluZ0xpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJOdW1lcmljTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIk51bGxMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiQm9vbGVhbkxpdGVyYWxcIiA9PT0gbm9kZVR5cGUgfHwgXCJCaWdJbnRMaXRlcmFsXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYQXR0cmlidXRlXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYQ2xvc2luZ0VsZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hFbGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiID09PSBub2RlVHlwZSB8fCBcIkpTWFNwcmVhZENoaWxkXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYT3BlbmluZ0VsZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hUZXh0XCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYRnJhZ21lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hPcGVuaW5nRnJhZ21lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hDbG9zaW5nRnJhZ21lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNpbWFsTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIFwiU3RyaW5nTGl0ZXJhbFwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXNlcldoaXRlc3BhY2FibGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiT2JqZWN0TWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0UHJvcGVydHlcIiA9PT0gbm9kZVR5cGUgfHwgXCJPYmplY3RUeXBlSW50ZXJuYWxTbG90XCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZUNhbGxQcm9wZXJ0eVwiID09PSBub2RlVHlwZSB8fCBcIk9iamVjdFR5cGVJbmRleGVyXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZVByb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5XCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNNZXRob2Qobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiT2JqZWN0TWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NNZXRob2RcIiA9PT0gbm9kZVR5cGUgfHwgXCJDbGFzc1ByaXZhdGVNZXRob2RcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdE1lbWJlcihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJPYmplY3RNZXRob2RcIiA9PT0gbm9kZVR5cGUgfHwgXCJPYmplY3RQcm9wZXJ0eVwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUHJvcGVydHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiT2JqZWN0UHJvcGVydHlcIiA9PT0gbm9kZVR5cGUgfHwgXCJDbGFzc1Byb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NQcml2YXRlUHJvcGVydHlcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1VuYXJ5TGlrZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJVbmFyeUV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJTcHJlYWRFbGVtZW50XCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNQYXR0ZXJuKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkFzc2lnbm1lbnRQYXR0ZXJuXCIgPT09IG5vZGVUeXBlIHx8IFwiQXJyYXlQYXR0ZXJuXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0UGF0dGVyblwiID09PSBub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIFwiUGF0dGVyblwiID09PSBub2RlLmV4cGVjdGVkTm9kZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQ2xhc3Mobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiQ2xhc3NFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTW9kdWxlRGVjbGFyYXRpb24obm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiRXhwb3J0QWxsRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiSW1wb3J0RGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0V4cG9ydERlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRXhwb3J0TmFtZWREZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTW9kdWxlU3BlY2lmaWVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkV4cG9ydFNwZWNpZmllclwiID09PSBub2RlVHlwZSB8fCBcIkltcG9ydERlZmF1bHRTcGVjaWZpZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJJbXBvcnRTcGVjaWZpZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJFeHBvcnREZWZhdWx0U3BlY2lmaWVyXCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNQcml2YXRlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkNsYXNzUHJpdmF0ZVByb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IFwiQ2xhc3NQcml2YXRlTWV0aG9kXCIgPT09IG5vZGVUeXBlIHx8IFwiUHJpdmF0ZU5hbWVcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Zsb3cobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiQW55VHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJBcnJheVR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQm9vbGVhblR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiQm9vbGVhbkxpdGVyYWxUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk51bGxMaXRlcmFsVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJDbGFzc0ltcGxlbWVudHNcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlQ2xhc3NcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlRnVuY3Rpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlSW50ZXJmYWNlXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZU1vZHVsZVwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZVR5cGVBbGlhc1wiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVPcGFxdWVUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZVZhcmlhYmxlXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZUV4cG9ydEFsbERlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZWRQcmVkaWNhdGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJFeGlzdHNUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkZ1bmN0aW9uVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJGdW5jdGlvblR5cGVQYXJhbVwiID09PSBub2RlVHlwZSB8fCBcIkdlbmVyaWNUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkluZmVycmVkUHJlZGljYXRlXCIgPT09IG5vZGVUeXBlIHx8IFwiSW50ZXJmYWNlRXh0ZW5kc1wiID09PSBub2RlVHlwZSB8fCBcIkludGVyZmFjZURlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiSW50ZXJmYWNlVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk1peGVkVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJFbXB0eVR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiTnVsbGFibGVUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk51bWJlckxpdGVyYWxUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk51bWJlclR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJPYmplY3RUeXBlSW50ZXJuYWxTbG90XCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZUNhbGxQcm9wZXJ0eVwiID09PSBub2RlVHlwZSB8fCBcIk9iamVjdFR5cGVJbmRleGVyXCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZVByb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IFwiT2JqZWN0VHlwZVNwcmVhZFByb3BlcnR5XCIgPT09IG5vZGVUeXBlIHx8IFwiT3BhcXVlVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlF1YWxpZmllZFR5cGVJZGVudGlmaWVyXCIgPT09IG5vZGVUeXBlIHx8IFwiU3RyaW5nTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiU3RyaW5nVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJTeW1ib2xUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRoaXNUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlR1cGxlVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUeXBlb2ZUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlR5cGVBbGlhc1wiID09PSBub2RlVHlwZSB8fCBcIlR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVHlwZUNhc3RFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVHlwZVBhcmFtZXRlclwiID09PSBub2RlVHlwZSB8fCBcIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVW5pb25UeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlZhcmlhbmNlXCIgPT09IG5vZGVUeXBlIHx8IFwiVm9pZFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiSW5kZXhlZEFjY2Vzc1R5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJPcHRpb25hbEluZGV4ZWRBY2Nlc3NUeXBlXCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNGbG93VHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJBbnlUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkFycmF5VHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJCb29sZWFuVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJCb29sZWFuTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiTnVsbExpdGVyYWxUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkV4aXN0c1R5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRnVuY3Rpb25UeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkdlbmVyaWNUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkludGVyZmFjZVR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiSW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJNaXhlZFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRW1wdHlUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk51bGxhYmxlVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJOdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJOdW1iZXJUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk9iamVjdFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiU3RyaW5nTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiU3RyaW5nVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJTeW1ib2xUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRoaXNUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlR1cGxlVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJUeXBlb2ZUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlVuaW9uVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJWb2lkVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJbmRleGVkQWNjZXNzVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIk9wdGlvbmFsSW5kZXhlZEFjY2Vzc1R5cGVcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Zsb3dCYXNlQW5ub3RhdGlvbihub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJBbnlUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkJvb2xlYW5UeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk51bGxMaXRlcmFsVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJNaXhlZFR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiRW1wdHlUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk51bWJlclR5cGVBbm5vdGF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiU3RyaW5nVHlwZUFubm90YXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJTeW1ib2xUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRoaXNUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlZvaWRUeXBlQW5ub3RhdGlvblwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRmxvd0RlY2xhcmF0aW9uKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkRlY2xhcmVDbGFzc1wiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVGdW5jdGlvblwiID09PSBub2RlVHlwZSB8fCBcIkRlY2xhcmVJbnRlcmZhY2VcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlTW9kdWxlXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZU1vZHVsZUV4cG9ydHNcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlVHlwZUFsaWFzXCIgPT09IG5vZGVUeXBlIHx8IFwiRGVjbGFyZU9wYXF1ZVR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlVmFyaWFibGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJEZWNsYXJlRXhwb3J0QWxsRGVjbGFyYXRpb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJJbnRlcmZhY2VEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIk9wYXF1ZVR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUeXBlQWxpYXNcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0Zsb3dQcmVkaWNhdGUobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiRGVjbGFyZWRQcmVkaWNhdGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJJbmZlcnJlZFByZWRpY2F0ZVwiID09PSBub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRW51bUJvZHkobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiRW51bUJvb2xlYW5Cb2R5XCIgPT09IG5vZGVUeXBlIHx8IFwiRW51bU51bWJlckJvZHlcIiA9PT0gbm9kZVR5cGUgfHwgXCJFbnVtU3RyaW5nQm9keVwiID09PSBub2RlVHlwZSB8fCBcIkVudW1TeW1ib2xCb2R5XCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbnVtTWVtYmVyKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIkVudW1Cb29sZWFuTWVtYmVyXCIgPT09IG5vZGVUeXBlIHx8IFwiRW51bU51bWJlck1lbWJlclwiID09PSBub2RlVHlwZSB8fCBcIkVudW1TdHJpbmdNZW1iZXJcIiA9PT0gbm9kZVR5cGUgfHwgXCJFbnVtRGVmYXVsdGVkTWVtYmVyXCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNKU1gobm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKFwiSlNYQXR0cmlidXRlXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYQ2xvc2luZ0VsZW1lbnRcIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hFbGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYRW1wdHlFeHByZXNzaW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiID09PSBub2RlVHlwZSB8fCBcIkpTWFNwcmVhZENoaWxkXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYSWRlbnRpZmllclwiID09PSBub2RlVHlwZSB8fCBcIkpTWE1lbWJlckV4cHJlc3Npb25cIiA9PT0gbm9kZVR5cGUgfHwgXCJKU1hOYW1lc3BhY2VkTmFtZVwiID09PSBub2RlVHlwZSB8fCBcIkpTWE9wZW5pbmdFbGVtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYU3ByZWFkQXR0cmlidXRlXCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYVGV4dFwiID09PSBub2RlVHlwZSB8fCBcIkpTWEZyYWdtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYT3BlbmluZ0ZyYWdtZW50XCIgPT09IG5vZGVUeXBlIHx8IFwiSlNYQ2xvc2luZ0ZyYWdtZW50XCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU1R5cGVFbGVtZW50KG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIlRTQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvblwiID09PSBub2RlVHlwZSB8fCBcIlRTUHJvcGVydHlTaWduYXR1cmVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU01ldGhvZFNpZ25hdHVyZVwiID09PSBub2RlVHlwZSB8fCBcIlRTSW5kZXhTaWduYXR1cmVcIiA9PT0gbm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RTVHlwZShub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAoXCJUU0FueUtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0Jvb2xlYW5LZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNCaWdJbnRLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNJbnRyaW5zaWNLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNOZXZlcktleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU051bGxLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNOdW1iZXJLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNPYmplY3RLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNTdHJpbmdLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNTeW1ib2xLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNVbmRlZmluZWRLZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNVbmtub3duS2V5d29yZFwiID09PSBub2RlVHlwZSB8fCBcIlRTVm9pZEtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1RoaXNUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNGdW5jdGlvblR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0NvbnN0cnVjdG9yVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlRTVHlwZVJlZmVyZW5jZVwiID09PSBub2RlVHlwZSB8fCBcIlRTVHlwZVByZWRpY2F0ZVwiID09PSBub2RlVHlwZSB8fCBcIlRTVHlwZVF1ZXJ5XCIgPT09IG5vZGVUeXBlIHx8IFwiVFNUeXBlTGl0ZXJhbFwiID09PSBub2RlVHlwZSB8fCBcIlRTQXJyYXlUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNUdXBsZVR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU09wdGlvbmFsVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlRTUmVzdFR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1VuaW9uVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlRTSW50ZXJzZWN0aW9uVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlRTQ29uZGl0aW9uYWxUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNJbmZlclR5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1BhcmVudGhlc2l6ZWRUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNUeXBlT3BlcmF0b3JcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0luZGV4ZWRBY2Nlc3NUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNNYXBwZWRUeXBlXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNMaXRlcmFsVHlwZVwiID09PSBub2RlVHlwZSB8fCBcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNJbXBvcnRUeXBlXCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUU0Jhc2VUeXBlKG5vZGUsIG9wdHMpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChcIlRTQW55S2V5d29yZFwiID09PSBub2RlVHlwZSB8fCBcIlRTQm9vbGVhbktleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0JpZ0ludEtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0ludHJpbnNpY0tleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU05ldmVyS2V5d29yZFwiID09PSBub2RlVHlwZSB8fCBcIlRTTnVsbEtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU051bWJlcktleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU09iamVjdEtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1N0cmluZ0tleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1N5bWJvbEtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1VuZGVmaW5lZEtleXdvcmRcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU1Vua25vd25LZXl3b3JkXCIgPT09IG5vZGVUeXBlIHx8IFwiVFNWb2lkS2V5d29yZFwiID09PSBub2RlVHlwZSB8fCBcIlRTVGhpc1R5cGVcIiA9PT0gbm9kZVR5cGUgfHwgXCJUU0xpdGVyYWxUeXBlXCIgPT09IG5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKG5vZGUsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJMaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgY29uc29sZS50cmFjZShcIlRoZSBub2RlIHR5cGUgTnVtYmVyTGl0ZXJhbCBoYXMgYmVlbiByZW5hbWVkIHRvIE51bWVyaWNMaXRlcmFsXCIpO1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIk51bWJlckxpdGVyYWxcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUmVnZXhMaXRlcmFsKG5vZGUsIG9wdHMpIHtcbiAgY29uc29sZS50cmFjZShcIlRoZSBub2RlIHR5cGUgUmVnZXhMaXRlcmFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gUmVnRXhwTGl0ZXJhbFwiKTtcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gIGlmIChub2RlVHlwZSA9PT0gXCJSZWdleExpdGVyYWxcIikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUmVzdFByb3BlcnR5KG5vZGUsIG9wdHMpIHtcbiAgY29uc29sZS50cmFjZShcIlRoZSBub2RlIHR5cGUgUmVzdFByb3BlcnR5IGhhcyBiZWVuIHJlbmFtZWQgdG8gUmVzdEVsZW1lbnRcIik7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBub2RlVHlwZSA9IG5vZGUudHlwZTtcblxuICBpZiAobm9kZVR5cGUgPT09IFwiUmVzdFByb3BlcnR5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1NwcmVhZFByb3BlcnR5KG5vZGUsIG9wdHMpIHtcbiAgY29uc29sZS50cmFjZShcIlRoZSBub2RlIHR5cGUgU3ByZWFkUHJvcGVydHkgaGFzIGJlZW4gcmVuYW1lZCB0byBTcHJlYWRFbGVtZW50XCIpO1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG5cbiAgaWYgKG5vZGVUeXBlID09PSBcIlNwcmVhZFByb3BlcnR5XCIpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKDAsIF9zaGFsbG93RXF1YWwuZGVmYXVsdCkobm9kZSwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXM7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZShcIi4uL3V0aWxzL3NoYWxsb3dFcXVhbFwiKTtcblxudmFyIF9pc1R5cGUgPSByZXF1aXJlKFwiLi9pc1R5cGVcIik7XG5cbnZhciBfaXNQbGFjZWhvbGRlclR5cGUgPSByZXF1aXJlKFwiLi9pc1BsYWNlaG9sZGVyVHlwZVwiKTtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxuZnVuY3Rpb24gaXModHlwZSwgbm9kZSwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgbWF0Y2hlcyA9ICgwLCBfaXNUeXBlLmRlZmF1bHQpKG5vZGUudHlwZSwgdHlwZSk7XG5cbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgaWYgKCFvcHRzICYmIG5vZGUudHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIHR5cGUgaW4gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZUykge1xuICAgICAgcmV0dXJuICgwLCBfaXNQbGFjZWhvbGRlclR5cGUuZGVmYXVsdCkobm9kZS5leHBlY3RlZE5vZGUsIHR5cGUpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCaW5kaW5nO1xuXG52YXIgX2dldEJpbmRpbmdJZGVudGlmaWVycyA9IHJlcXVpcmUoXCIuLi9yZXRyaWV2ZXJzL2dldEJpbmRpbmdJZGVudGlmaWVyc1wiKTtcblxuZnVuY3Rpb24gaXNCaW5kaW5nKG5vZGUsIHBhcmVudCwgZ3JhbmRwYXJlbnQpIHtcbiAgaWYgKGdyYW5kcGFyZW50ICYmIG5vZGUudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgcGFyZW50LnR5cGUgPT09IFwiT2JqZWN0UHJvcGVydHlcIiAmJiBncmFuZHBhcmVudC50eXBlID09PSBcIk9iamVjdEV4cHJlc3Npb25cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBfZ2V0QmluZGluZ0lkZW50aWZpZXJzLmRlZmF1bHQua2V5c1twYXJlbnQudHlwZV07XG5cbiAgaWYgKGtleXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBjb25zdCB2YWwgPSBwYXJlbnRba2V5XTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICBpZiAodmFsLmluZGV4T2Yobm9kZSkgPj0gMCkgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsID09PSBub2RlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Jsb2NrU2NvcGVkO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKTtcblxudmFyIF9pc0xldCA9IHJlcXVpcmUoXCIuL2lzTGV0XCIpO1xuXG5mdW5jdGlvbiBpc0Jsb2NrU2NvcGVkKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLmlzRnVuY3Rpb25EZWNsYXJhdGlvbikobm9kZSkgfHwgKDAsIF9nZW5lcmF0ZWQuaXNDbGFzc0RlY2xhcmF0aW9uKShub2RlKSB8fCAoMCwgX2lzTGV0LmRlZmF1bHQpKG5vZGUpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJbW11dGFibGU7XG5cbnZhciBfaXNUeXBlID0gcmVxdWlyZShcIi4vaXNUeXBlXCIpO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKTtcblxuZnVuY3Rpb24gaXNJbW11dGFibGUobm9kZSkge1xuICBpZiAoKDAsIF9pc1R5cGUuZGVmYXVsdCkobm9kZS50eXBlLCBcIkltbXV0YWJsZVwiKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzSWRlbnRpZmllcikobm9kZSkpIHtcbiAgICBpZiAobm9kZS5uYW1lID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTGV0O1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBpc0xldChub2RlKSB7XG4gIHJldHVybiAoMCwgX2dlbmVyYXRlZC5pc1ZhcmlhYmxlRGVjbGFyYXRpb24pKG5vZGUpICYmIChub2RlLmtpbmQgIT09IFwidmFyXCIgfHwgbm9kZVtfY29uc3RhbnRzLkJMT0NLX1NDT1BFRF9TWU1CT0xdKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTm9kZTtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiYgX2RlZmluaXRpb25zLlZJU0lUT1JfS0VZU1tub2RlLnR5cGVdKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTm9kZXNFcXVpdmFsZW50O1xuXG52YXIgX2RlZmluaXRpb25zID0gcmVxdWlyZShcIi4uL2RlZmluaXRpb25zXCIpO1xuXG5mdW5jdGlvbiBpc05vZGVzRXF1aXZhbGVudChhLCBiKSB7XG4gIGlmICh0eXBlb2YgYSAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIiB8fCBhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICBpZiAoYS50eXBlICE9PSBiLnR5cGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyhfZGVmaW5pdGlvbnMuTk9ERV9GSUVMRFNbYS50eXBlXSB8fCBhLnR5cGUpO1xuICBjb25zdCB2aXNpdG9yS2V5cyA9IF9kZWZpbml0aW9ucy5WSVNJVE9SX0tFWVNbYS50eXBlXTtcblxuICBmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuICAgIGlmICh0eXBlb2YgYVtmaWVsZF0gIT09IHR5cGVvZiBiW2ZpZWxkXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhW2ZpZWxkXSA9PSBudWxsICYmIGJbZmllbGRdID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoYVtmaWVsZF0gPT0gbnVsbCB8fCBiW2ZpZWxkXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYVtmaWVsZF0pKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYltmaWVsZF0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFbZmllbGRdLmxlbmd0aCAhPT0gYltmaWVsZF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhW2ZpZWxkXS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWlzTm9kZXNFcXVpdmFsZW50KGFbZmllbGRdW2ldLCBiW2ZpZWxkXVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhW2ZpZWxkXSA9PT0gXCJvYmplY3RcIiAmJiAhKHZpc2l0b3JLZXlzICE9IG51bGwgJiYgdmlzaXRvcktleXMuaW5jbHVkZXMoZmllbGQpKSkge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoYVtmaWVsZF0pKSB7XG4gICAgICAgIGlmIChhW2ZpZWxkXVtrZXldICE9PSBiW2ZpZWxkXVtrZXldKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghaXNOb2Rlc0VxdWl2YWxlbnQoYVtmaWVsZF0sIGJbZmllbGRdKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQbGFjZWhvbGRlclR5cGU7XG5cbnZhciBfZGVmaW5pdGlvbnMgPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnNcIik7XG5cbmZ1bmN0aW9uIGlzUGxhY2Vob2xkZXJUeXBlKHBsYWNlaG9sZGVyVHlwZSwgdGFyZ2V0VHlwZSkge1xuICBpZiAocGxhY2Vob2xkZXJUeXBlID09PSB0YXJnZXRUeXBlKSByZXR1cm4gdHJ1ZTtcbiAgY29uc3QgYWxpYXNlcyA9IF9kZWZpbml0aW9ucy5QTEFDRUhPTERFUlNfQUxJQVNbcGxhY2Vob2xkZXJUeXBlXTtcblxuICBpZiAoYWxpYXNlcykge1xuICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgaWYgKHRhcmdldFR5cGUgPT09IGFsaWFzKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JlZmVyZW5jZWQ7XG5cbmZ1bmN0aW9uIGlzUmVmZXJlbmNlZChub2RlLCBwYXJlbnQsIGdyYW5kcGFyZW50KSB7XG4gIHN3aXRjaCAocGFyZW50LnR5cGUpIHtcbiAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgIGNhc2UgXCJKU1hNZW1iZXJFeHByZXNzaW9uXCI6XG4gICAgY2FzZSBcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgaWYgKHBhcmVudC5wcm9wZXJ0eSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gISFwYXJlbnQuY29tcHV0ZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQub2JqZWN0ID09PSBub2RlO1xuXG4gICAgY2FzZSBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOlxuICAgICAgcmV0dXJuIHBhcmVudC5pbml0ID09PSBub2RlO1xuXG4gICAgY2FzZSBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCI6XG4gICAgICByZXR1cm4gcGFyZW50LmJvZHkgPT09IG5vZGU7XG5cbiAgICBjYXNlIFwiUHJpdmF0ZU5hbWVcIjpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgXCJDbGFzc01ldGhvZFwiOlxuICAgIGNhc2UgXCJDbGFzc1ByaXZhdGVNZXRob2RcIjpcbiAgICBjYXNlIFwiT2JqZWN0TWV0aG9kXCI6XG4gICAgICBpZiAocGFyZW50LnBhcmFtcy5pbmNsdWRlcyhub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICBjYXNlIFwiT2JqZWN0UHJvcGVydHlcIjpcbiAgICBjYXNlIFwiQ2xhc3NQcm9wZXJ0eVwiOlxuICAgIGNhc2UgXCJDbGFzc1ByaXZhdGVQcm9wZXJ0eVwiOlxuICAgICAgaWYgKHBhcmVudC5rZXkgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICEhcGFyZW50LmNvbXB1dGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50LnZhbHVlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiAhZ3JhbmRwYXJlbnQgfHwgZ3JhbmRwYXJlbnQudHlwZSAhPT0gXCJPYmplY3RQYXR0ZXJuXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBcIkNsYXNzRGVjbGFyYXRpb25cIjpcbiAgICBjYXNlIFwiQ2xhc3NFeHByZXNzaW9uXCI6XG4gICAgICByZXR1cm4gcGFyZW50LnN1cGVyQ2xhc3MgPT09IG5vZGU7XG5cbiAgICBjYXNlIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIjpcbiAgICAgIHJldHVybiBwYXJlbnQucmlnaHQgPT09IG5vZGU7XG5cbiAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgIHJldHVybiBwYXJlbnQucmlnaHQgPT09IG5vZGU7XG5cbiAgICBjYXNlIFwiTGFiZWxlZFN0YXRlbWVudFwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBcIkNhdGNoQ2xhdXNlXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIFwiUmVzdEVsZW1lbnRcIjpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgXCJCcmVha1N0YXRlbWVudFwiOlxuICAgIGNhc2UgXCJDb250aW51ZVN0YXRlbWVudFwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIjpcbiAgICBjYXNlIFwiRnVuY3Rpb25FeHByZXNzaW9uXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIFwiRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCI6XG4gICAgY2FzZSBcIkV4cG9ydERlZmF1bHRTcGVjaWZpZXJcIjpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgXCJFeHBvcnRTcGVjaWZpZXJcIjpcbiAgICAgIGlmIChncmFuZHBhcmVudCAhPSBudWxsICYmIGdyYW5kcGFyZW50LnNvdXJjZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQubG9jYWwgPT09IG5vZGU7XG5cbiAgICBjYXNlIFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiOlxuICAgIGNhc2UgXCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIjpcbiAgICBjYXNlIFwiSW1wb3J0U3BlY2lmaWVyXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIFwiSlNYQXR0cmlidXRlXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIFwiT2JqZWN0UGF0dGVyblwiOlxuICAgIGNhc2UgXCJBcnJheVBhdHRlcm5cIjpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgXCJNZXRhUHJvcGVydHlcIjpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgXCJPYmplY3RUeXBlUHJvcGVydHlcIjpcbiAgICAgIHJldHVybiBwYXJlbnQua2V5ICE9PSBub2RlO1xuXG4gICAgY2FzZSBcIlRTRW51bU1lbWJlclwiOlxuICAgICAgcmV0dXJuIHBhcmVudC5pZCAhPT0gbm9kZTtcblxuICAgIGNhc2UgXCJUU1Byb3BlcnR5U2lnbmF0dXJlXCI6XG4gICAgICBpZiAocGFyZW50LmtleSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gISFwYXJlbnQuY29tcHV0ZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1Njb3BlO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKTtcblxuZnVuY3Rpb24gaXNTY29wZShub2RlLCBwYXJlbnQpIHtcbiAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzQmxvY2tTdGF0ZW1lbnQpKG5vZGUpICYmICgoMCwgX2dlbmVyYXRlZC5pc0Z1bmN0aW9uKShwYXJlbnQpIHx8ICgwLCBfZ2VuZXJhdGVkLmlzQ2F0Y2hDbGF1c2UpKHBhcmVudCkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzUGF0dGVybikobm9kZSkgJiYgKCgwLCBfZ2VuZXJhdGVkLmlzRnVuY3Rpb24pKHBhcmVudCkgfHwgKDAsIF9nZW5lcmF0ZWQuaXNDYXRjaENsYXVzZSkocGFyZW50KSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2dlbmVyYXRlZC5pc1Njb3BhYmxlKShub2RlKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzU3BlY2lmaWVyRGVmYXVsdDtcblxudmFyIF9nZW5lcmF0ZWQgPSByZXF1aXJlKFwiLi9nZW5lcmF0ZWRcIik7XG5cbmZ1bmN0aW9uIGlzU3BlY2lmaWVyRGVmYXVsdChzcGVjaWZpZXIpIHtcbiAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLmlzSW1wb3J0RGVmYXVsdFNwZWNpZmllcikoc3BlY2lmaWVyKSB8fCAoMCwgX2dlbmVyYXRlZC5pc0lkZW50aWZpZXIpKHNwZWNpZmllci5pbXBvcnRlZCB8fCBzcGVjaWZpZXIuZXhwb3J0ZWQsIHtcbiAgICBuYW1lOiBcImRlZmF1bHRcIlxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVHlwZTtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxuZnVuY3Rpb24gaXNUeXBlKG5vZGVUeXBlLCB0YXJnZXRUeXBlKSB7XG4gIGlmIChub2RlVHlwZSA9PT0gdGFyZ2V0VHlwZSkgcmV0dXJuIHRydWU7XG4gIGlmIChfZGVmaW5pdGlvbnMuQUxJQVNfS0VZU1t0YXJnZXRUeXBlXSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBhbGlhc2VzID0gX2RlZmluaXRpb25zLkZMSVBQRURfQUxJQVNfS0VZU1t0YXJnZXRUeXBlXTtcblxuICBpZiAoYWxpYXNlcykge1xuICAgIGlmIChhbGlhc2VzWzBdID09PSBub2RlVHlwZSkgcmV0dXJuIHRydWU7XG5cbiAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgIGlmIChub2RlVHlwZSA9PT0gYWxpYXMpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVmFsaWRFUzNJZGVudGlmaWVyO1xuXG52YXIgX2lzVmFsaWRJZGVudGlmaWVyID0gcmVxdWlyZShcIi4vaXNWYWxpZElkZW50aWZpZXJcIik7XG5cbmNvbnN0IFJFU0VSVkVEX1dPUkRTX0VTM19PTkxZID0gbmV3IFNldChbXCJhYnN0cmFjdFwiLCBcImJvb2xlYW5cIiwgXCJieXRlXCIsIFwiY2hhclwiLCBcImRvdWJsZVwiLCBcImVudW1cIiwgXCJmaW5hbFwiLCBcImZsb2F0XCIsIFwiZ290b1wiLCBcImltcGxlbWVudHNcIiwgXCJpbnRcIiwgXCJpbnRlcmZhY2VcIiwgXCJsb25nXCIsIFwibmF0aXZlXCIsIFwicGFja2FnZVwiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiwgXCJwdWJsaWNcIiwgXCJzaG9ydFwiLCBcInN0YXRpY1wiLCBcInN5bmNocm9uaXplZFwiLCBcInRocm93c1wiLCBcInRyYW5zaWVudFwiLCBcInZvbGF0aWxlXCJdKTtcblxuZnVuY3Rpb24gaXNWYWxpZEVTM0lkZW50aWZpZXIobmFtZSkge1xuICByZXR1cm4gKDAsIF9pc1ZhbGlkSWRlbnRpZmllci5kZWZhdWx0KShuYW1lKSAmJiAhUkVTRVJWRURfV09SRFNfRVMzX09OTFkuaGFzKG5hbWUpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNWYWxpZElkZW50aWZpZXI7XG5cbnZhciBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllciA9IHJlcXVpcmUoXCJAYmFiZWwvaGVscGVyLXZhbGlkYXRvci1pZGVudGlmaWVyXCIpO1xuXG5mdW5jdGlvbiBpc1ZhbGlkSWRlbnRpZmllcihuYW1lLCByZXNlcnZlZCA9IHRydWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHJlc2VydmVkKSB7XG4gICAgaWYgKCgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc0tleXdvcmQpKG5hbWUpIHx8ICgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc1N0cmljdFJlc2VydmVkV29yZCkobmFtZSwgdHJ1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKDAsIF9oZWxwZXJWYWxpZGF0b3JJZGVudGlmaWVyLmlzSWRlbnRpZmllck5hbWUpKG5hbWUpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNWYXI7XG5cbnZhciBfZ2VuZXJhdGVkID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVkXCIpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIGlzVmFyKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfZ2VuZXJhdGVkLmlzVmFyaWFibGVEZWNsYXJhdGlvbikobm9kZSwge1xuICAgIGtpbmQ6IFwidmFyXCJcbiAgfSkgJiYgIW5vZGVbX2NvbnN0YW50cy5CTE9DS19TQ09QRURfU1lNQk9MXTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hdGNoZXNQYXR0ZXJuO1xuXG52YXIgX2dlbmVyYXRlZCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKTtcblxuZnVuY3Rpb24gbWF0Y2hlc1BhdHRlcm4obWVtYmVyLCBtYXRjaCwgYWxsb3dQYXJ0aWFsKSB7XG4gIGlmICghKDAsIF9nZW5lcmF0ZWQuaXNNZW1iZXJFeHByZXNzaW9uKShtZW1iZXIpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHBhcnRzID0gQXJyYXkuaXNBcnJheShtYXRjaCkgPyBtYXRjaCA6IG1hdGNoLnNwbGl0KFwiLlwiKTtcbiAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgbGV0IG5vZGU7XG5cbiAgZm9yIChub2RlID0gbWVtYmVyOyAoMCwgX2dlbmVyYXRlZC5pc01lbWJlckV4cHJlc3Npb24pKG5vZGUpOyBub2RlID0gbm9kZS5vYmplY3QpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUucHJvcGVydHkpO1xuICB9XG5cbiAgbm9kZXMucHVzaChub2RlKTtcbiAgaWYgKG5vZGVzLmxlbmd0aCA8IHBhcnRzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWFsbG93UGFydGlhbCAmJiBub2Rlcy5sZW5ndGggPiBwYXJ0cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGxldCBpID0gMCwgaiA9IG5vZGVzLmxlbmd0aCAtIDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKywgai0tKSB7XG4gICAgY29uc3Qgbm9kZSA9IG5vZGVzW2pdO1xuICAgIGxldCB2YWx1ZTtcblxuICAgIGlmICgoMCwgX2dlbmVyYXRlZC5pc0lkZW50aWZpZXIpKG5vZGUpKSB7XG4gICAgICB2YWx1ZSA9IG5vZGUubmFtZTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzU3RyaW5nTGl0ZXJhbCkobm9kZSkpIHtcbiAgICAgIHZhbHVlID0gbm9kZS52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfZ2VuZXJhdGVkLmlzVGhpc0V4cHJlc3Npb24pKG5vZGUpKSB7XG4gICAgICB2YWx1ZSA9IFwidGhpc1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRzW2ldICE9PSB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0NvbXBhdFRhZztcblxuZnVuY3Rpb24gaXNDb21wYXRUYWcodGFnTmFtZSkge1xuICByZXR1cm4gISF0YWdOYW1lICYmIC9eW2Etel0vLnRlc3QodGFnTmFtZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb24gPSByZXF1aXJlKFwiLi4vYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb25cIik7XG5cbmNvbnN0IGlzUmVhY3RDb21wb25lbnQgPSAoMCwgX2J1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uLmRlZmF1bHQpKFwiUmVhY3QuQ29tcG9uZW50XCIpO1xudmFyIF9kZWZhdWx0ID0gaXNSZWFjdENvbXBvbmVudDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdmFsaWRhdGU7XG5leHBvcnRzLnZhbGlkYXRlRmllbGQgPSB2YWxpZGF0ZUZpZWxkO1xuZXhwb3J0cy52YWxpZGF0ZUNoaWxkID0gdmFsaWRhdGVDaGlsZDtcblxudmFyIF9kZWZpbml0aW9ucyA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9uc1wiKTtcblxuZnVuY3Rpb24gdmFsaWRhdGUobm9kZSwga2V5LCB2YWwpIHtcbiAgaWYgKCFub2RlKSByZXR1cm47XG4gIGNvbnN0IGZpZWxkcyA9IF9kZWZpbml0aW9ucy5OT0RFX0ZJRUxEU1tub2RlLnR5cGVdO1xuICBpZiAoIWZpZWxkcykgcmV0dXJuO1xuICBjb25zdCBmaWVsZCA9IGZpZWxkc1trZXldO1xuICB2YWxpZGF0ZUZpZWxkKG5vZGUsIGtleSwgdmFsLCBmaWVsZCk7XG4gIHZhbGlkYXRlQ2hpbGQobm9kZSwga2V5LCB2YWwpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkKG5vZGUsIGtleSwgdmFsLCBmaWVsZCkge1xuICBpZiAoIShmaWVsZCAhPSBudWxsICYmIGZpZWxkLnZhbGlkYXRlKSkgcmV0dXJuO1xuICBpZiAoZmllbGQub3B0aW9uYWwgJiYgdmFsID09IG51bGwpIHJldHVybjtcbiAgZmllbGQudmFsaWRhdGUobm9kZSwga2V5LCB2YWwpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkKG5vZGUsIGtleSwgdmFsKSB7XG4gIGlmICh2YWwgPT0gbnVsbCkgcmV0dXJuO1xuICBjb25zdCB2YWxpZGF0ZSA9IF9kZWZpbml0aW9ucy5OT0RFX1BBUkVOVF9WQUxJREFUSU9OU1t2YWwudHlwZV07XG4gIGlmICghdmFsaWRhdGUpIHJldHVybjtcbiAgdmFsaWRhdGUobm9kZSwga2V5LCB2YWwpO1xufSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmxldCBmYXN0UHJvdG8gPSBudWxsO1xuXG4vLyBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHBlcm1hbmVudGx5IGZhc3QgcHJvcGVydGllcyBpbiBWOC4gU2VlIFRvb24gVmVyd2Flc3Qnc1xuLy8gcG9zdCBodHRwczovL21lZGl1bS5jb20vQHR2ZXJ3YWVzL3NldHRpbmctdXAtcHJvdG90eXBlcy1pbi12OC1lYzljOTQ5MWRmZTIjNWY2MlxuLy8gZm9yIG1vcmUgZGV0YWlscy4gVXNlICVIYXNGYXN0UHJvcGVydGllcyhvYmplY3QpIGFuZCB0aGUgTm9kZS5qcyBmbGFnXG4vLyAtLWFsbG93LW5hdGl2ZXMtc3ludGF4IHRvIGNoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBmYXN0IHByb3BlcnRpZXMuXG5mdW5jdGlvbiBGYXN0T2JqZWN0KG8pIHtcblx0Ly8gQSBwcm90b3R5cGUgb2JqZWN0IHdpbGwgaGF2ZSBcImZhc3QgcHJvcGVydGllc1wiIGVuYWJsZWQgb25jZSBpdCBpcyBjaGVja2VkXG5cdC8vIGFnYWluc3QgdGhlIGlubGluZSBwcm9wZXJ0eSBjYWNoZSBvZiBhIGZ1bmN0aW9uLCBlLmcuIGZhc3RQcm90by5wcm9wZXJ0eTpcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3Y4L3Y4L2Jsb2IvNi4wLjEyMi90ZXN0L21qc3VuaXQvZmFzdC1wcm90b3R5cGUuanMjTDQ4LUw2M1xuXHRpZiAoZmFzdFByb3RvICE9PSBudWxsICYmIHR5cGVvZiBmYXN0UHJvdG8ucHJvcGVydHkpIHtcblx0XHRjb25zdCByZXN1bHQgPSBmYXN0UHJvdG87XG5cdFx0ZmFzdFByb3RvID0gRmFzdE9iamVjdC5wcm90b3R5cGUgPSBudWxsO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblx0ZmFzdFByb3RvID0gRmFzdE9iamVjdC5wcm90b3R5cGUgPSBvID09IG51bGwgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbztcblx0cmV0dXJuIG5ldyBGYXN0T2JqZWN0O1xufVxuXG4vLyBJbml0aWFsaXplIHRoZSBpbmxpbmUgcHJvcGVydHkgY2FjaGUgb2YgRmFzdE9iamVjdFxuRmFzdE9iamVjdCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvRmFzdHByb3BlcnRpZXMobykge1xuXHRyZXR1cm4gRmFzdE9iamVjdChvKTtcbn07XG4iLCJpbXBvcnQgeyB0c1RoaXNUeXBlIH0gZnJvbSAnQGJhYmVsL3R5cGVzJztcbmltcG9ydCB7IHR5cGUsIFNoaXAgfSBmcm9tICcuL25ld1NoaXAnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmNsYXNzIEdhbWVib2FyZCB7XG4gIGNvbnN0cnVjdG9yKHZhbCA9IDEwMCkge1xuICAgIHRoaXMudmFsID0gdmFsO1xuICAgIHRoaXMuYm9hcmQgPSBbXTtcbiAgICB0aGlzLmZsZWV0ID0gW107XG4gICAgdGhpcy5sYXN0SGl0ID0ge1xuICAgICAgaGl0OiBmYWxzZSxcbiAgICAgIGxvY2F0aW9uOiBudWxsLFxuICAgIH07XG4gIH1cblxuICBpbml0aWFsaXNlQm9hcmQoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbDsgaSArPSAxKSB7XG4gICAgICB0aGlzLmJvYXJkLnB1c2goe1xuICAgICAgICBoYXNTaGlwOiBmYWxzZSwgc2hpcFR5cGU6IG51bGwsIGhpdDogZmFsc2UsIG1pc3M6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXJCb2FyZCgpIHtcbiAgICB0aGlzLmJvYXJkID0gW107XG4gICAgdGhpcy5mbGVldCA9IFtdO1xuICB9XG5cbiAgcmVuZGVyVG9ET00oRE9NQm9hcmQpIHtcbiAgICB0aGlzLmJvYXJkLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBpID0gdGhpcy5ib2FyZC5pbmRleE9mKGluZGV4KTtcbiAgICAgIGlmIChpbmRleC5oaXQpIERPTUJvYXJkW2ldLmNsYXNzTGlzdC5hZGQoJ2hpdCcpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBpZiAoaW5kZXgubWlzcykgRE9NQm9hcmRbaV0uaW5uZXJUZXh0ID0gJ1gnO1xuICAgIH0pO1xuICB9XG5cbiAgcmV2ZWFsU2hpcHMoRE9NQm9hcmQpIHtcbiAgICB0aGlzLmJvYXJkLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBpID0gdGhpcy5ib2FyZC5pbmRleE9mKGluZGV4KTtcbiAgICAgIGlmIChpbmRleC5oYXNTaGlwID09PSB0cnVlKSB7XG4gICAgICAgIERPTUJvYXJkW2ldLmNsYXNzTGlzdC5hZGQoJ3JldmVhbC1jZWxsJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgcmFuZG9tTnVtYmVyKHZhbCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWwpO1xuICB9XG5cbiAgY2FsbFJhbmRvbU51bWJlcih2YWwpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5yYW5kb21OdW1iZXIodmFsKTtcbiAgfVxuXG4gIGdlbmVyYXRlRmxlZXQoKSB7XG4gICAgT2JqZWN0LmtleXModHlwZSkuZm9yRWFjaCgoc2hpcE9iaikgPT4ge1xuICAgICAgY29uc3Qgc2hpcCA9IG5ldyBTaGlwKHR5cGVbc2hpcE9ial0pO1xuICAgICAgdGhpcy5mbGVldC5wdXNoKHNoaXApO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHRoaXMuZmxlZXQpO1xuICB9XG5cbiAgZ3JhYlNoaXAoc2hpcFR5cGUpIHtcbiAgICBjb25zdCBmaW5kQ29ycmVjdFNoaXAgPSB0aGlzLmZsZWV0LmZpbHRlcigoc2hpcCkgPT4gc2hpcC50eXBlID09PSBzaGlwVHlwZSk7XG4gICAgY29uc29sZS5sb2coZmluZENvcnJlY3RTaGlwKTtcbiAgICAvLyBzd2l0Y2ggKHNoaXBUeXBlKSB7XG4gICAgLy8gICBjYXNlICdjYXJyaWVyJzpcbiAgICAvLyAgICAgc2hpcCA9IG5ldyBTaGlwKHR5cGUuY2Fycmllcik7XG4gICAgLy8gICAgIGJyZWFrO1xuICAgIC8vICAgY2FzZSAnYmF0dGxlc2hpcCc6XG4gICAgLy8gICAgIHNoaXAgPSBuZXcgU2hpcCh0eXBlLmJhdHRsZXNoaXApO1xuICAgIC8vICAgICBicmVhaztcbiAgICAvLyAgIGNhc2UgJ2NydWlzZXInOlxuICAgIC8vICAgICBzaGlwID0gbmV3IFNoaXAodHlwZS5jcnVpc2VyKTtcbiAgICAvLyAgICAgYnJlYWs7XG4gICAgLy8gICBjYXNlICdzdWJtYXJpbmUnOlxuICAgIC8vICAgICBzaGlwID0gbmV3IFNoaXAodHlwZS5zdWJtYXJpbmUpO1xuICAgIC8vICAgICBicmVhaztcbiAgICAvLyAgIGNhc2UgJ2Rlc3Ryb3llcic6XG4gICAgLy8gICAgIHNoaXAgPSBuZXcgU2hpcCh0eXBlLmRlc3Ryb3llcik7XG4gICAgLy8gICAgIGJyZWFrO1xuICAgIC8vICAgZGVmYXVsdDpcbiAgICAvLyAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIH1cbiAgICAvLyByZXR1cm4gc2hpcDtcbiAgfVxuXG4gIHBsYWNlU2hpcChzaGlwLCBzdGFydENvb3JkKSB7XG4gICAgaWYgKHRoaXMudmFsaWRQbGFjZW1lbnQoc2hpcCwgc3RhcnRDb29yZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuYm9hcmRbc3RhcnRDb29yZCArIGldLnNoaXBUeXBlID0gc2hpcC50eXBlO1xuICAgICAgdGhpcy5ib2FyZFtzdGFydENvb3JkICsgaV0uaGFzU2hpcCA9IHRydWU7XG4gICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmJvYXJkW3N0YXJ0Q29vcmQgKyBpXSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmFuZG9tU2hpcFBsYWNlbWVudCgpIHtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmZsZWV0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmxlZXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmNhbGxSYW5kb21OdW1iZXIoMikgPT09IDApIHtcbiAgICAgICAgdGhpcy5mbGVldFtpXS5pc1ZlcnRpY2FsID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZsZWV0W2ldLmlzVmVydGljYWwgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmxlZXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLnBsYWNlU2hpcCh0aGlzLmZsZWV0W2ldLCB0aGlzLmNhbGxSYW5kb21OdW1iZXIodGhpcy52YWwpKSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXNlQm9hcmQoKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUZsZWV0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmRvbVNoaXBQbGFjZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5ib2FyZCk7XG4gICAgcmV0dXJuIG51bGw7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5mbGVldFswXSk7XG4gICAgLy8gdGhpcy5wbGFjZVNoaXAodGhpcy5mbGVldFswXSwgdGhpcy5jYWxsUmFuZG9tTnVtYmVyKHRoaXMudmFsKSk7XG4gIH1cblxuICByZWNlaXZlQXR0YWNrKGNvb3JkKSB7XG4gICAgaWYgKHRoaXMuYm9hcmRbY29vcmRdLm1pc3MgfHwgdGhpcy5ib2FyZFtjb29yZF0uaGl0ID09PSB0cnVlKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMuYm9hcmRbY29vcmRdLmhhc1NoaXApIHtcbiAgICAgIHRoaXMuYm9hcmRbY29vcmRdLmhpdCA9IHRydWU7XG4gICAgICB0aGlzLmxhc3RIaXQuaGl0ID0gdHJ1ZTtcbiAgICAgIHRoaXMubGFzdEhpdC5sb2NhdGlvbiA9IGNvb3JkO1xuICAgIH1cbiAgICBpZiAodGhpcy5ib2FyZFtjb29yZF0uaGFzU2hpcCA9PT0gZmFsc2UpIHRoaXMuYm9hcmRbY29vcmRdLm1pc3MgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0TmFtZU9mU2hpcChjb29yZCkge1xuICAgIGlmICh0aGlzLmJvYXJkW2Nvb3JkXS5oYXNTaGlwKSByZXR1cm4gdGhpcy5ib2FyZFtjb29yZF0uc2hpcFR5cGU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaHBIaXQobmFtZSkge1xuICAgIGNvbnN0IHNoaXBBcnIgPSB0aGlzLmJvYXJkLmZpbHRlcigoY29vcmQpID0+IGNvb3JkLnNoaXBUeXBlID09PSBuYW1lKTtcbiAgICBjb25zdCBmaW5kQ29ycmVjdFNoaXAgPSB0aGlzLmZsZWV0LmZpbHRlcigoc2hpcCkgPT4gc2hpcC50eXBlID09PSBuYW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBBcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzaGlwQXJyW2ldLmhpdCkgZmluZENvcnJlY3RTaGlwWzBdLmhpdChpKTtcbiAgICB9XG4gIH1cblxuICBmaWx0ZXJCeVNoaXBUeXBlKG5hbWUpIHtcbiAgICBjb25zdCBzaGlwQXJyID0gdGhpcy5ib2FyZC5maWx0ZXIoKGluZGV4KSA9PiBpbmRleC5zaGlwVHlwZSA9PT0gbmFtZSk7XG4gICAgcmV0dXJuIHNoaXBBcnI7XG4gIH1cblxuICB2YWxpZFBsYWNlbWVudChzaGlwLCBzdGFydENvb3JkKSB7XG4gICAgaWYgKHNoaXAuaXNWZXJ0aWNhbCA9PT0gdHJ1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmlzT3V0T2ZCb3VuZHMoc3RhcnRDb29yZCArIGkgKiAxMCkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnT3V0IG9mIGJvdW5kcyEnKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ib2FyZFtzdGFydENvb3JkICsgaSAqIDEwXS5oYXNTaGlwID09PSB0cnVlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yISBQbGFjZW1lbnQgY2xhc2hlcyB3aXRoIGFub3RoZXIgcGxhY2VkIHNoaXAhJyk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmJvYXJkW3N0YXJ0Q29vcmQgKyBpICogMTBdLnNoaXBUeXBlID0gc2hpcC50eXBlO1xuICAgICAgICB0aGlzLmJvYXJkW3N0YXJ0Q29vcmQgKyBpICogMTBdLmhhc1NoaXAgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmJvYXJkW3N0YXJ0Q29vcmQgKyBpICogMTBdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNoaXAuaXNWZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5pc091dE9mQm91bmRzKHN0YXJ0Q29vcmQgKyBpKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdPdXQgb2YgYm91bmRzIScpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID49IDEpIHtcbiAgICAgICAgICBjb25zdCByb3VuZGVkID0gTWF0aC5jZWlsKHN0YXJ0Q29vcmQgLyAxMCkgKiAxMDtcbiAgICAgICAgICBpZiAoc3RhcnRDb29yZCArIGkgPj0gcm91bmRlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbnRpbnVlcyBvbiBuZXh0IGxpbmUhJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbc3RhcnRDb29yZCArIGldLmhhc1NoaXAgPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IhIFBsYWNlbWVudCBjbGFzaGVzIHdpdGggYW5vdGhlciBwbGFjZWQgc2hpcCEnKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpc091dE9mQm91bmRzKGNvb3JkKSB7XG4gICAgaWYgKGNvb3JkIDwgMCB8fCBjb29yZCA+IHRoaXMuYm9hcmQubGVuZ3RoIC0gMSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgYWxsU2hpcHNTdW5rKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZmxlZXQpO1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZmxlZXQuZXZlcnkoKHNoaXApID0+IHNoaXAuaXNEZXN0cm95ZWQoKSkpO1xuICAgIHJldHVybiB0aGlzLmZsZWV0LmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzRGVzdHJveWVkKCkpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBHYW1lYm9hcmQ7XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmNsYXNzIFBsYXllciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucGFzdEhpdHMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRNb3ZlID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyByYW5kb21OdW1iZXIodmFsKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHZhbCk7XG4gIH1cblxuICBjYWxsUmFuZG9tTnVtYmVyKHZhbCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnJhbmRvbU51bWJlcih2YWwpO1xuICB9XG5cbiAgcmFuZG9tTW92ZSgpIHtcbiAgICBjb25zdCBjb29yZCA9IHRoaXMuY2FsbFJhbmRvbU51bWJlcigxMDApO1xuICAgIGlmICh0aGlzLnBhc3RIaXRzLnNvbWUoKHBhc3RIaXQpID0+IHBhc3RIaXQgPT09IGNvb3JkKSkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5wYXN0SGl0cyk7XG4gICAgICByZXR1cm4gdGhpcy5yYW5kb21Nb3ZlKCk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKHRoaXMucGFzdEhpdHMpO1xuICAgIHRoaXMucGFzdEhpdHMucHVzaChjb29yZCk7XG4gICAgdGhpcy5jdXJyZW50TW92ZSA9IGNvb3JkO1xuICAgIHJldHVybiBjb29yZDtcbiAgfVxuXG4gIGNsZWFyUGFzdEhpdHMoKSB7XG4gICAgdGhpcy5wYXN0SGl0cyA9IFtdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXllcjtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuY29uc3QgdHlwZSA9IHtcbiAgY2Fycmllcjoge1xuICAgIHR5cGU6ICdjYXJyaWVyJyxcbiAgICBsZW5ndGg6IDUsXG4gIH0sXG4gIGJhdHRsZXNoaXA6IHtcbiAgICB0eXBlOiAnYmF0dGxlc2hpcCcsXG4gICAgbGVuZ3RoOiA0LFxuICB9LFxuICBjcnVpc2VyOiB7XG4gICAgdHlwZTogJ2NydWlzZXInLFxuICAgIGxlbmd0aDogMyxcbiAgfSxcbiAgc3VibWFyaW5lOiB7XG4gICAgdHlwZTogJ3N1Ym1hcmluZScsXG4gICAgbGVuZ3RoOiAzLFxuICB9LFxuICBkZXN0cm95ZXI6IHtcbiAgICB0eXBlOiAnZGVzdHJveWVyJyxcbiAgICBsZW5ndGg6IDIsXG4gIH0sXG59O1xuXG5jbGFzcyBTaGlwIHtcbiAgY29uc3RydWN0b3Ioc2hpcCwgdmVydGljYWwgPSB0cnVlKSB7XG4gICAgdGhpcy50eXBlID0gc2hpcC50eXBlO1xuICAgIHRoaXMubGVuZ3RoID0gc2hpcC5sZW5ndGg7XG4gICAgdGhpcy5ocCA9IEFycmF5KHRoaXMubGVuZ3RoKS5maWxsKG51bGwpO1xuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IHZlcnRpY2FsO1xuICB9XG5cbiAgaGl0KGluZGV4KSB7XG4gICAgdGhpcy5ocFtpbmRleF0gPSB0cnVlO1xuICAgIGlmICh0aGlzLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke3RoaXMudHlwZX0gaGFzIGJlZW4gZGVzdHJveWVkIWApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ocDtcbiAgfVxuXG4gIGlzRGVzdHJveWVkKCkge1xuICAgIHJldHVybiB0aGlzLmhwLmV2ZXJ5KChocCkgPT4gaHAgPT09IHRydWUpO1xuICB9XG59XG5cbmV4cG9ydCB7IHR5cGUsIFNoaXAgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuaW1wb3J0IHsgdHlwZSwgU2hpcCB9IGZyb20gJy4vbmV3U2hpcCc7XG5pbXBvcnQgUGxheWVyIGZyb20gJy4vbmV3UGxheWVyJztcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSAnLi9uZXdHYW1lYm9hcmQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgRE9NID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgcGxheWVyR2FtZWJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllcicpO1xuICBjb25zdCBlbmVteUdhbWVib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbmVteScpO1xuICBjb25zdCBwbGF5ZXJHYW1lYm9hcmRBcnIgPSBBcnJheS5mcm9tKHBsYXllckdhbWVib2FyZC5jaGlsZHJlbik7XG4gIGNvbnN0IGVuZW15R2FtZWJvYXJkQXJyID0gQXJyYXkuZnJvbShlbmVteUdhbWVib2FyZC5jaGlsZHJlbik7XG4gIGNvbnN0IHJlc3RhcnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVzdGFydCcpO1xuXG4gIGNvbnN0IHNoaXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNoaXAnKTtcbiAgY29uc3QgcGxhY2VTaGlwc0dhbWVib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGFjZVNoaXBzLWdhbWVib2FyZCcpO1xuICBjb25zdCBwbGFjZVNoaXBzQ2VsbHMgPSBwbGFjZVNoaXBzR2FtZWJvYXJkLmNoaWxkcmVuO1xuICBjb25zdCBwbGFjZVNoaXBzR2FtZWJvYXJkQXJyID0gQXJyYXkuZnJvbShwbGFjZVNoaXBzR2FtZWJvYXJkLmNoaWxkcmVuKTtcbiAgY29uc3QgcGxhY2VSYW5kb21CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxhY2UtcmFuZG9tJyk7XG4gIGNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXJ0Jyk7XG4gIGxldCBjdXJyZW50U2hpcFR5cGUgPSBudWxsO1xuICBsZXQgY3VycmVudENlbGwgPSBudWxsO1xuXG4gIHNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICBzaGlwLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIChlKSA9PiB7XG4gICAgICBjdXJyZW50U2hpcFR5cGUgPSBlLmN1cnJlbnRUYXJnZXQuaWQ7XG4gICAgICBlLnRhcmdldC5zdHlsZS5vcGFjaXR5ID0gMC40O1xuICAgIH0sIGZhbHNlKTtcbiAgICBzaGlwLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCAoZSkgPT4ge1xuICAgICAgY3VycmVudFNoaXBUeXBlID0gbnVsbDtcbiAgICAgIGUudGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgY3VycmVudFNoaXBUeXBlID0gJyc7XG4gICAgfSwgZmFsc2UpO1xuICAgIHNoaXAuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIChlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlLnRhcmdldCk7XG4gICAgICBjb25zb2xlLmxvZyhjdXJyZW50Q2VsbCk7XG4gICAgICBlLmN1cnJlbnRUYXJnZXQucmVtb3ZlQXR0cmlidXRlKCdkcmFnZ2FibGUnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcGxhY2VTaGlwc0dhbWVib2FyZC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5wYXJlbnROb2RlID09PSBwbGFjZVNoaXBzR2FtZWJvYXJkKSB7XG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjZWxsJykpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGxhY2VTaGlwc0dhbWVib2FyZEFyci5pbmRleE9mKGUudGFyZ2V0KSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGN1cnJlbnRTaGlwVHlwZSk7XG4gICAgICAgIGNvbnN0IGkgPSBwbGFjZVNoaXBzR2FtZWJvYXJkQXJyLmluZGV4T2YoZS50YXJnZXQpO1xuICAgICAgICBjdXJyZW50Q2VsbCA9IGk7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ292ZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIGZhbHNlKTtcblxuICBwbGFjZVNoaXBzR2FtZWJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIChlKSA9PiB7XG4gICAgaWYgKGUudGFyZ2V0LnBhcmVudE5vZGUgPT09IHBsYWNlU2hpcHNHYW1lYm9hcmQpIHtcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NlbGwnKSkge1xuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgZW5lbXlHYW1lYm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NlbGwnKSkge1xuICAgICAgZ2FtZS5nYW1lTG9vcChlbmVteUdhbWVib2FyZEFyci5pbmRleE9mKGUudGFyZ2V0KSk7XG4gICAgICBjb25zb2xlLmxvZyhlbmVteUdhbWVib2FyZEFyci5pbmRleE9mKGUudGFyZ2V0KSk7XG4gICAgfVxuICB9KTtcblxuICByZXN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGdhbWUucmVzdGFydEdhbWUoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2xlYXJCb2FyZCgpIHtcbiAgICBwbGF5ZXJHYW1lYm9hcmRBcnIuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdoaXQnKTtcbiAgICAgIGNlbGwuaW5uZXJUZXh0ID0gJyc7XG4gICAgfSk7XG4gICAgZW5lbXlHYW1lYm9hcmRBcnIuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdoaXQnKTtcbiAgICAgIGNlbGwuaW5uZXJUZXh0ID0gJyc7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRNZXNzYWdlKHN0cikge1xuICAgIGNvbnN0IG1lc3NhZ2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlJyk7XG4gICAgbWVzc2FnZUVsLmlubmVyVGV4dCA9IHN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZUNsaWNrcyhib29sZWFuKSB7XG4gICAgaWYgKGJvb2xlYW4pIHtcbiAgICAgIHJldHVybiBlbmVteUdhbWVib2FyZC5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlJyk7XG4gICAgfVxuICAgIGVuZW15R2FtZWJvYXJkLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGUnKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVDZWxscyhnYW1lYm9hcmQpIHtcbiAgICBnYW1lYm9hcmQuY2xhc3NMaXN0LnRvZ2dsZSgncmV2ZWFsLWNlbGwnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0TWVzc2FnZSxcbiAgICBwbGFjZVNoaXBzR2FtZWJvYXJkQXJyLFxuICAgIHBsYXllckdhbWVib2FyZEFycixcbiAgICBlbmVteUdhbWVib2FyZEFycixcbiAgICB0b2dnbGVDbGlja3MsXG4gICAgY2xlYXJCb2FyZCxcbiAgfTtcbn0oKSk7XG5cbmNvbnN0IGdhbWUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKCdwbGF5ZXInKTtcbiAgY29uc3QgY29tcHV0ZXIgPSBuZXcgUGxheWVyKCdDb21wdXRlcicpO1xuICBjb25zdCBwbGF5ZXJHYW1lYm9hcmQgPSBuZXcgR2FtZWJvYXJkKCk7XG4gIGNvbnN0IGVuZW15R2FtZWJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xuICBjb25zdCBwbGFjZVNoaXBzR2FtZWJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpc2VHYW1lKCkge1xuICAgIHBsYWNlU2hpcHNHYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgIHBsYXllckdhbWVib2FyZC5jbGVhckJvYXJkKCk7XG4gICAgZW5lbXlHYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgIHBsYWNlU2hpcHNHYW1lYm9hcmQuaW5pdGlhbGlzZUJvYXJkKCk7XG4gICAgcGxheWVyR2FtZWJvYXJkLmluaXRpYWxpc2VCb2FyZCgpO1xuICAgIGVuZW15R2FtZWJvYXJkLmluaXRpYWxpc2VCb2FyZCgpO1xuICAgIHBsYWNlU2hpcHNHYW1lYm9hcmQuZ2VuZXJhdGVGbGVldCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxhY2VTaGlwKHNoaXAsIGluZGV4KSB7XG4gICAgY29uc3Qgc2hpcE9iaiA9IHBsYWNlU2hpcHNHYW1lYm9hcmQuZ2VuZXJhdGVTaGlwKHNoaXApO1xuICAgIGlmIChwbGFjZVNoaXBzR2FtZWJvYXJkLnZhbGlkUGxhY2VtZW50KHNoaXBPYmosIGluZGV4KSkge1xuICAgICAgcGxhY2VTaGlwc0dhbWVib2FyZC5wbGFjZVNoaXAoc2hpcE9iaiwgaW5kZXgpO1xuICAgICAgcGxhY2VTaGlwc0dhbWVib2FyZC5yZW5kZXJUb0RPTShET00ucGxhY2VTaGlwc0dhbWVib2FyZEFycik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ3NvbWV0aGluZyB3ZW50IHdyb25nIScpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBwbGFjZVNoaXBzR2FtZWJvYXJkLmdyYWJTaGlwKCdjYXJyaWVyJyk7XG5cbiAgZnVuY3Rpb24gcmFuZG9tU2hpcFBsYWNlbWVudChib29sZWFuKSB7XG4gICAgaWYgKGJvb2xlYW4gPT09IHRydWUpIHBsYXllckdhbWVib2FyZC5yYW5kb21TaGlwUGxhY2VtZW50KCk7XG4gICAgZW5lbXlHYW1lYm9hcmQucmFuZG9tU2hpcFBsYWNlbWVudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2FtZUxvb3AoY29vcmQpIHtcbiAgICBpZiAoZW5lbXlHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZCkgPT09IHRydWUpIHtcbiAgICAgIGVuZW15R2FtZWJvYXJkLmhwSGl0KGVuZW15R2FtZWJvYXJkLmdldE5hbWVPZlNoaXAoY29vcmQpKTtcbiAgICAgIGVuZW15R2FtZWJvYXJkLnJlbmRlclRvRE9NKERPTS5lbmVteUdhbWVib2FyZEFycik7XG4gICAgICBpZiAoZW5lbXlHYW1lYm9hcmQuYWxsU2hpcHNTdW5rKCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VuZW15IGFsbCBzaGlwcyBzdW5rJyk7XG4gICAgICAgIERPTS50b2dnbGVDbGlja3ModHJ1ZSk7XG4gICAgICB9XG4gICAgICBjb21wdXRlci5yYW5kb21Nb3ZlKCk7XG4gICAgICBwbGF5ZXJHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb21wdXRlci5jdXJyZW50TW92ZSk7XG4gICAgICBwbGF5ZXJHYW1lYm9hcmQucmVuZGVyVG9ET00oRE9NLnBsYXllckdhbWVib2FyZEFycik7XG4gICAgICBpZiAocGxheWVyR2FtZWJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgc2hpcHMgYWxsIHN1bmsnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY29uc29sZS5sb2coJ2F0dGFjayBkaWQgbm90IG9jY3VyIGR1ZSB0byBjbGlja2luZyBvbiBhIG1pc3Mgb3IgYWxyZWFkeSBoaXQgdGFyZ2V0Jyk7XG4gIH1cblxuICBmdW5jdGlvbiByZXN0YXJ0R2FtZSgpIHtcbiAgICBET00uY2xlYXJCb2FyZCgpO1xuICAgIGluaXRpYWxpc2VHYW1lKCk7XG4gICAgcmFuZG9tU2hpcFBsYWNlbWVudCh0cnVlKTtcbiAgICBwbGF5ZXIuY2xlYXJQYXN0SGl0cygpO1xuICAgIGNvbXB1dGVyLmNsZWFyUGFzdEhpdHMoKTtcbiAgICBET00udG9nZ2xlQ2xpY2tzKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdhbWVMb29wLFxuICAgIHJhbmRvbVNoaXBQbGFjZW1lbnQsXG4gICAgcGxheWVyR2FtZWJvYXJkLFxuICAgIGVuZW15R2FtZWJvYXJkLFxuICAgIGluaXRpYWxpc2VHYW1lLFxuICAgIHJlc3RhcnRHYW1lLFxuICAgIHBsYWNlU2hpcCxcbiAgfTtcbn0oKSk7XG5nYW1lLmluaXRpYWxpc2VHYW1lKCk7XG5leHBvcnQgeyBET00sIGdhbWUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==